ARM GAS  /tmp/cckkLGmm.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvTaskIsTaskSuspended:
  26              	.LVL0:
  27              	.LFB15:
  28              		.file 1 "./freeRTOS/tasks.c"
   1:./freeRTOS/tasks.c **** /*
   2:./freeRTOS/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:./freeRTOS/tasks.c ****     All rights reserved
   4:./freeRTOS/tasks.c **** 
   5:./freeRTOS/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:./freeRTOS/tasks.c **** 
   7:./freeRTOS/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:./freeRTOS/tasks.c **** 
   9:./freeRTOS/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:./freeRTOS/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:./freeRTOS/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:./freeRTOS/tasks.c **** 
  13:./freeRTOS/tasks.c ****     ***************************************************************************
  14:./freeRTOS/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:./freeRTOS/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:./freeRTOS/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:./freeRTOS/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:./freeRTOS/tasks.c ****     ***************************************************************************
  19:./freeRTOS/tasks.c **** 
  20:./freeRTOS/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:./freeRTOS/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:./freeRTOS/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:./freeRTOS/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:./freeRTOS/tasks.c **** 
  25:./freeRTOS/tasks.c ****     ***************************************************************************
  26:./freeRTOS/tasks.c ****      *                                                                       *
  27:./freeRTOS/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:./freeRTOS/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:./freeRTOS/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:./freeRTOS/tasks.c ****      *    is the industry's de facto standard.                               *
ARM GAS  /tmp/cckkLGmm.s 			page 2


  31:./freeRTOS/tasks.c ****      *                                                                       *
  32:./freeRTOS/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:./freeRTOS/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:./freeRTOS/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:./freeRTOS/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:./freeRTOS/tasks.c ****      *                                                                       *
  37:./freeRTOS/tasks.c ****     ***************************************************************************
  38:./freeRTOS/tasks.c **** 
  39:./freeRTOS/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:./freeRTOS/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:./freeRTOS/tasks.c ****     defined configASSERT()?
  42:./freeRTOS/tasks.c **** 
  43:./freeRTOS/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:./freeRTOS/tasks.c ****     embedded software for free we request you assist our global community by
  45:./freeRTOS/tasks.c ****     participating in the support forum.
  46:./freeRTOS/tasks.c **** 
  47:./freeRTOS/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:./freeRTOS/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:./freeRTOS/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:./freeRTOS/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:./freeRTOS/tasks.c **** 
  52:./freeRTOS/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:./freeRTOS/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:./freeRTOS/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:./freeRTOS/tasks.c **** 
  56:./freeRTOS/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:./freeRTOS/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:./freeRTOS/tasks.c **** 
  59:./freeRTOS/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:./freeRTOS/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:./freeRTOS/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:./freeRTOS/tasks.c **** 
  63:./freeRTOS/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:./freeRTOS/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:./freeRTOS/tasks.c ****     mission critical applications that require provable dependability.
  66:./freeRTOS/tasks.c **** 
  67:./freeRTOS/tasks.c ****     1 tab == 4 spaces!
  68:./freeRTOS/tasks.c **** */
  69:./freeRTOS/tasks.c **** 
  70:./freeRTOS/tasks.c **** /* Standard includes. */
  71:./freeRTOS/tasks.c **** #include <stdlib.h>
  72:./freeRTOS/tasks.c **** #include <string.h>
  73:./freeRTOS/tasks.c **** 
  74:./freeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:./freeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:./freeRTOS/tasks.c **** task.h is included from an application file. */
  77:./freeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:./freeRTOS/tasks.c **** 
  79:./freeRTOS/tasks.c **** /* FreeRTOS includes. */
  80:./freeRTOS/tasks.c **** #include "FreeRTOS.h"
  81:./freeRTOS/tasks.c **** #include "task.h"
  82:./freeRTOS/tasks.c **** #include "timers.h"
  83:./freeRTOS/tasks.c **** #include "StackMacros.h"
  84:./freeRTOS/tasks.c **** 
  85:./freeRTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:./freeRTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:./freeRTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
ARM GAS  /tmp/cckkLGmm.s 			page 3


  88:./freeRTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:./freeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:./freeRTOS/tasks.c **** 
  91:./freeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:./freeRTOS/tasks.c **** functions but without including stdio.h here. */
  93:./freeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:./freeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:./freeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:./freeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:./freeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:./freeRTOS/tasks.c **** 	#include <stdio.h>
  99:./freeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:./freeRTOS/tasks.c **** 
 101:./freeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:./freeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:./freeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:./freeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:./freeRTOS/tasks.c **** #else
 106:./freeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:./freeRTOS/tasks.c **** #endif
 108:./freeRTOS/tasks.c **** 
 109:./freeRTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:./freeRTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:./freeRTOS/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:./freeRTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:./freeRTOS/tasks.c **** 
 114:./freeRTOS/tasks.c **** /*
 115:./freeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:./freeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:./freeRTOS/tasks.c ****  */
 118:./freeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:./freeRTOS/tasks.c **** 
 120:./freeRTOS/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:./freeRTOS/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:./freeRTOS/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:./freeRTOS/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:./freeRTOS/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:./freeRTOS/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:./freeRTOS/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:./freeRTOS/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:./freeRTOS/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:./freeRTOS/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:./freeRTOS/tasks.c **** made to free the RAM that was allocated statically.
 131:./freeRTOS/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:./freeRTOS/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:./freeRTOS/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:./freeRTOS/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:./freeRTOS/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:./freeRTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:./freeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:./freeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:./freeRTOS/tasks.c **** 
 140:./freeRTOS/tasks.c **** /*
 141:./freeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:./freeRTOS/tasks.c ****  */
 143:./freeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:./freeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
ARM GAS  /tmp/cckkLGmm.s 			page 4


 145:./freeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:./freeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:./freeRTOS/tasks.c **** 
 148:./freeRTOS/tasks.c **** /*
 149:./freeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:./freeRTOS/tasks.c ****  * global, rather than file scope.
 151:./freeRTOS/tasks.c ****  */
 152:./freeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:./freeRTOS/tasks.c **** 	#define static
 154:./freeRTOS/tasks.c **** #endif
 155:./freeRTOS/tasks.c **** 
 156:./freeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:./freeRTOS/tasks.c **** 
 158:./freeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:./freeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:./freeRTOS/tasks.c **** 	microcontroller architecture. */
 161:./freeRTOS/tasks.c **** 
 162:./freeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:./freeRTOS/tasks.c **** 	state task. */
 164:./freeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:./freeRTOS/tasks.c **** 	{																									\
 166:./freeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:./freeRTOS/tasks.c **** 		{																								\
 168:./freeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:./freeRTOS/tasks.c **** 		}																								\
 170:./freeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:./freeRTOS/tasks.c **** 
 172:./freeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 173:./freeRTOS/tasks.c **** 
 174:./freeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:./freeRTOS/tasks.c **** 	{																									\
 176:./freeRTOS/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:./freeRTOS/tasks.c **** 																										\
 178:./freeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:./freeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:./freeRTOS/tasks.c **** 		{																								\
 181:./freeRTOS/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:./freeRTOS/tasks.c **** 			--uxTopPriority;																			\
 183:./freeRTOS/tasks.c **** 		}																								\
 184:./freeRTOS/tasks.c **** 																										\
 185:./freeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:./freeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:./freeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:./freeRTOS/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:./freeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:./freeRTOS/tasks.c **** 
 191:./freeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 192:./freeRTOS/tasks.c **** 
 193:./freeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:./freeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:./freeRTOS/tasks.c **** 	being used. */
 196:./freeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:./freeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:./freeRTOS/tasks.c **** 
 199:./freeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:./freeRTOS/tasks.c **** 
 201:./freeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
ARM GAS  /tmp/cckkLGmm.s 			page 5


 202:./freeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:./freeRTOS/tasks.c **** 	architecture being used. */
 204:./freeRTOS/tasks.c **** 
 205:./freeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:./freeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:./freeRTOS/tasks.c **** 
 208:./freeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 209:./freeRTOS/tasks.c **** 
 210:./freeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:./freeRTOS/tasks.c **** 	{																								\
 212:./freeRTOS/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:./freeRTOS/tasks.c **** 																									\
 214:./freeRTOS/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:./freeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:./freeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:./freeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:./freeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:./freeRTOS/tasks.c **** 
 220:./freeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 221:./freeRTOS/tasks.c **** 
 222:./freeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:./freeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:./freeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:./freeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:./freeRTOS/tasks.c **** 	{																									\
 227:./freeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:./freeRTOS/tasks.c **** 		{																								\
 229:./freeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:./freeRTOS/tasks.c **** 		}																								\
 231:./freeRTOS/tasks.c **** 	}
 232:./freeRTOS/tasks.c **** 
 233:./freeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:./freeRTOS/tasks.c **** 
 235:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 236:./freeRTOS/tasks.c **** 
 237:./freeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:./freeRTOS/tasks.c **** count overflows. */
 239:./freeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:./freeRTOS/tasks.c **** {																									\
 241:./freeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 242:./freeRTOS/tasks.c **** 																									\
 243:./freeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:./freeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:./freeRTOS/tasks.c **** 																									\
 246:./freeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:./freeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:./freeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:./freeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 250:./freeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:./freeRTOS/tasks.c **** }
 252:./freeRTOS/tasks.c **** 
 253:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 254:./freeRTOS/tasks.c **** 
 255:./freeRTOS/tasks.c **** /*
 256:./freeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:./freeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:./freeRTOS/tasks.c ****  */
ARM GAS  /tmp/cckkLGmm.s 			page 6


 259:./freeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:./freeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:./freeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:./freeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:./freeRTOS/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 265:./freeRTOS/tasks.c **** 
 266:./freeRTOS/tasks.c **** /*
 267:./freeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:./freeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:./freeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:./freeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:./freeRTOS/tasks.c ****  */
 272:./freeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:./freeRTOS/tasks.c **** 
 274:./freeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:./freeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:./freeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:./freeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:./freeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:./freeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:./freeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:./freeRTOS/tasks.c **** to its original value when it is released. */
 282:./freeRTOS/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:./freeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:./freeRTOS/tasks.c **** #else
 285:./freeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:./freeRTOS/tasks.c **** #endif
 287:./freeRTOS/tasks.c **** 
 288:./freeRTOS/tasks.c **** /*
 289:./freeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:./freeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:./freeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 292:./freeRTOS/tasks.c ****  */
 293:./freeRTOS/tasks.c **** typedef struct tskTaskControlBlock
 294:./freeRTOS/tasks.c **** {
 295:./freeRTOS/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:./freeRTOS/tasks.c **** 
 297:./freeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:./freeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:./freeRTOS/tasks.c **** 	#endif
 300:./freeRTOS/tasks.c **** 
 301:./freeRTOS/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:./freeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:./freeRTOS/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:./freeRTOS/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:./freeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:./freeRTOS/tasks.c **** 
 307:./freeRTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:./freeRTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:./freeRTOS/tasks.c **** 	#endif
 310:./freeRTOS/tasks.c **** 
 311:./freeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:./freeRTOS/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:./freeRTOS/tasks.c **** 	#endif
 314:./freeRTOS/tasks.c **** 
 315:./freeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  /tmp/cckkLGmm.s 			page 7


 316:./freeRTOS/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:./freeRTOS/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:./freeRTOS/tasks.c **** 	#endif
 319:./freeRTOS/tasks.c **** 
 320:./freeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:./freeRTOS/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:./freeRTOS/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:./freeRTOS/tasks.c **** 	#endif
 324:./freeRTOS/tasks.c **** 
 325:./freeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:./freeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:./freeRTOS/tasks.c **** 	#endif
 328:./freeRTOS/tasks.c **** 
 329:./freeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:./freeRTOS/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:./freeRTOS/tasks.c **** 	#endif
 332:./freeRTOS/tasks.c **** 
 333:./freeRTOS/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:./freeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:./freeRTOS/tasks.c **** 	#endif
 336:./freeRTOS/tasks.c **** 
 337:./freeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:./freeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:./freeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:./freeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:./freeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:./freeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:./freeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:./freeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:./freeRTOS/tasks.c **** 		struct	_reent xNewLib_reent;
 346:./freeRTOS/tasks.c **** 	#endif
 347:./freeRTOS/tasks.c **** 
 348:./freeRTOS/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:./freeRTOS/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:./freeRTOS/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:./freeRTOS/tasks.c **** 	#endif
 352:./freeRTOS/tasks.c **** 
 353:./freeRTOS/tasks.c **** 	/* See the comments above the definition of
 354:./freeRTOS/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:./freeRTOS/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:./freeRTOS/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:./freeRTOS/tasks.c **** 	#endif
 358:./freeRTOS/tasks.c **** 
 359:./freeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:./freeRTOS/tasks.c **** 		uint8_t ucDelayAborted;
 361:./freeRTOS/tasks.c **** 	#endif
 362:./freeRTOS/tasks.c **** 
 363:./freeRTOS/tasks.c **** } tskTCB;
 364:./freeRTOS/tasks.c **** 
 365:./freeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:./freeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:./freeRTOS/tasks.c **** typedef tskTCB TCB_t;
 368:./freeRTOS/tasks.c **** 
 369:./freeRTOS/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:./freeRTOS/tasks.c **** static variables must be declared volatile. */
 371:./freeRTOS/tasks.c **** 
 372:./freeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
ARM GAS  /tmp/cckkLGmm.s 			page 8


 373:./freeRTOS/tasks.c **** 
 374:./freeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:./freeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:./freeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:./freeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:./freeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:./freeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:./freeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:./freeRTOS/tasks.c **** 
 382:./freeRTOS/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:./freeRTOS/tasks.c **** 
 384:./freeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:./freeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:./freeRTOS/tasks.c **** 
 387:./freeRTOS/tasks.c **** #endif
 388:./freeRTOS/tasks.c **** 
 389:./freeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:./freeRTOS/tasks.c **** 
 391:./freeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:./freeRTOS/tasks.c **** 
 393:./freeRTOS/tasks.c **** #endif
 394:./freeRTOS/tasks.c **** 
 395:./freeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 396:./freeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:./freeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:./freeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:./freeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:./freeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:./freeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:./freeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:./freeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:./freeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:./freeRTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:./freeRTOS/tasks.c **** 
 407:./freeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:./freeRTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:./freeRTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:./freeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:./freeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:./freeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:./freeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:./freeRTOS/tasks.c **** accessed from a critical section. */
 415:./freeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:./freeRTOS/tasks.c **** 
 417:./freeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:./freeRTOS/tasks.c **** 
 419:./freeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:./freeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:./freeRTOS/tasks.c **** 
 422:./freeRTOS/tasks.c **** #endif
 423:./freeRTOS/tasks.c **** 
 424:./freeRTOS/tasks.c **** /*lint +e956 */
 425:./freeRTOS/tasks.c **** 
 426:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 427:./freeRTOS/tasks.c **** 
 428:./freeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:./freeRTOS/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
ARM GAS  /tmp/cckkLGmm.s 			page 9


 430:./freeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:./freeRTOS/tasks.c **** #endif
 432:./freeRTOS/tasks.c **** 
 433:./freeRTOS/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:./freeRTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 435:./freeRTOS/tasks.c **** #endif
 436:./freeRTOS/tasks.c **** 
 437:./freeRTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:./freeRTOS/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:./freeRTOS/tasks.c **** #endif
 440:./freeRTOS/tasks.c **** 
 441:./freeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 442:./freeRTOS/tasks.c **** 
 443:./freeRTOS/tasks.c **** /**
 444:./freeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:./freeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:./freeRTOS/tasks.c ****  * is in any other state.
 447:./freeRTOS/tasks.c ****  */
 448:./freeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:./freeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:./freeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:./freeRTOS/tasks.c **** 
 452:./freeRTOS/tasks.c **** /*
 453:./freeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:./freeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 455:./freeRTOS/tasks.c ****  */
 456:./freeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:./freeRTOS/tasks.c **** 
 458:./freeRTOS/tasks.c **** /*
 459:./freeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:./freeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:./freeRTOS/tasks.c ****  * creation of the first user task.
 462:./freeRTOS/tasks.c ****  *
 463:./freeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:./freeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:./freeRTOS/tasks.c ****  *
 466:./freeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:./freeRTOS/tasks.c ****  *
 468:./freeRTOS/tasks.c ****  */
 469:./freeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:./freeRTOS/tasks.c **** 
 471:./freeRTOS/tasks.c **** /*
 472:./freeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:./freeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 474:./freeRTOS/tasks.c ****  *
 475:./freeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:./freeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:./freeRTOS/tasks.c ****  */
 478:./freeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:./freeRTOS/tasks.c **** 
 480:./freeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:./freeRTOS/tasks.c **** 
 482:./freeRTOS/tasks.c **** #endif
 483:./freeRTOS/tasks.c **** 
 484:./freeRTOS/tasks.c **** /*
 485:./freeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:./freeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
ARM GAS  /tmp/cckkLGmm.s 			page 10


 487:./freeRTOS/tasks.c ****  * and its TCB deleted.
 488:./freeRTOS/tasks.c ****  */
 489:./freeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:./freeRTOS/tasks.c **** 
 491:./freeRTOS/tasks.c **** /*
 492:./freeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:./freeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 494:./freeRTOS/tasks.c ****  */
 495:./freeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:./freeRTOS/tasks.c **** 
 497:./freeRTOS/tasks.c **** /*
 498:./freeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:./freeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:./freeRTOS/tasks.c ****  * a suspended list, etc.).
 501:./freeRTOS/tasks.c ****  *
 502:./freeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:./freeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 504:./freeRTOS/tasks.c ****  */
 505:./freeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:./freeRTOS/tasks.c **** 
 507:./freeRTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:./freeRTOS/tasks.c **** 
 509:./freeRTOS/tasks.c **** #endif
 510:./freeRTOS/tasks.c **** 
 511:./freeRTOS/tasks.c **** /*
 512:./freeRTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:./freeRTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:./freeRTOS/tasks.c ****  */
 515:./freeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:./freeRTOS/tasks.c **** 
 517:./freeRTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:./freeRTOS/tasks.c **** 
 519:./freeRTOS/tasks.c **** #endif
 520:./freeRTOS/tasks.c **** 
 521:./freeRTOS/tasks.c **** /*
 522:./freeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:./freeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:./freeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:./freeRTOS/tasks.c ****  */
 526:./freeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:./freeRTOS/tasks.c **** 
 528:./freeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:./freeRTOS/tasks.c **** 
 530:./freeRTOS/tasks.c **** #endif
 531:./freeRTOS/tasks.c **** 
 532:./freeRTOS/tasks.c **** /*
 533:./freeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:./freeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:./freeRTOS/tasks.c ****  *
 536:./freeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:./freeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:./freeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:./freeRTOS/tasks.c ****  * set to a value other than 1.
 540:./freeRTOS/tasks.c ****  */
 541:./freeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:./freeRTOS/tasks.c **** 
 543:./freeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
ARM GAS  /tmp/cckkLGmm.s 			page 11


 544:./freeRTOS/tasks.c **** 
 545:./freeRTOS/tasks.c **** #endif
 546:./freeRTOS/tasks.c **** 
 547:./freeRTOS/tasks.c **** /*
 548:./freeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:./freeRTOS/tasks.c ****  * will exit the Blocked state.
 550:./freeRTOS/tasks.c ****  */
 551:./freeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:./freeRTOS/tasks.c **** 
 553:./freeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:./freeRTOS/tasks.c **** 
 555:./freeRTOS/tasks.c **** 	/*
 556:./freeRTOS/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:./freeRTOS/tasks.c **** 	 * human readable tables of task information.
 558:./freeRTOS/tasks.c **** 	 */
 559:./freeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:./freeRTOS/tasks.c **** 
 561:./freeRTOS/tasks.c **** #endif
 562:./freeRTOS/tasks.c **** 
 563:./freeRTOS/tasks.c **** /*
 564:./freeRTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:./freeRTOS/tasks.c ****  * dynamically to fill in the structure's members.
 566:./freeRTOS/tasks.c ****  */
 567:./freeRTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:./freeRTOS/tasks.c **** 									const char * const pcName,
 569:./freeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 570:./freeRTOS/tasks.c **** 									void * const pvParameters,
 571:./freeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 572:./freeRTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:./freeRTOS/tasks.c **** 									TCB_t *pxNewTCB,
 574:./freeRTOS/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:./freeRTOS/tasks.c **** 
 576:./freeRTOS/tasks.c **** /*
 577:./freeRTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:./freeRTOS/tasks.c ****  * under the control of the scheduler.
 579:./freeRTOS/tasks.c ****  */
 580:./freeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:./freeRTOS/tasks.c **** 
 582:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 583:./freeRTOS/tasks.c **** 
 584:./freeRTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:./freeRTOS/tasks.c **** 
 586:./freeRTOS/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:./freeRTOS/tasks.c **** 									const char * const pcName,
 588:./freeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 589:./freeRTOS/tasks.c **** 									void * const pvParameters,
 590:./freeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 591:./freeRTOS/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:./freeRTOS/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:./freeRTOS/tasks.c **** 	{
 594:./freeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 595:./freeRTOS/tasks.c **** 	TaskHandle_t xReturn;
 596:./freeRTOS/tasks.c **** 
 597:./freeRTOS/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:./freeRTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:./freeRTOS/tasks.c **** 
 600:./freeRTOS/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
ARM GAS  /tmp/cckkLGmm.s 			page 12


 601:./freeRTOS/tasks.c **** 		{
 602:./freeRTOS/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:./freeRTOS/tasks.c **** 			function - use them. */
 604:./freeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:./freeRTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:./freeRTOS/tasks.c **** 
 607:./freeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:./freeRTOS/tasks.c **** 			{
 609:./freeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:./freeRTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:./freeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:./freeRTOS/tasks.c **** 			}
 613:./freeRTOS/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:./freeRTOS/tasks.c **** 
 615:./freeRTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:./freeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:./freeRTOS/tasks.c **** 		}
 618:./freeRTOS/tasks.c **** 		else
 619:./freeRTOS/tasks.c **** 		{
 620:./freeRTOS/tasks.c **** 			xReturn = NULL;
 621:./freeRTOS/tasks.c **** 		}
 622:./freeRTOS/tasks.c **** 
 623:./freeRTOS/tasks.c **** 		return xReturn;
 624:./freeRTOS/tasks.c **** 	}
 625:./freeRTOS/tasks.c **** 
 626:./freeRTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 628:./freeRTOS/tasks.c **** 
 629:./freeRTOS/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:./freeRTOS/tasks.c **** 
 631:./freeRTOS/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:./freeRTOS/tasks.c **** 	{
 633:./freeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 634:./freeRTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:./freeRTOS/tasks.c **** 
 636:./freeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:./freeRTOS/tasks.c **** 
 638:./freeRTOS/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:./freeRTOS/tasks.c **** 		{
 640:./freeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:./freeRTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:./freeRTOS/tasks.c **** 			not static allocation is being used. */
 643:./freeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:./freeRTOS/tasks.c **** 
 645:./freeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
 646:./freeRTOS/tasks.c **** 			{
 647:./freeRTOS/tasks.c **** 				/* Store the stack location in the TCB. */
 648:./freeRTOS/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:./freeRTOS/tasks.c **** 
 650:./freeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:./freeRTOS/tasks.c **** 				this task had a statically allocated stack in case it is
 652:./freeRTOS/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:./freeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:./freeRTOS/tasks.c **** 
 655:./freeRTOS/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:./freeRTOS/tasks.c **** 										pxTaskDefinition->pcName,
 657:./freeRTOS/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
ARM GAS  /tmp/cckkLGmm.s 			page 13


 658:./freeRTOS/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:./freeRTOS/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:./freeRTOS/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:./freeRTOS/tasks.c **** 										pxTaskDefinition->xRegions );
 662:./freeRTOS/tasks.c **** 
 663:./freeRTOS/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:./freeRTOS/tasks.c **** 				xReturn = pdPASS;
 665:./freeRTOS/tasks.c **** 			}
 666:./freeRTOS/tasks.c **** 		}
 667:./freeRTOS/tasks.c **** 
 668:./freeRTOS/tasks.c **** 		return xReturn;
 669:./freeRTOS/tasks.c **** 	}
 670:./freeRTOS/tasks.c **** 
 671:./freeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 673:./freeRTOS/tasks.c **** 
 674:./freeRTOS/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:./freeRTOS/tasks.c **** 
 676:./freeRTOS/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:./freeRTOS/tasks.c **** 							const char * const pcName,
 678:./freeRTOS/tasks.c **** 							const uint16_t usStackDepth,
 679:./freeRTOS/tasks.c **** 							void * const pvParameters,
 680:./freeRTOS/tasks.c **** 							UBaseType_t uxPriority,
 681:./freeRTOS/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:./freeRTOS/tasks.c **** 	{
 683:./freeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 684:./freeRTOS/tasks.c **** 	BaseType_t xReturn;
 685:./freeRTOS/tasks.c **** 
 686:./freeRTOS/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:./freeRTOS/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:./freeRTOS/tasks.c **** 		the TCB then the stack. */
 689:./freeRTOS/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:./freeRTOS/tasks.c **** 		{
 691:./freeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:./freeRTOS/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:./freeRTOS/tasks.c **** 			allocation is being used. */
 694:./freeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:./freeRTOS/tasks.c **** 
 696:./freeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
 697:./freeRTOS/tasks.c **** 			{
 698:./freeRTOS/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:./freeRTOS/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:./freeRTOS/tasks.c **** 				be deleted later if required. */
 701:./freeRTOS/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:./freeRTOS/tasks.c **** 
 703:./freeRTOS/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:./freeRTOS/tasks.c **** 				{
 705:./freeRTOS/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:./freeRTOS/tasks.c **** 					vPortFree( pxNewTCB );
 707:./freeRTOS/tasks.c **** 					pxNewTCB = NULL;
 708:./freeRTOS/tasks.c **** 				}
 709:./freeRTOS/tasks.c **** 			}
 710:./freeRTOS/tasks.c **** 		}
 711:./freeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:./freeRTOS/tasks.c **** 		{
 713:./freeRTOS/tasks.c **** 		StackType_t *pxStack;
 714:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 14


 715:./freeRTOS/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:./freeRTOS/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 717:./freeRTOS/tasks.c **** 
 718:./freeRTOS/tasks.c **** 			if( pxStack != NULL )
 719:./freeRTOS/tasks.c **** 			{
 720:./freeRTOS/tasks.c **** 				/* Allocate space for the TCB. */
 721:./freeRTOS/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:./freeRTOS/tasks.c **** 
 723:./freeRTOS/tasks.c **** 				if( pxNewTCB != NULL )
 724:./freeRTOS/tasks.c **** 				{
 725:./freeRTOS/tasks.c **** 					/* Store the stack location in the TCB. */
 726:./freeRTOS/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:./freeRTOS/tasks.c **** 				}
 728:./freeRTOS/tasks.c **** 				else
 729:./freeRTOS/tasks.c **** 				{
 730:./freeRTOS/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:./freeRTOS/tasks.c **** 					it again. */
 732:./freeRTOS/tasks.c **** 					vPortFree( pxStack );
 733:./freeRTOS/tasks.c **** 				}
 734:./freeRTOS/tasks.c **** 			}
 735:./freeRTOS/tasks.c **** 			else
 736:./freeRTOS/tasks.c **** 			{
 737:./freeRTOS/tasks.c **** 				pxNewTCB = NULL;
 738:./freeRTOS/tasks.c **** 			}
 739:./freeRTOS/tasks.c **** 		}
 740:./freeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:./freeRTOS/tasks.c **** 
 742:./freeRTOS/tasks.c **** 		if( pxNewTCB != NULL )
 743:./freeRTOS/tasks.c **** 		{
 744:./freeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:./freeRTOS/tasks.c **** 			{
 746:./freeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:./freeRTOS/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:./freeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:./freeRTOS/tasks.c **** 			}
 750:./freeRTOS/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:./freeRTOS/tasks.c **** 
 752:./freeRTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:./freeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:./freeRTOS/tasks.c **** 			xReturn = pdPASS;
 755:./freeRTOS/tasks.c **** 		}
 756:./freeRTOS/tasks.c **** 		else
 757:./freeRTOS/tasks.c **** 		{
 758:./freeRTOS/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:./freeRTOS/tasks.c **** 		}
 760:./freeRTOS/tasks.c **** 
 761:./freeRTOS/tasks.c **** 		return xReturn;
 762:./freeRTOS/tasks.c **** 	}
 763:./freeRTOS/tasks.c **** 
 764:./freeRTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 766:./freeRTOS/tasks.c **** 
 767:./freeRTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:./freeRTOS/tasks.c **** 									const char * const pcName,
 769:./freeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 770:./freeRTOS/tasks.c **** 									void * const pvParameters,
 771:./freeRTOS/tasks.c **** 									UBaseType_t uxPriority,
ARM GAS  /tmp/cckkLGmm.s 			page 15


 772:./freeRTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:./freeRTOS/tasks.c **** 									TCB_t *pxNewTCB,
 774:./freeRTOS/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:./freeRTOS/tasks.c **** {
 776:./freeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 777:./freeRTOS/tasks.c **** UBaseType_t x;
 778:./freeRTOS/tasks.c **** 
 779:./freeRTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:./freeRTOS/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:./freeRTOS/tasks.c **** 		BaseType_t xRunPrivileged;
 782:./freeRTOS/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:./freeRTOS/tasks.c **** 		{
 784:./freeRTOS/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:./freeRTOS/tasks.c **** 		}
 786:./freeRTOS/tasks.c **** 		else
 787:./freeRTOS/tasks.c **** 		{
 788:./freeRTOS/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:./freeRTOS/tasks.c **** 		}
 790:./freeRTOS/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:./freeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:./freeRTOS/tasks.c **** 
 793:./freeRTOS/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:./freeRTOS/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:./freeRTOS/tasks.c **** 	{
 796:./freeRTOS/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:./freeRTOS/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:./freeRTOS/tasks.c **** 	}
 799:./freeRTOS/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:./freeRTOS/tasks.c **** 
 801:./freeRTOS/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:./freeRTOS/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:./freeRTOS/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:./freeRTOS/tasks.c **** 	by the port. */
 805:./freeRTOS/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:./freeRTOS/tasks.c **** 	{
 807:./freeRTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:./freeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:./freeRTOS/tasks.c **** 
 810:./freeRTOS/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:./freeRTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:./freeRTOS/tasks.c **** 	}
 813:./freeRTOS/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:./freeRTOS/tasks.c **** 	{
 815:./freeRTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:./freeRTOS/tasks.c **** 
 817:./freeRTOS/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:./freeRTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:./freeRTOS/tasks.c **** 
 820:./freeRTOS/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:./freeRTOS/tasks.c **** 		performed. */
 822:./freeRTOS/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:./freeRTOS/tasks.c **** 	}
 824:./freeRTOS/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:./freeRTOS/tasks.c **** 
 826:./freeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
 827:./freeRTOS/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:./freeRTOS/tasks.c **** 	{
ARM GAS  /tmp/cckkLGmm.s 			page 16


 829:./freeRTOS/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 830:./freeRTOS/tasks.c **** 
 831:./freeRTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:./freeRTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:./freeRTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:./freeRTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:./freeRTOS/tasks.c **** 		{
 836:./freeRTOS/tasks.c **** 			break;
 837:./freeRTOS/tasks.c **** 		}
 838:./freeRTOS/tasks.c **** 		else
 839:./freeRTOS/tasks.c **** 		{
 840:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:./freeRTOS/tasks.c **** 		}
 842:./freeRTOS/tasks.c **** 	}
 843:./freeRTOS/tasks.c **** 
 844:./freeRTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:./freeRTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:./freeRTOS/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:./freeRTOS/tasks.c **** 
 848:./freeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:./freeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
 850:./freeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:./freeRTOS/tasks.c **** 	{
 852:./freeRTOS/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:./freeRTOS/tasks.c **** 	}
 854:./freeRTOS/tasks.c **** 	else
 855:./freeRTOS/tasks.c **** 	{
 856:./freeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:./freeRTOS/tasks.c **** 	}
 858:./freeRTOS/tasks.c **** 
 859:./freeRTOS/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:./freeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:./freeRTOS/tasks.c **** 	{
 862:./freeRTOS/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:./freeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:./freeRTOS/tasks.c **** 	}
 865:./freeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:./freeRTOS/tasks.c **** 
 867:./freeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:./freeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:./freeRTOS/tasks.c **** 
 870:./freeRTOS/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:./freeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:./freeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:./freeRTOS/tasks.c **** 
 874:./freeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
 875:./freeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:./freeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:./freeRTOS/tasks.c **** 
 878:./freeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:./freeRTOS/tasks.c **** 	{
 880:./freeRTOS/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:./freeRTOS/tasks.c **** 	}
 882:./freeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:./freeRTOS/tasks.c **** 
 884:./freeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:./freeRTOS/tasks.c **** 	{
ARM GAS  /tmp/cckkLGmm.s 			page 17


 886:./freeRTOS/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:./freeRTOS/tasks.c **** 	}
 888:./freeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:./freeRTOS/tasks.c **** 
 890:./freeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:./freeRTOS/tasks.c **** 	{
 892:./freeRTOS/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:./freeRTOS/tasks.c **** 	}
 894:./freeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:./freeRTOS/tasks.c **** 
 896:./freeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:./freeRTOS/tasks.c **** 	{
 898:./freeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:./freeRTOS/tasks.c **** 	}
 900:./freeRTOS/tasks.c **** 	#else
 901:./freeRTOS/tasks.c **** 	{
 902:./freeRTOS/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:./freeRTOS/tasks.c **** 		( void ) xRegions;
 904:./freeRTOS/tasks.c **** 	}
 905:./freeRTOS/tasks.c **** 	#endif
 906:./freeRTOS/tasks.c **** 
 907:./freeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:./freeRTOS/tasks.c **** 	{
 909:./freeRTOS/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:./freeRTOS/tasks.c **** 		{
 911:./freeRTOS/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:./freeRTOS/tasks.c **** 		}
 913:./freeRTOS/tasks.c **** 	}
 914:./freeRTOS/tasks.c **** 	#endif
 915:./freeRTOS/tasks.c **** 
 916:./freeRTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:./freeRTOS/tasks.c **** 	{
 918:./freeRTOS/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:./freeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:./freeRTOS/tasks.c **** 	}
 921:./freeRTOS/tasks.c **** 	#endif
 922:./freeRTOS/tasks.c **** 
 923:./freeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:./freeRTOS/tasks.c **** 	{
 925:./freeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:./freeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:./freeRTOS/tasks.c **** 	}
 928:./freeRTOS/tasks.c **** 	#endif
 929:./freeRTOS/tasks.c **** 
 930:./freeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:./freeRTOS/tasks.c **** 	{
 932:./freeRTOS/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:./freeRTOS/tasks.c **** 	}
 934:./freeRTOS/tasks.c **** 	#endif
 935:./freeRTOS/tasks.c **** 
 936:./freeRTOS/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:./freeRTOS/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:./freeRTOS/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:./freeRTOS/tasks.c **** 	the	top of stack variable is updated. */
 940:./freeRTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:./freeRTOS/tasks.c **** 	{
 942:./freeRTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
ARM GAS  /tmp/cckkLGmm.s 			page 18


 943:./freeRTOS/tasks.c **** 	}
 944:./freeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:./freeRTOS/tasks.c **** 	{
 946:./freeRTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:./freeRTOS/tasks.c **** 	}
 948:./freeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:./freeRTOS/tasks.c **** 
 950:./freeRTOS/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:./freeRTOS/tasks.c **** 	{
 952:./freeRTOS/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:./freeRTOS/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:./freeRTOS/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:./freeRTOS/tasks.c **** 	}
 956:./freeRTOS/tasks.c **** 	else
 957:./freeRTOS/tasks.c **** 	{
 958:./freeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:./freeRTOS/tasks.c **** 	}
 960:./freeRTOS/tasks.c **** }
 961:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 962:./freeRTOS/tasks.c **** 
 963:./freeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:./freeRTOS/tasks.c **** {
 965:./freeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:./freeRTOS/tasks.c **** 	updated. */
 967:./freeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 968:./freeRTOS/tasks.c **** 	{
 969:./freeRTOS/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:./freeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:./freeRTOS/tasks.c **** 		{
 972:./freeRTOS/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:./freeRTOS/tasks.c **** 			the suspended state - make this the current task. */
 974:./freeRTOS/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:./freeRTOS/tasks.c **** 
 976:./freeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:./freeRTOS/tasks.c **** 			{
 978:./freeRTOS/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:./freeRTOS/tasks.c **** 				initialisation required.  We will not recover if this call
 980:./freeRTOS/tasks.c **** 				fails, but we will report the failure. */
 981:./freeRTOS/tasks.c **** 				prvInitialiseTaskLists();
 982:./freeRTOS/tasks.c **** 			}
 983:./freeRTOS/tasks.c **** 			else
 984:./freeRTOS/tasks.c **** 			{
 985:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:./freeRTOS/tasks.c **** 			}
 987:./freeRTOS/tasks.c **** 		}
 988:./freeRTOS/tasks.c **** 		else
 989:./freeRTOS/tasks.c **** 		{
 990:./freeRTOS/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:./freeRTOS/tasks.c **** 			current task if it is the highest priority task to be created
 992:./freeRTOS/tasks.c **** 			so far. */
 993:./freeRTOS/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:./freeRTOS/tasks.c **** 			{
 995:./freeRTOS/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:./freeRTOS/tasks.c **** 				{
 997:./freeRTOS/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:./freeRTOS/tasks.c **** 				}
 999:./freeRTOS/tasks.c **** 				else
ARM GAS  /tmp/cckkLGmm.s 			page 19


1000:./freeRTOS/tasks.c **** 				{
1001:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:./freeRTOS/tasks.c **** 				}
1003:./freeRTOS/tasks.c **** 			}
1004:./freeRTOS/tasks.c **** 			else
1005:./freeRTOS/tasks.c **** 			{
1006:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:./freeRTOS/tasks.c **** 			}
1008:./freeRTOS/tasks.c **** 		}
1009:./freeRTOS/tasks.c **** 
1010:./freeRTOS/tasks.c **** 		uxTaskNumber++;
1011:./freeRTOS/tasks.c **** 
1012:./freeRTOS/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:./freeRTOS/tasks.c **** 		{
1014:./freeRTOS/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:./freeRTOS/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:./freeRTOS/tasks.c **** 		}
1017:./freeRTOS/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:./freeRTOS/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:./freeRTOS/tasks.c **** 
1020:./freeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:./freeRTOS/tasks.c **** 
1022:./freeRTOS/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:./freeRTOS/tasks.c **** 	}
1024:./freeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
1025:./freeRTOS/tasks.c **** 
1026:./freeRTOS/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:./freeRTOS/tasks.c **** 	{
1028:./freeRTOS/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:./freeRTOS/tasks.c **** 		then it should run now. */
1030:./freeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:./freeRTOS/tasks.c **** 		{
1032:./freeRTOS/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:./freeRTOS/tasks.c **** 		}
1034:./freeRTOS/tasks.c **** 		else
1035:./freeRTOS/tasks.c **** 		{
1036:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:./freeRTOS/tasks.c **** 		}
1038:./freeRTOS/tasks.c **** 	}
1039:./freeRTOS/tasks.c **** 	else
1040:./freeRTOS/tasks.c **** 	{
1041:./freeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:./freeRTOS/tasks.c **** 	}
1043:./freeRTOS/tasks.c **** }
1044:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1045:./freeRTOS/tasks.c **** 
1046:./freeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:./freeRTOS/tasks.c **** 
1048:./freeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:./freeRTOS/tasks.c **** 	{
1050:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
1051:./freeRTOS/tasks.c **** 
1052:./freeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1053:./freeRTOS/tasks.c **** 		{
1054:./freeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:./freeRTOS/tasks.c **** 			being deleted. */
1056:./freeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
ARM GAS  /tmp/cckkLGmm.s 			page 20


1057:./freeRTOS/tasks.c **** 
1058:./freeRTOS/tasks.c **** 			/* Remove task from the ready list. */
1059:./freeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:./freeRTOS/tasks.c **** 			{
1061:./freeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:./freeRTOS/tasks.c **** 			}
1063:./freeRTOS/tasks.c **** 			else
1064:./freeRTOS/tasks.c **** 			{
1065:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:./freeRTOS/tasks.c **** 			}
1067:./freeRTOS/tasks.c **** 
1068:./freeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1069:./freeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:./freeRTOS/tasks.c **** 			{
1071:./freeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:./freeRTOS/tasks.c **** 			}
1073:./freeRTOS/tasks.c **** 			else
1074:./freeRTOS/tasks.c **** 			{
1075:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:./freeRTOS/tasks.c **** 			}
1077:./freeRTOS/tasks.c **** 
1078:./freeRTOS/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:./freeRTOS/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:./freeRTOS/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:./freeRTOS/tasks.c **** 			not return. */
1082:./freeRTOS/tasks.c **** 			uxTaskNumber++;
1083:./freeRTOS/tasks.c **** 
1084:./freeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:./freeRTOS/tasks.c **** 			{
1086:./freeRTOS/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:./freeRTOS/tasks.c **** 				task itself, as a context switch to another task is required.
1088:./freeRTOS/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:./freeRTOS/tasks.c **** 				check the termination list and free up any memory allocated by
1090:./freeRTOS/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:./freeRTOS/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:./freeRTOS/tasks.c **** 
1093:./freeRTOS/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:./freeRTOS/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:./freeRTOS/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:./freeRTOS/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:./freeRTOS/tasks.c **** 
1098:./freeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:./freeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:./freeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
1101:./freeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:./freeRTOS/tasks.c **** 				required. */
1103:./freeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:./freeRTOS/tasks.c **** 			}
1105:./freeRTOS/tasks.c **** 			else
1106:./freeRTOS/tasks.c **** 			{
1107:./freeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:./freeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:./freeRTOS/tasks.c **** 
1110:./freeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:./freeRTOS/tasks.c **** 				the task that has just been deleted. */
1112:./freeRTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:./freeRTOS/tasks.c **** 			}
ARM GAS  /tmp/cckkLGmm.s 			page 21


1114:./freeRTOS/tasks.c **** 
1115:./freeRTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:./freeRTOS/tasks.c **** 		}
1117:./freeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1118:./freeRTOS/tasks.c **** 
1119:./freeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:./freeRTOS/tasks.c **** 		been deleted. */
1121:./freeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:./freeRTOS/tasks.c **** 		{
1123:./freeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:./freeRTOS/tasks.c **** 			{
1125:./freeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:./freeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1127:./freeRTOS/tasks.c **** 			}
1128:./freeRTOS/tasks.c **** 			else
1129:./freeRTOS/tasks.c **** 			{
1130:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:./freeRTOS/tasks.c **** 			}
1132:./freeRTOS/tasks.c **** 		}
1133:./freeRTOS/tasks.c **** 	}
1134:./freeRTOS/tasks.c **** 
1135:./freeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1137:./freeRTOS/tasks.c **** 
1138:./freeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:./freeRTOS/tasks.c **** 
1140:./freeRTOS/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:./freeRTOS/tasks.c **** 	{
1142:./freeRTOS/tasks.c **** 	TickType_t xTimeToWake;
1143:./freeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:./freeRTOS/tasks.c **** 
1145:./freeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:./freeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:./freeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:./freeRTOS/tasks.c **** 
1149:./freeRTOS/tasks.c **** 		vTaskSuspendAll();
1150:./freeRTOS/tasks.c **** 		{
1151:./freeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:./freeRTOS/tasks.c **** 			block. */
1153:./freeRTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:./freeRTOS/tasks.c **** 
1155:./freeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:./freeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:./freeRTOS/tasks.c **** 
1158:./freeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:./freeRTOS/tasks.c **** 			{
1160:./freeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
1161:./freeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:./freeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:./freeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:./freeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:./freeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:./freeRTOS/tasks.c **** 				{
1167:./freeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1168:./freeRTOS/tasks.c **** 				}
1169:./freeRTOS/tasks.c **** 				else
1170:./freeRTOS/tasks.c **** 				{
ARM GAS  /tmp/cckkLGmm.s 			page 22


1171:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:./freeRTOS/tasks.c **** 				}
1173:./freeRTOS/tasks.c **** 			}
1174:./freeRTOS/tasks.c **** 			else
1175:./freeRTOS/tasks.c **** 			{
1176:./freeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:./freeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:./freeRTOS/tasks.c **** 				tick time is less than the wake time. */
1179:./freeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:./freeRTOS/tasks.c **** 				{
1181:./freeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1182:./freeRTOS/tasks.c **** 				}
1183:./freeRTOS/tasks.c **** 				else
1184:./freeRTOS/tasks.c **** 				{
1185:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:./freeRTOS/tasks.c **** 				}
1187:./freeRTOS/tasks.c **** 			}
1188:./freeRTOS/tasks.c **** 
1189:./freeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:./freeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:./freeRTOS/tasks.c **** 
1192:./freeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:./freeRTOS/tasks.c **** 			{
1194:./freeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:./freeRTOS/tasks.c **** 
1196:./freeRTOS/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:./freeRTOS/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:./freeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:./freeRTOS/tasks.c **** 			}
1200:./freeRTOS/tasks.c **** 			else
1201:./freeRTOS/tasks.c **** 			{
1202:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:./freeRTOS/tasks.c **** 			}
1204:./freeRTOS/tasks.c **** 		}
1205:./freeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:./freeRTOS/tasks.c **** 
1207:./freeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:./freeRTOS/tasks.c **** 		have put ourselves to sleep. */
1209:./freeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:./freeRTOS/tasks.c **** 		{
1211:./freeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
1212:./freeRTOS/tasks.c **** 		}
1213:./freeRTOS/tasks.c **** 		else
1214:./freeRTOS/tasks.c **** 		{
1215:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:./freeRTOS/tasks.c **** 		}
1217:./freeRTOS/tasks.c **** 	}
1218:./freeRTOS/tasks.c **** 
1219:./freeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1221:./freeRTOS/tasks.c **** 
1222:./freeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:./freeRTOS/tasks.c **** 
1224:./freeRTOS/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:./freeRTOS/tasks.c **** 	{
1226:./freeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 23


1228:./freeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:./freeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1230:./freeRTOS/tasks.c **** 		{
1231:./freeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:./freeRTOS/tasks.c **** 			vTaskSuspendAll();
1233:./freeRTOS/tasks.c **** 			{
1234:./freeRTOS/tasks.c **** 				traceTASK_DELAY();
1235:./freeRTOS/tasks.c **** 
1236:./freeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
1237:./freeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:./freeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:./freeRTOS/tasks.c **** 				is resumed.
1240:./freeRTOS/tasks.c **** 
1241:./freeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:./freeRTOS/tasks.c **** 				executing task. */
1243:./freeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:./freeRTOS/tasks.c **** 			}
1245:./freeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:./freeRTOS/tasks.c **** 		}
1247:./freeRTOS/tasks.c **** 		else
1248:./freeRTOS/tasks.c **** 		{
1249:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:./freeRTOS/tasks.c **** 		}
1251:./freeRTOS/tasks.c **** 
1252:./freeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:./freeRTOS/tasks.c **** 		have put ourselves to sleep. */
1254:./freeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:./freeRTOS/tasks.c **** 		{
1256:./freeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
1257:./freeRTOS/tasks.c **** 		}
1258:./freeRTOS/tasks.c **** 		else
1259:./freeRTOS/tasks.c **** 		{
1260:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:./freeRTOS/tasks.c **** 		}
1262:./freeRTOS/tasks.c **** 	}
1263:./freeRTOS/tasks.c **** 
1264:./freeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1266:./freeRTOS/tasks.c **** 
1267:./freeRTOS/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:./freeRTOS/tasks.c **** 
1269:./freeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:./freeRTOS/tasks.c **** 	{
1271:./freeRTOS/tasks.c **** 	eTaskState eReturn;
1272:./freeRTOS/tasks.c **** 	List_t *pxStateList;
1273:./freeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:./freeRTOS/tasks.c **** 
1275:./freeRTOS/tasks.c **** 		configASSERT( pxTCB );
1276:./freeRTOS/tasks.c **** 
1277:./freeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:./freeRTOS/tasks.c **** 		{
1279:./freeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:./freeRTOS/tasks.c **** 			eReturn = eRunning;
1281:./freeRTOS/tasks.c **** 		}
1282:./freeRTOS/tasks.c **** 		else
1283:./freeRTOS/tasks.c **** 		{
1284:./freeRTOS/tasks.c **** 			taskENTER_CRITICAL();
ARM GAS  /tmp/cckkLGmm.s 			page 24


1285:./freeRTOS/tasks.c **** 			{
1286:./freeRTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:./freeRTOS/tasks.c **** 			}
1288:./freeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1289:./freeRTOS/tasks.c **** 
1290:./freeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:./freeRTOS/tasks.c **** 			{
1292:./freeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:./freeRTOS/tasks.c **** 				lists. */
1294:./freeRTOS/tasks.c **** 				eReturn = eBlocked;
1295:./freeRTOS/tasks.c **** 			}
1296:./freeRTOS/tasks.c **** 
1297:./freeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:./freeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:./freeRTOS/tasks.c **** 				{
1300:./freeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:./freeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:./freeRTOS/tasks.c **** 					indefinitely? */
1303:./freeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:./freeRTOS/tasks.c **** 					{
1305:./freeRTOS/tasks.c **** 						eReturn = eSuspended;
1306:./freeRTOS/tasks.c **** 					}
1307:./freeRTOS/tasks.c **** 					else
1308:./freeRTOS/tasks.c **** 					{
1309:./freeRTOS/tasks.c **** 						eReturn = eBlocked;
1310:./freeRTOS/tasks.c **** 					}
1311:./freeRTOS/tasks.c **** 				}
1312:./freeRTOS/tasks.c **** 			#endif
1313:./freeRTOS/tasks.c **** 
1314:./freeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:./freeRTOS/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:./freeRTOS/tasks.c **** 				{
1317:./freeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:./freeRTOS/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:./freeRTOS/tasks.c **** 					all. */
1320:./freeRTOS/tasks.c **** 					eReturn = eDeleted;
1321:./freeRTOS/tasks.c **** 				}
1322:./freeRTOS/tasks.c **** 			#endif
1323:./freeRTOS/tasks.c **** 
1324:./freeRTOS/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:./freeRTOS/tasks.c **** 			{
1326:./freeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:./freeRTOS/tasks.c **** 				Ready (including pending ready) state. */
1328:./freeRTOS/tasks.c **** 				eReturn = eReady;
1329:./freeRTOS/tasks.c **** 			}
1330:./freeRTOS/tasks.c **** 		}
1331:./freeRTOS/tasks.c **** 
1332:./freeRTOS/tasks.c **** 		return eReturn;
1333:./freeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:./freeRTOS/tasks.c **** 
1335:./freeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1337:./freeRTOS/tasks.c **** 
1338:./freeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:./freeRTOS/tasks.c **** 
1340:./freeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:./freeRTOS/tasks.c **** 	{
ARM GAS  /tmp/cckkLGmm.s 			page 25


1342:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
1343:./freeRTOS/tasks.c **** 	UBaseType_t uxReturn;
1344:./freeRTOS/tasks.c **** 
1345:./freeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1346:./freeRTOS/tasks.c **** 		{
1347:./freeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:./freeRTOS/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:./freeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:./freeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:./freeRTOS/tasks.c **** 		}
1352:./freeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1353:./freeRTOS/tasks.c **** 
1354:./freeRTOS/tasks.c **** 		return uxReturn;
1355:./freeRTOS/tasks.c **** 	}
1356:./freeRTOS/tasks.c **** 
1357:./freeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1359:./freeRTOS/tasks.c **** 
1360:./freeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:./freeRTOS/tasks.c **** 
1362:./freeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:./freeRTOS/tasks.c **** 	{
1364:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
1365:./freeRTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:./freeRTOS/tasks.c **** 
1367:./freeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:./freeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:./freeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:./freeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:./freeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:./freeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:./freeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:./freeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:./freeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:./freeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:./freeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:./freeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:./freeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:./freeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:./freeRTOS/tasks.c **** 		provided on the following link:
1382:./freeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:./freeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:./freeRTOS/tasks.c **** 
1385:./freeRTOS/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:./freeRTOS/tasks.c **** 		{
1387:./freeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:./freeRTOS/tasks.c **** 			task that is being queried. */
1389:./freeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:./freeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:./freeRTOS/tasks.c **** 		}
1392:./freeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:./freeRTOS/tasks.c **** 
1394:./freeRTOS/tasks.c **** 		return uxReturn;
1395:./freeRTOS/tasks.c **** 	}
1396:./freeRTOS/tasks.c **** 
1397:./freeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cckkLGmm.s 			page 26


1399:./freeRTOS/tasks.c **** 
1400:./freeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:./freeRTOS/tasks.c **** 
1402:./freeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:./freeRTOS/tasks.c **** 	{
1404:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
1405:./freeRTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:./freeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:./freeRTOS/tasks.c **** 
1408:./freeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:./freeRTOS/tasks.c **** 
1410:./freeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1411:./freeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:./freeRTOS/tasks.c **** 		{
1413:./freeRTOS/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:./freeRTOS/tasks.c **** 		}
1415:./freeRTOS/tasks.c **** 		else
1416:./freeRTOS/tasks.c **** 		{
1417:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:./freeRTOS/tasks.c **** 		}
1419:./freeRTOS/tasks.c **** 
1420:./freeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1421:./freeRTOS/tasks.c **** 		{
1422:./freeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:./freeRTOS/tasks.c **** 			task that is being changed. */
1424:./freeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:./freeRTOS/tasks.c **** 
1426:./freeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:./freeRTOS/tasks.c **** 
1428:./freeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:./freeRTOS/tasks.c **** 			{
1430:./freeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:./freeRTOS/tasks.c **** 			}
1432:./freeRTOS/tasks.c **** 			#else
1433:./freeRTOS/tasks.c **** 			{
1434:./freeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:./freeRTOS/tasks.c **** 			}
1436:./freeRTOS/tasks.c **** 			#endif
1437:./freeRTOS/tasks.c **** 
1438:./freeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:./freeRTOS/tasks.c **** 			{
1440:./freeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1441:./freeRTOS/tasks.c **** 				priority than the calling task. */
1442:./freeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:./freeRTOS/tasks.c **** 				{
1444:./freeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:./freeRTOS/tasks.c **** 					{
1446:./freeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1447:./freeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1448:./freeRTOS/tasks.c **** 						raised above that of the running task? */
1449:./freeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:./freeRTOS/tasks.c **** 						{
1451:./freeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
1452:./freeRTOS/tasks.c **** 						}
1453:./freeRTOS/tasks.c **** 						else
1454:./freeRTOS/tasks.c **** 						{
1455:./freeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cckkLGmm.s 			page 27


1456:./freeRTOS/tasks.c **** 						}
1457:./freeRTOS/tasks.c **** 					}
1458:./freeRTOS/tasks.c **** 					else
1459:./freeRTOS/tasks.c **** 					{
1460:./freeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1461:./freeRTOS/tasks.c **** 						but the running task must already be the highest
1462:./freeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1463:./freeRTOS/tasks.c **** 					}
1464:./freeRTOS/tasks.c **** 				}
1465:./freeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:./freeRTOS/tasks.c **** 				{
1467:./freeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
1468:./freeRTOS/tasks.c **** 					there may now be another task of higher priority that
1469:./freeRTOS/tasks.c **** 					is ready to execute. */
1470:./freeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
1471:./freeRTOS/tasks.c **** 				}
1472:./freeRTOS/tasks.c **** 				else
1473:./freeRTOS/tasks.c **** 				{
1474:./freeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1475:./freeRTOS/tasks.c **** 					require a yield as the running task must be above the
1476:./freeRTOS/tasks.c **** 					new priority of the task being modified. */
1477:./freeRTOS/tasks.c **** 				}
1478:./freeRTOS/tasks.c **** 
1479:./freeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:./freeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1481:./freeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:./freeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:./freeRTOS/tasks.c **** 
1484:./freeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:./freeRTOS/tasks.c **** 				{
1486:./freeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1487:./freeRTOS/tasks.c **** 					currently using an inherited priority. */
1488:./freeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:./freeRTOS/tasks.c **** 					{
1490:./freeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:./freeRTOS/tasks.c **** 					}
1492:./freeRTOS/tasks.c **** 					else
1493:./freeRTOS/tasks.c **** 					{
1494:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:./freeRTOS/tasks.c **** 					}
1496:./freeRTOS/tasks.c **** 
1497:./freeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
1498:./freeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:./freeRTOS/tasks.c **** 				}
1500:./freeRTOS/tasks.c **** 				#else
1501:./freeRTOS/tasks.c **** 				{
1502:./freeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:./freeRTOS/tasks.c **** 				}
1504:./freeRTOS/tasks.c **** 				#endif
1505:./freeRTOS/tasks.c **** 
1506:./freeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:./freeRTOS/tasks.c **** 				being used for anything else. */
1508:./freeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:./freeRTOS/tasks.c **** 				{
1510:./freeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:./freeRTOS/tasks.c **** 				}
1512:./freeRTOS/tasks.c **** 				else
ARM GAS  /tmp/cckkLGmm.s 			page 28


1513:./freeRTOS/tasks.c **** 				{
1514:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:./freeRTOS/tasks.c **** 				}
1516:./freeRTOS/tasks.c **** 
1517:./freeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:./freeRTOS/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:./freeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:./freeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1521:./freeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:./freeRTOS/tasks.c **** 				{
1523:./freeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:./freeRTOS/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:./freeRTOS/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:./freeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:./freeRTOS/tasks.c **** 					{
1528:./freeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1529:./freeRTOS/tasks.c **** 						there is no need to check again and the port level
1530:./freeRTOS/tasks.c **** 						reset macro can be called directly. */
1531:./freeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:./freeRTOS/tasks.c **** 					}
1533:./freeRTOS/tasks.c **** 					else
1534:./freeRTOS/tasks.c **** 					{
1535:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:./freeRTOS/tasks.c **** 					}
1537:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:./freeRTOS/tasks.c **** 				}
1539:./freeRTOS/tasks.c **** 				else
1540:./freeRTOS/tasks.c **** 				{
1541:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:./freeRTOS/tasks.c **** 				}
1543:./freeRTOS/tasks.c **** 
1544:./freeRTOS/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:./freeRTOS/tasks.c **** 				{
1546:./freeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:./freeRTOS/tasks.c **** 				}
1548:./freeRTOS/tasks.c **** 				else
1549:./freeRTOS/tasks.c **** 				{
1550:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:./freeRTOS/tasks.c **** 				}
1552:./freeRTOS/tasks.c **** 
1553:./freeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:./freeRTOS/tasks.c **** 				optimised task selection is not being used. */
1555:./freeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:./freeRTOS/tasks.c **** 			}
1557:./freeRTOS/tasks.c **** 		}
1558:./freeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1559:./freeRTOS/tasks.c **** 	}
1560:./freeRTOS/tasks.c **** 
1561:./freeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1563:./freeRTOS/tasks.c **** 
1564:./freeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:./freeRTOS/tasks.c **** 
1566:./freeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:./freeRTOS/tasks.c **** 	{
1568:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
1569:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 29


1570:./freeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1571:./freeRTOS/tasks.c **** 		{
1572:./freeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:./freeRTOS/tasks.c **** 			being suspended. */
1574:./freeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:./freeRTOS/tasks.c **** 
1576:./freeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:./freeRTOS/tasks.c **** 
1578:./freeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:./freeRTOS/tasks.c **** 			suspended list. */
1580:./freeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:./freeRTOS/tasks.c **** 			{
1582:./freeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:./freeRTOS/tasks.c **** 			}
1584:./freeRTOS/tasks.c **** 			else
1585:./freeRTOS/tasks.c **** 			{
1586:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:./freeRTOS/tasks.c **** 			}
1588:./freeRTOS/tasks.c **** 
1589:./freeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1590:./freeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:./freeRTOS/tasks.c **** 			{
1592:./freeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:./freeRTOS/tasks.c **** 			}
1594:./freeRTOS/tasks.c **** 			else
1595:./freeRTOS/tasks.c **** 			{
1596:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:./freeRTOS/tasks.c **** 			}
1598:./freeRTOS/tasks.c **** 
1599:./freeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:./freeRTOS/tasks.c **** 		}
1601:./freeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1602:./freeRTOS/tasks.c **** 
1603:./freeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:./freeRTOS/tasks.c **** 		{
1605:./freeRTOS/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:./freeRTOS/tasks.c **** 			task that is now in the Suspended state. */
1607:./freeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1608:./freeRTOS/tasks.c **** 			{
1609:./freeRTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:./freeRTOS/tasks.c **** 			}
1611:./freeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1612:./freeRTOS/tasks.c **** 		}
1613:./freeRTOS/tasks.c **** 		else
1614:./freeRTOS/tasks.c **** 		{
1615:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:./freeRTOS/tasks.c **** 		}
1617:./freeRTOS/tasks.c **** 
1618:./freeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:./freeRTOS/tasks.c **** 		{
1620:./freeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:./freeRTOS/tasks.c **** 			{
1622:./freeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1623:./freeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:./freeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1625:./freeRTOS/tasks.c **** 			}
1626:./freeRTOS/tasks.c **** 			else
ARM GAS  /tmp/cckkLGmm.s 			page 30


1627:./freeRTOS/tasks.c **** 			{
1628:./freeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:./freeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:./freeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1631:./freeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:./freeRTOS/tasks.c **** 				{
1633:./freeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:./freeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:./freeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1636:./freeRTOS/tasks.c **** 					is. */
1637:./freeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
1638:./freeRTOS/tasks.c **** 				}
1639:./freeRTOS/tasks.c **** 				else
1640:./freeRTOS/tasks.c **** 				{
1641:./freeRTOS/tasks.c **** 					vTaskSwitchContext();
1642:./freeRTOS/tasks.c **** 				}
1643:./freeRTOS/tasks.c **** 			}
1644:./freeRTOS/tasks.c **** 		}
1645:./freeRTOS/tasks.c **** 		else
1646:./freeRTOS/tasks.c **** 		{
1647:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:./freeRTOS/tasks.c **** 		}
1649:./freeRTOS/tasks.c **** 	}
1650:./freeRTOS/tasks.c **** 
1651:./freeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1653:./freeRTOS/tasks.c **** 
1654:./freeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:./freeRTOS/tasks.c **** 
1656:./freeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:./freeRTOS/tasks.c **** 	{
  29              		.loc 1 1657 2 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
1658:./freeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
  34              		.loc 1 1658 2 view .LVU1
1659:./freeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  35              		.loc 1 1659 2 view .LVU2
1660:./freeRTOS/tasks.c **** 
1661:./freeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:./freeRTOS/tasks.c **** 		section. */
1663:./freeRTOS/tasks.c **** 
1664:./freeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:./freeRTOS/tasks.c **** 		configASSERT( xTask );
  36              		.loc 1 1665 24 view .LVU3
1666:./freeRTOS/tasks.c **** 
1667:./freeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:./freeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  37              		.loc 1 1668 3 view .LVU4
  38              		.loc 1 1668 7 is_stmt 0 view .LVU5
  39 0000 4269     		ldr	r2, [r0, #20]
  40              		.loc 1 1668 82 view .LVU6
  41 0002 084B     		ldr	r3, .L7
  42 0004 9A42     		cmp	r2, r3
  43 0006 01D0     		beq	.L6
ARM GAS  /tmp/cckkLGmm.s 			page 31


1658:./freeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  44              		.loc 1 1658 13 view .LVU7
  45 0008 0020     		movs	r0, #0
  46              	.LVL1:
1658:./freeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  47              		.loc 1 1658 13 view .LVU8
  48 000a 7047     		bx	lr
  49              	.LVL2:
  50              	.L6:
1669:./freeRTOS/tasks.c **** 		{
1670:./freeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:./freeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  51              		.loc 1 1671 4 is_stmt 1 view .LVU9
  52              		.loc 1 1671 8 is_stmt 0 view .LVU10
  53 000c 836A     		ldr	r3, [r0, #40]
  54              		.loc 1 1671 6 view .LVU11
  55 000e 064A     		ldr	r2, .L7+4
  56 0010 9342     		cmp	r3, r2
  57 0012 02D0     		beq	.L4
1672:./freeRTOS/tasks.c **** 			{
1673:./freeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:./freeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:./freeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  58              		.loc 1 1675 5 is_stmt 1 view .LVU12
  59              		.loc 1 1675 69 is_stmt 0 view .LVU13
  60 0014 1BB1     		cbz	r3, .L5
1658:./freeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  61              		.loc 1 1658 13 view .LVU14
  62 0016 0020     		movs	r0, #0
  63              	.LVL3:
1658:./freeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  64              		.loc 1 1658 13 view .LVU15
  65 0018 7047     		bx	lr
  66              	.LVL4:
  67              	.L4:
1658:./freeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  68              		.loc 1 1658 13 view .LVU16
  69 001a 0020     		movs	r0, #0
  70              	.LVL5:
1658:./freeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  71              		.loc 1 1658 13 view .LVU17
  72 001c 7047     		bx	lr
  73              	.LVL6:
  74              	.L5:
1676:./freeRTOS/tasks.c **** 				{
1677:./freeRTOS/tasks.c **** 					xReturn = pdTRUE;
  75              		.loc 1 1677 14 view .LVU18
  76 001e 0120     		movs	r0, #1
  77              	.LVL7:
1678:./freeRTOS/tasks.c **** 				}
1679:./freeRTOS/tasks.c **** 				else
1680:./freeRTOS/tasks.c **** 				{
1681:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:./freeRTOS/tasks.c **** 				}
1683:./freeRTOS/tasks.c **** 			}
1684:./freeRTOS/tasks.c **** 			else
1685:./freeRTOS/tasks.c **** 			{
ARM GAS  /tmp/cckkLGmm.s 			page 32


1686:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:./freeRTOS/tasks.c **** 			}
1688:./freeRTOS/tasks.c **** 		}
1689:./freeRTOS/tasks.c **** 		else
1690:./freeRTOS/tasks.c **** 		{
1691:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
  78              		.loc 1 1691 28 is_stmt 1 view .LVU19
1692:./freeRTOS/tasks.c **** 		}
1693:./freeRTOS/tasks.c **** 
1694:./freeRTOS/tasks.c **** 		return xReturn;
  79              		.loc 1 1694 3 view .LVU20
1695:./freeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  80              		.loc 1 1695 2 is_stmt 0 view .LVU21
  81 0020 7047     		bx	lr
  82              	.L8:
  83 0022 00BF     		.align	2
  84              	.L7:
  85 0024 00000000 		.word	.LANCHOR0
  86 0028 00000000 		.word	.LANCHOR1
  87              		.cfi_endproc
  88              	.LFE15:
  90              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  91              		.align	1
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu fpv4-sp-d16
  97              	prvTaskCheckFreeStackSpace:
  98              	.LVL8:
  99              	.LFB38:
1696:./freeRTOS/tasks.c **** 
1697:./freeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1699:./freeRTOS/tasks.c **** 
1700:./freeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:./freeRTOS/tasks.c **** 
1702:./freeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:./freeRTOS/tasks.c **** 	{
1704:./freeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:./freeRTOS/tasks.c **** 
1706:./freeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:./freeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1708:./freeRTOS/tasks.c **** 
1709:./freeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:./freeRTOS/tasks.c **** 		currently executing task. */
1711:./freeRTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:./freeRTOS/tasks.c **** 		{
1713:./freeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1714:./freeRTOS/tasks.c **** 			{
1715:./freeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:./freeRTOS/tasks.c **** 				{
1717:./freeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:./freeRTOS/tasks.c **** 
1719:./freeRTOS/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:./freeRTOS/tasks.c **** 					lists even if the scheduler is suspended. */
1721:./freeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/cckkLGmm.s 			page 33


1723:./freeRTOS/tasks.c **** 
1724:./freeRTOS/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:./freeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:./freeRTOS/tasks.c **** 					{
1727:./freeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:./freeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1729:./freeRTOS/tasks.c **** 						next yield. */
1730:./freeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:./freeRTOS/tasks.c **** 					}
1732:./freeRTOS/tasks.c **** 					else
1733:./freeRTOS/tasks.c **** 					{
1734:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:./freeRTOS/tasks.c **** 					}
1736:./freeRTOS/tasks.c **** 				}
1737:./freeRTOS/tasks.c **** 				else
1738:./freeRTOS/tasks.c **** 				{
1739:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:./freeRTOS/tasks.c **** 				}
1741:./freeRTOS/tasks.c **** 			}
1742:./freeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1743:./freeRTOS/tasks.c **** 		}
1744:./freeRTOS/tasks.c **** 		else
1745:./freeRTOS/tasks.c **** 		{
1746:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:./freeRTOS/tasks.c **** 		}
1748:./freeRTOS/tasks.c **** 	}
1749:./freeRTOS/tasks.c **** 
1750:./freeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:./freeRTOS/tasks.c **** 
1752:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1753:./freeRTOS/tasks.c **** 
1754:./freeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:./freeRTOS/tasks.c **** 
1756:./freeRTOS/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:./freeRTOS/tasks.c **** 	{
1758:./freeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:./freeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:./freeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:./freeRTOS/tasks.c **** 
1762:./freeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1763:./freeRTOS/tasks.c **** 
1764:./freeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:./freeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:./freeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:./freeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:./freeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:./freeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:./freeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:./freeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:./freeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:./freeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:./freeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:./freeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:./freeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:./freeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:./freeRTOS/tasks.c **** 		provided on the following link:
1779:./freeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
ARM GAS  /tmp/cckkLGmm.s 			page 34


1780:./freeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:./freeRTOS/tasks.c **** 
1782:./freeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:./freeRTOS/tasks.c **** 		{
1784:./freeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:./freeRTOS/tasks.c **** 			{
1786:./freeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:./freeRTOS/tasks.c **** 
1788:./freeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:./freeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:./freeRTOS/tasks.c **** 				{
1791:./freeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:./freeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1793:./freeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:./freeRTOS/tasks.c **** 					{
1795:./freeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
1796:./freeRTOS/tasks.c **** 					}
1797:./freeRTOS/tasks.c **** 					else
1798:./freeRTOS/tasks.c **** 					{
1799:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:./freeRTOS/tasks.c **** 					}
1801:./freeRTOS/tasks.c **** 
1802:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:./freeRTOS/tasks.c **** 				}
1805:./freeRTOS/tasks.c **** 				else
1806:./freeRTOS/tasks.c **** 				{
1807:./freeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:./freeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:./freeRTOS/tasks.c **** 					unsuspended. */
1810:./freeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:./freeRTOS/tasks.c **** 				}
1812:./freeRTOS/tasks.c **** 			}
1813:./freeRTOS/tasks.c **** 			else
1814:./freeRTOS/tasks.c **** 			{
1815:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:./freeRTOS/tasks.c **** 			}
1817:./freeRTOS/tasks.c **** 		}
1818:./freeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:./freeRTOS/tasks.c **** 
1820:./freeRTOS/tasks.c **** 		return xYieldRequired;
1821:./freeRTOS/tasks.c **** 	}
1822:./freeRTOS/tasks.c **** 
1823:./freeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1825:./freeRTOS/tasks.c **** 
1826:./freeRTOS/tasks.c **** void vTaskStartScheduler( void )
1827:./freeRTOS/tasks.c **** {
1828:./freeRTOS/tasks.c **** BaseType_t xReturn;
1829:./freeRTOS/tasks.c **** 
1830:./freeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:./freeRTOS/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:./freeRTOS/tasks.c **** 	{
1833:./freeRTOS/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:./freeRTOS/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:./freeRTOS/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 35


1837:./freeRTOS/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:./freeRTOS/tasks.c **** 		address of the RAM then create the idle task. */
1839:./freeRTOS/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:./freeRTOS/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:./freeRTOS/tasks.c **** 												"IDLE",
1842:./freeRTOS/tasks.c **** 												ulIdleTaskStackSize,
1843:./freeRTOS/tasks.c **** 												( void * ) NULL,
1844:./freeRTOS/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:./freeRTOS/tasks.c **** 												pxIdleTaskStackBuffer,
1846:./freeRTOS/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:./freeRTOS/tasks.c **** 
1848:./freeRTOS/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:./freeRTOS/tasks.c **** 		{
1850:./freeRTOS/tasks.c **** 			xReturn = pdPASS;
1851:./freeRTOS/tasks.c **** 		}
1852:./freeRTOS/tasks.c **** 		else
1853:./freeRTOS/tasks.c **** 		{
1854:./freeRTOS/tasks.c **** 			xReturn = pdFAIL;
1855:./freeRTOS/tasks.c **** 		}
1856:./freeRTOS/tasks.c **** 	}
1857:./freeRTOS/tasks.c **** 	#else
1858:./freeRTOS/tasks.c **** 	{
1859:./freeRTOS/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:./freeRTOS/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:./freeRTOS/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:./freeRTOS/tasks.c **** 								( void * ) NULL,
1863:./freeRTOS/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:./freeRTOS/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:./freeRTOS/tasks.c **** 	}
1866:./freeRTOS/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:./freeRTOS/tasks.c **** 
1868:./freeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:./freeRTOS/tasks.c **** 	{
1870:./freeRTOS/tasks.c **** 		if( xReturn == pdPASS )
1871:./freeRTOS/tasks.c **** 		{
1872:./freeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:./freeRTOS/tasks.c **** 		}
1874:./freeRTOS/tasks.c **** 		else
1875:./freeRTOS/tasks.c **** 		{
1876:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:./freeRTOS/tasks.c **** 		}
1878:./freeRTOS/tasks.c **** 	}
1879:./freeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:./freeRTOS/tasks.c **** 
1881:./freeRTOS/tasks.c **** 	if( xReturn == pdPASS )
1882:./freeRTOS/tasks.c **** 	{
1883:./freeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:./freeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:./freeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:./freeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:./freeRTOS/tasks.c **** 		starts to run. */
1888:./freeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:./freeRTOS/tasks.c **** 
1890:./freeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:./freeRTOS/tasks.c **** 		{
1892:./freeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:./freeRTOS/tasks.c **** 			structure specific to the task that will run first. */
ARM GAS  /tmp/cckkLGmm.s 			page 36


1894:./freeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:./freeRTOS/tasks.c **** 		}
1896:./freeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:./freeRTOS/tasks.c **** 
1898:./freeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:./freeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:./freeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:./freeRTOS/tasks.c **** 
1902:./freeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:./freeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:./freeRTOS/tasks.c **** 		the run time counter time base. */
1905:./freeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:./freeRTOS/tasks.c **** 
1907:./freeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:./freeRTOS/tasks.c **** 		portable interface. */
1909:./freeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:./freeRTOS/tasks.c **** 		{
1911:./freeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:./freeRTOS/tasks.c **** 			function will not return. */
1913:./freeRTOS/tasks.c **** 		}
1914:./freeRTOS/tasks.c **** 		else
1915:./freeRTOS/tasks.c **** 		{
1916:./freeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:./freeRTOS/tasks.c **** 		}
1918:./freeRTOS/tasks.c **** 	}
1919:./freeRTOS/tasks.c **** 	else
1920:./freeRTOS/tasks.c **** 	{
1921:./freeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:./freeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:./freeRTOS/tasks.c **** 		or the timer task. */
1924:./freeRTOS/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:./freeRTOS/tasks.c **** 	}
1926:./freeRTOS/tasks.c **** 
1927:./freeRTOS/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:./freeRTOS/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:./freeRTOS/tasks.c **** 	( void ) xIdleTaskHandle;
1930:./freeRTOS/tasks.c **** }
1931:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1932:./freeRTOS/tasks.c **** 
1933:./freeRTOS/tasks.c **** void vTaskEndScheduler( void )
1934:./freeRTOS/tasks.c **** {
1935:./freeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:./freeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:./freeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:./freeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:./freeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:./freeRTOS/tasks.c **** 	vPortEndScheduler();
1941:./freeRTOS/tasks.c **** }
1942:./freeRTOS/tasks.c **** /*----------------------------------------------------------*/
1943:./freeRTOS/tasks.c **** 
1944:./freeRTOS/tasks.c **** void vTaskSuspendAll( void )
1945:./freeRTOS/tasks.c **** {
1946:./freeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:./freeRTOS/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:./freeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:./freeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
1950:./freeRTOS/tasks.c **** 	++uxSchedulerSuspended;
ARM GAS  /tmp/cckkLGmm.s 			page 37


1951:./freeRTOS/tasks.c **** }
1952:./freeRTOS/tasks.c **** /*----------------------------------------------------------*/
1953:./freeRTOS/tasks.c **** 
1954:./freeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:./freeRTOS/tasks.c **** 
1956:./freeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:./freeRTOS/tasks.c **** 	{
1958:./freeRTOS/tasks.c **** 	TickType_t xReturn;
1959:./freeRTOS/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:./freeRTOS/tasks.c **** 
1961:./freeRTOS/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:./freeRTOS/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:./freeRTOS/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:./freeRTOS/tasks.c **** 		running. */
1965:./freeRTOS/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:./freeRTOS/tasks.c **** 		{
1967:./freeRTOS/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:./freeRTOS/tasks.c **** 			{
1969:./freeRTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:./freeRTOS/tasks.c **** 			}
1971:./freeRTOS/tasks.c **** 		}
1972:./freeRTOS/tasks.c **** 		#else
1973:./freeRTOS/tasks.c **** 		{
1974:./freeRTOS/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:./freeRTOS/tasks.c **** 
1976:./freeRTOS/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:./freeRTOS/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:./freeRTOS/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:./freeRTOS/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:./freeRTOS/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:./freeRTOS/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:./freeRTOS/tasks.c **** 			{
1983:./freeRTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:./freeRTOS/tasks.c **** 			}
1985:./freeRTOS/tasks.c **** 		}
1986:./freeRTOS/tasks.c **** 		#endif
1987:./freeRTOS/tasks.c **** 
1988:./freeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:./freeRTOS/tasks.c **** 		{
1990:./freeRTOS/tasks.c **** 			xReturn = 0;
1991:./freeRTOS/tasks.c **** 		}
1992:./freeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:./freeRTOS/tasks.c **** 		{
1994:./freeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:./freeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:./freeRTOS/tasks.c **** 			processed. */
1997:./freeRTOS/tasks.c **** 			xReturn = 0;
1998:./freeRTOS/tasks.c **** 		}
1999:./freeRTOS/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:./freeRTOS/tasks.c **** 		{
2001:./freeRTOS/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:./freeRTOS/tasks.c **** 			idle priority.  This path can only be reached if
2003:./freeRTOS/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:./freeRTOS/tasks.c **** 			xReturn = 0;
2005:./freeRTOS/tasks.c **** 		}
2006:./freeRTOS/tasks.c **** 		else
2007:./freeRTOS/tasks.c **** 		{
ARM GAS  /tmp/cckkLGmm.s 			page 38


2008:./freeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:./freeRTOS/tasks.c **** 		}
2010:./freeRTOS/tasks.c **** 
2011:./freeRTOS/tasks.c **** 		return xReturn;
2012:./freeRTOS/tasks.c **** 	}
2013:./freeRTOS/tasks.c **** 
2014:./freeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:./freeRTOS/tasks.c **** /*----------------------------------------------------------*/
2016:./freeRTOS/tasks.c **** 
2017:./freeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:./freeRTOS/tasks.c **** {
2019:./freeRTOS/tasks.c **** TCB_t *pxTCB = NULL;
2020:./freeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:./freeRTOS/tasks.c **** 
2022:./freeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:./freeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:./freeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:./freeRTOS/tasks.c **** 
2026:./freeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:./freeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:./freeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:./freeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:./freeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:./freeRTOS/tasks.c **** 	taskENTER_CRITICAL();
2032:./freeRTOS/tasks.c **** 	{
2033:./freeRTOS/tasks.c **** 		--uxSchedulerSuspended;
2034:./freeRTOS/tasks.c **** 
2035:./freeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:./freeRTOS/tasks.c **** 		{
2037:./freeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:./freeRTOS/tasks.c **** 			{
2039:./freeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:./freeRTOS/tasks.c **** 				appropriate ready list. */
2041:./freeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:./freeRTOS/tasks.c **** 				{
2043:./freeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:./freeRTOS/tasks.c **** 
2048:./freeRTOS/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:./freeRTOS/tasks.c **** 					task then a yield must be performed. */
2050:./freeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:./freeRTOS/tasks.c **** 					{
2052:./freeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
2053:./freeRTOS/tasks.c **** 					}
2054:./freeRTOS/tasks.c **** 					else
2055:./freeRTOS/tasks.c **** 					{
2056:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:./freeRTOS/tasks.c **** 					}
2058:./freeRTOS/tasks.c **** 				}
2059:./freeRTOS/tasks.c **** 
2060:./freeRTOS/tasks.c **** 				if( pxTCB != NULL )
2061:./freeRTOS/tasks.c **** 				{
2062:./freeRTOS/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:./freeRTOS/tasks.c **** 					which may have prevented the next unblock time from being
2064:./freeRTOS/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
ARM GAS  /tmp/cckkLGmm.s 			page 39


2065:./freeRTOS/tasks.c **** 					important for low power tickless implementations, where
2066:./freeRTOS/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:./freeRTOS/tasks.c **** 					state. */
2068:./freeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:./freeRTOS/tasks.c **** 				}
2070:./freeRTOS/tasks.c **** 
2071:./freeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:./freeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:./freeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:./freeRTOS/tasks.c **** 				time. */
2075:./freeRTOS/tasks.c **** 				{
2076:./freeRTOS/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:./freeRTOS/tasks.c **** 
2078:./freeRTOS/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:./freeRTOS/tasks.c **** 					{
2080:./freeRTOS/tasks.c **** 						do
2081:./freeRTOS/tasks.c **** 						{
2082:./freeRTOS/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:./freeRTOS/tasks.c **** 							{
2084:./freeRTOS/tasks.c **** 								xYieldPending = pdTRUE;
2085:./freeRTOS/tasks.c **** 							}
2086:./freeRTOS/tasks.c **** 							else
2087:./freeRTOS/tasks.c **** 							{
2088:./freeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:./freeRTOS/tasks.c **** 							}
2090:./freeRTOS/tasks.c **** 							--uxPendedCounts;
2091:./freeRTOS/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:./freeRTOS/tasks.c **** 
2093:./freeRTOS/tasks.c **** 						uxPendedTicks = 0;
2094:./freeRTOS/tasks.c **** 					}
2095:./freeRTOS/tasks.c **** 					else
2096:./freeRTOS/tasks.c **** 					{
2097:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:./freeRTOS/tasks.c **** 					}
2099:./freeRTOS/tasks.c **** 				}
2100:./freeRTOS/tasks.c **** 
2101:./freeRTOS/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:./freeRTOS/tasks.c **** 				{
2103:./freeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:./freeRTOS/tasks.c **** 					{
2105:./freeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:./freeRTOS/tasks.c **** 					}
2107:./freeRTOS/tasks.c **** 					#endif
2108:./freeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:./freeRTOS/tasks.c **** 				}
2110:./freeRTOS/tasks.c **** 				else
2111:./freeRTOS/tasks.c **** 				{
2112:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:./freeRTOS/tasks.c **** 				}
2114:./freeRTOS/tasks.c **** 			}
2115:./freeRTOS/tasks.c **** 		}
2116:./freeRTOS/tasks.c **** 		else
2117:./freeRTOS/tasks.c **** 		{
2118:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:./freeRTOS/tasks.c **** 		}
2120:./freeRTOS/tasks.c **** 	}
2121:./freeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
ARM GAS  /tmp/cckkLGmm.s 			page 40


2122:./freeRTOS/tasks.c **** 
2123:./freeRTOS/tasks.c **** 	return xAlreadyYielded;
2124:./freeRTOS/tasks.c **** }
2125:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2126:./freeRTOS/tasks.c **** 
2127:./freeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:./freeRTOS/tasks.c **** {
2129:./freeRTOS/tasks.c **** TickType_t xTicks;
2130:./freeRTOS/tasks.c **** 
2131:./freeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:./freeRTOS/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:./freeRTOS/tasks.c **** 	{
2134:./freeRTOS/tasks.c **** 		xTicks = xTickCount;
2135:./freeRTOS/tasks.c **** 	}
2136:./freeRTOS/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:./freeRTOS/tasks.c **** 
2138:./freeRTOS/tasks.c **** 	return xTicks;
2139:./freeRTOS/tasks.c **** }
2140:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2141:./freeRTOS/tasks.c **** 
2142:./freeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:./freeRTOS/tasks.c **** {
2144:./freeRTOS/tasks.c **** TickType_t xReturn;
2145:./freeRTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:./freeRTOS/tasks.c **** 
2147:./freeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:./freeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:./freeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:./freeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:./freeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:./freeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:./freeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:./freeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:./freeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:./freeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:./freeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:./freeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:./freeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:./freeRTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:./freeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:./freeRTOS/tasks.c **** 
2163:./freeRTOS/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:./freeRTOS/tasks.c **** 	{
2165:./freeRTOS/tasks.c **** 		xReturn = xTickCount;
2166:./freeRTOS/tasks.c **** 	}
2167:./freeRTOS/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:./freeRTOS/tasks.c **** 
2169:./freeRTOS/tasks.c **** 	return xReturn;
2170:./freeRTOS/tasks.c **** }
2171:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2172:./freeRTOS/tasks.c **** 
2173:./freeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:./freeRTOS/tasks.c **** {
2175:./freeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:./freeRTOS/tasks.c **** 	BaseType_t. */
2177:./freeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:./freeRTOS/tasks.c **** }
ARM GAS  /tmp/cckkLGmm.s 			page 41


2179:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2180:./freeRTOS/tasks.c **** 
2181:./freeRTOS/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:./freeRTOS/tasks.c **** {
2183:./freeRTOS/tasks.c **** TCB_t *pxTCB;
2184:./freeRTOS/tasks.c **** 
2185:./freeRTOS/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:./freeRTOS/tasks.c **** 	queried. */
2187:./freeRTOS/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:./freeRTOS/tasks.c **** 	configASSERT( pxTCB );
2189:./freeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:./freeRTOS/tasks.c **** }
2191:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2192:./freeRTOS/tasks.c **** 
2193:./freeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:./freeRTOS/tasks.c **** 
2195:./freeRTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:./freeRTOS/tasks.c **** 	{
2197:./freeRTOS/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:./freeRTOS/tasks.c **** 	UBaseType_t x;
2199:./freeRTOS/tasks.c **** 	char cNextChar;
2200:./freeRTOS/tasks.c **** 
2201:./freeRTOS/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:./freeRTOS/tasks.c **** 
2203:./freeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:./freeRTOS/tasks.c **** 		{
2205:./freeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:./freeRTOS/tasks.c **** 
2207:./freeRTOS/tasks.c **** 			do
2208:./freeRTOS/tasks.c **** 			{
2209:./freeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:./freeRTOS/tasks.c **** 
2211:./freeRTOS/tasks.c **** 				/* Check each character in the name looking for a match or
2212:./freeRTOS/tasks.c **** 				mismatch. */
2213:./freeRTOS/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:./freeRTOS/tasks.c **** 				{
2215:./freeRTOS/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:./freeRTOS/tasks.c **** 
2217:./freeRTOS/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:./freeRTOS/tasks.c **** 					{
2219:./freeRTOS/tasks.c **** 						/* Characters didn't match. */
2220:./freeRTOS/tasks.c **** 						break;
2221:./freeRTOS/tasks.c **** 					}
2222:./freeRTOS/tasks.c **** 					else if( cNextChar == 0x00 )
2223:./freeRTOS/tasks.c **** 					{
2224:./freeRTOS/tasks.c **** 						/* Both strings terminated, a match must have been
2225:./freeRTOS/tasks.c **** 						found. */
2226:./freeRTOS/tasks.c **** 						pxReturn = pxNextTCB;
2227:./freeRTOS/tasks.c **** 						break;
2228:./freeRTOS/tasks.c **** 					}
2229:./freeRTOS/tasks.c **** 					else
2230:./freeRTOS/tasks.c **** 					{
2231:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:./freeRTOS/tasks.c **** 					}
2233:./freeRTOS/tasks.c **** 				}
2234:./freeRTOS/tasks.c **** 
2235:./freeRTOS/tasks.c **** 				if( pxReturn != NULL )
ARM GAS  /tmp/cckkLGmm.s 			page 42


2236:./freeRTOS/tasks.c **** 				{
2237:./freeRTOS/tasks.c **** 					/* The handle has been found. */
2238:./freeRTOS/tasks.c **** 					break;
2239:./freeRTOS/tasks.c **** 				}
2240:./freeRTOS/tasks.c **** 
2241:./freeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:./freeRTOS/tasks.c **** 		}
2243:./freeRTOS/tasks.c **** 		else
2244:./freeRTOS/tasks.c **** 		{
2245:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:./freeRTOS/tasks.c **** 		}
2247:./freeRTOS/tasks.c **** 
2248:./freeRTOS/tasks.c **** 		return pxReturn;
2249:./freeRTOS/tasks.c **** 	}
2250:./freeRTOS/tasks.c **** 
2251:./freeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2253:./freeRTOS/tasks.c **** 
2254:./freeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:./freeRTOS/tasks.c **** 
2256:./freeRTOS/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:./freeRTOS/tasks.c **** 	{
2258:./freeRTOS/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:./freeRTOS/tasks.c **** 	TCB_t* pxTCB;
2260:./freeRTOS/tasks.c **** 
2261:./freeRTOS/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:./freeRTOS/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:./freeRTOS/tasks.c **** 
2264:./freeRTOS/tasks.c **** 		vTaskSuspendAll();
2265:./freeRTOS/tasks.c **** 		{
2266:./freeRTOS/tasks.c **** 			/* Search the ready lists. */
2267:./freeRTOS/tasks.c **** 			do
2268:./freeRTOS/tasks.c **** 			{
2269:./freeRTOS/tasks.c **** 				uxQueue--;
2270:./freeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:./freeRTOS/tasks.c **** 
2272:./freeRTOS/tasks.c **** 				if( pxTCB != NULL )
2273:./freeRTOS/tasks.c **** 				{
2274:./freeRTOS/tasks.c **** 					/* Found the handle. */
2275:./freeRTOS/tasks.c **** 					break;
2276:./freeRTOS/tasks.c **** 				}
2277:./freeRTOS/tasks.c **** 
2278:./freeRTOS/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:./freeRTOS/tasks.c **** 
2280:./freeRTOS/tasks.c **** 			/* Search the delayed lists. */
2281:./freeRTOS/tasks.c **** 			if( pxTCB == NULL )
2282:./freeRTOS/tasks.c **** 			{
2283:./freeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:./freeRTOS/tasks.c **** 			}
2285:./freeRTOS/tasks.c **** 
2286:./freeRTOS/tasks.c **** 			if( pxTCB == NULL )
2287:./freeRTOS/tasks.c **** 			{
2288:./freeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:./freeRTOS/tasks.c **** 			}
2290:./freeRTOS/tasks.c **** 
2291:./freeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:./freeRTOS/tasks.c **** 			{
ARM GAS  /tmp/cckkLGmm.s 			page 43


2293:./freeRTOS/tasks.c **** 				if( pxTCB == NULL )
2294:./freeRTOS/tasks.c **** 				{
2295:./freeRTOS/tasks.c **** 					/* Search the suspended list. */
2296:./freeRTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:./freeRTOS/tasks.c **** 				}
2298:./freeRTOS/tasks.c **** 			}
2299:./freeRTOS/tasks.c **** 			#endif
2300:./freeRTOS/tasks.c **** 
2301:./freeRTOS/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:./freeRTOS/tasks.c **** 			{
2303:./freeRTOS/tasks.c **** 				if( pxTCB == NULL )
2304:./freeRTOS/tasks.c **** 				{
2305:./freeRTOS/tasks.c **** 					/* Search the deleted list. */
2306:./freeRTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:./freeRTOS/tasks.c **** 				}
2308:./freeRTOS/tasks.c **** 			}
2309:./freeRTOS/tasks.c **** 			#endif
2310:./freeRTOS/tasks.c **** 		}
2311:./freeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2312:./freeRTOS/tasks.c **** 
2313:./freeRTOS/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:./freeRTOS/tasks.c **** 	}
2315:./freeRTOS/tasks.c **** 
2316:./freeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2318:./freeRTOS/tasks.c **** 
2319:./freeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:./freeRTOS/tasks.c **** 
2321:./freeRTOS/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:./freeRTOS/tasks.c **** 	{
2323:./freeRTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:./freeRTOS/tasks.c **** 
2325:./freeRTOS/tasks.c **** 		vTaskSuspendAll();
2326:./freeRTOS/tasks.c **** 		{
2327:./freeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:./freeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:./freeRTOS/tasks.c **** 			{
2330:./freeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:./freeRTOS/tasks.c **** 				task in the Ready state. */
2332:./freeRTOS/tasks.c **** 				do
2333:./freeRTOS/tasks.c **** 				{
2334:./freeRTOS/tasks.c **** 					uxQueue--;
2335:./freeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:./freeRTOS/tasks.c **** 
2337:./freeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:./freeRTOS/tasks.c **** 
2339:./freeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:./freeRTOS/tasks.c **** 				task in the Blocked state. */
2341:./freeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:./freeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:./freeRTOS/tasks.c **** 
2344:./freeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:./freeRTOS/tasks.c **** 				{
2346:./freeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:./freeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:./freeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:./freeRTOS/tasks.c **** 				}
ARM GAS  /tmp/cckkLGmm.s 			page 44


2350:./freeRTOS/tasks.c **** 				#endif
2351:./freeRTOS/tasks.c **** 
2352:./freeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:./freeRTOS/tasks.c **** 				{
2354:./freeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:./freeRTOS/tasks.c **** 					each task in the Suspended state. */
2356:./freeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:./freeRTOS/tasks.c **** 				}
2358:./freeRTOS/tasks.c **** 				#endif
2359:./freeRTOS/tasks.c **** 
2360:./freeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:./freeRTOS/tasks.c **** 				{
2362:./freeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:./freeRTOS/tasks.c **** 					{
2364:./freeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:./freeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:./freeRTOS/tasks.c **** 						#else
2367:./freeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:./freeRTOS/tasks.c **** 						#endif
2369:./freeRTOS/tasks.c **** 					}
2370:./freeRTOS/tasks.c **** 				}
2371:./freeRTOS/tasks.c **** 				#else
2372:./freeRTOS/tasks.c **** 				{
2373:./freeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:./freeRTOS/tasks.c **** 					{
2375:./freeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
2376:./freeRTOS/tasks.c **** 					}
2377:./freeRTOS/tasks.c **** 				}
2378:./freeRTOS/tasks.c **** 				#endif
2379:./freeRTOS/tasks.c **** 			}
2380:./freeRTOS/tasks.c **** 			else
2381:./freeRTOS/tasks.c **** 			{
2382:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:./freeRTOS/tasks.c **** 			}
2384:./freeRTOS/tasks.c **** 		}
2385:./freeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2386:./freeRTOS/tasks.c **** 
2387:./freeRTOS/tasks.c **** 		return uxTask;
2388:./freeRTOS/tasks.c **** 	}
2389:./freeRTOS/tasks.c **** 
2390:./freeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:./freeRTOS/tasks.c **** /*----------------------------------------------------------*/
2392:./freeRTOS/tasks.c **** 
2393:./freeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:./freeRTOS/tasks.c **** 
2395:./freeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:./freeRTOS/tasks.c **** 	{
2397:./freeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:./freeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:./freeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:./freeRTOS/tasks.c **** 		return xIdleTaskHandle;
2401:./freeRTOS/tasks.c **** 	}
2402:./freeRTOS/tasks.c **** 
2403:./freeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:./freeRTOS/tasks.c **** /*----------------------------------------------------------*/
2405:./freeRTOS/tasks.c **** 
2406:./freeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
ARM GAS  /tmp/cckkLGmm.s 			page 45


2407:./freeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:./freeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:./freeRTOS/tasks.c **** 1. */
2410:./freeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:./freeRTOS/tasks.c **** 
2412:./freeRTOS/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:./freeRTOS/tasks.c **** 	{
2414:./freeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:./freeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:./freeRTOS/tasks.c **** 		each stepped tick. */
2417:./freeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:./freeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
2419:./freeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:./freeRTOS/tasks.c **** 	}
2421:./freeRTOS/tasks.c **** 
2422:./freeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:./freeRTOS/tasks.c **** /*----------------------------------------------------------*/
2424:./freeRTOS/tasks.c **** 
2425:./freeRTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:./freeRTOS/tasks.c **** 
2427:./freeRTOS/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:./freeRTOS/tasks.c **** 	{
2429:./freeRTOS/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:./freeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:./freeRTOS/tasks.c **** 
2432:./freeRTOS/tasks.c **** 		configASSERT( pxTCB );
2433:./freeRTOS/tasks.c **** 
2434:./freeRTOS/tasks.c **** 		vTaskSuspendAll();
2435:./freeRTOS/tasks.c **** 		{
2436:./freeRTOS/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:./freeRTOS/tasks.c **** 			it is actually in the Blocked state. */
2438:./freeRTOS/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:./freeRTOS/tasks.c **** 			{
2440:./freeRTOS/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:./freeRTOS/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:./freeRTOS/tasks.c **** 				scheduler is suspended. */
2443:./freeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:./freeRTOS/tasks.c **** 
2445:./freeRTOS/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:./freeRTOS/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:./freeRTOS/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:./freeRTOS/tasks.c **** 				is used. */
2449:./freeRTOS/tasks.c **** 				taskENTER_CRITICAL();
2450:./freeRTOS/tasks.c **** 				{
2451:./freeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:./freeRTOS/tasks.c **** 					{
2453:./freeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:./freeRTOS/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:./freeRTOS/tasks.c **** 					}
2456:./freeRTOS/tasks.c **** 					else
2457:./freeRTOS/tasks.c **** 					{
2458:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:./freeRTOS/tasks.c **** 					}
2460:./freeRTOS/tasks.c **** 				}
2461:./freeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
2462:./freeRTOS/tasks.c **** 
2463:./freeRTOS/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
ARM GAS  /tmp/cckkLGmm.s 			page 46


2464:./freeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:./freeRTOS/tasks.c **** 
2466:./freeRTOS/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:./freeRTOS/tasks.c **** 				switch if preemption is turned off. */
2468:./freeRTOS/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:./freeRTOS/tasks.c **** 				{
2470:./freeRTOS/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:./freeRTOS/tasks.c **** 					performed if the unblocked task has a priority that is
2472:./freeRTOS/tasks.c **** 					equal to or higher than the currently executing task. */
2473:./freeRTOS/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:./freeRTOS/tasks.c **** 					{
2475:./freeRTOS/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:./freeRTOS/tasks.c **** 						is unsuspended. */
2477:./freeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
2478:./freeRTOS/tasks.c **** 					}
2479:./freeRTOS/tasks.c **** 					else
2480:./freeRTOS/tasks.c **** 					{
2481:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:./freeRTOS/tasks.c **** 					}
2483:./freeRTOS/tasks.c **** 				}
2484:./freeRTOS/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:./freeRTOS/tasks.c **** 			}
2486:./freeRTOS/tasks.c **** 			else
2487:./freeRTOS/tasks.c **** 			{
2488:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:./freeRTOS/tasks.c **** 			}
2490:./freeRTOS/tasks.c **** 		}
2491:./freeRTOS/tasks.c **** 		xTaskResumeAll();
2492:./freeRTOS/tasks.c **** 
2493:./freeRTOS/tasks.c **** 		return xReturn;
2494:./freeRTOS/tasks.c **** 	}
2495:./freeRTOS/tasks.c **** 
2496:./freeRTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:./freeRTOS/tasks.c **** /*----------------------------------------------------------*/
2498:./freeRTOS/tasks.c **** 
2499:./freeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:./freeRTOS/tasks.c **** {
2501:./freeRTOS/tasks.c **** TCB_t * pxTCB;
2502:./freeRTOS/tasks.c **** TickType_t xItemValue;
2503:./freeRTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:./freeRTOS/tasks.c **** 
2505:./freeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:./freeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:./freeRTOS/tasks.c **** 	tasks to be unblocked. */
2508:./freeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:./freeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:./freeRTOS/tasks.c **** 	{
2511:./freeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:./freeRTOS/tasks.c **** 		block. */
2513:./freeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:./freeRTOS/tasks.c **** 
2515:./freeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:./freeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
2517:./freeRTOS/tasks.c **** 		xTickCount = xConstTickCount;
2518:./freeRTOS/tasks.c **** 
2519:./freeRTOS/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:./freeRTOS/tasks.c **** 		{
ARM GAS  /tmp/cckkLGmm.s 			page 47


2521:./freeRTOS/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:./freeRTOS/tasks.c **** 		}
2523:./freeRTOS/tasks.c **** 		else
2524:./freeRTOS/tasks.c **** 		{
2525:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:./freeRTOS/tasks.c **** 		}
2527:./freeRTOS/tasks.c **** 
2528:./freeRTOS/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:./freeRTOS/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:./freeRTOS/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:./freeRTOS/tasks.c **** 		look any further down the list. */
2532:./freeRTOS/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:./freeRTOS/tasks.c **** 		{
2534:./freeRTOS/tasks.c **** 			for( ;; )
2535:./freeRTOS/tasks.c **** 			{
2536:./freeRTOS/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:./freeRTOS/tasks.c **** 				{
2538:./freeRTOS/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:./freeRTOS/tasks.c **** 					to the maximum possible value so it is extremely
2540:./freeRTOS/tasks.c **** 					unlikely that the
2541:./freeRTOS/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:./freeRTOS/tasks.c **** 					next time through. */
2543:./freeRTOS/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:./freeRTOS/tasks.c **** 					break;
2545:./freeRTOS/tasks.c **** 				}
2546:./freeRTOS/tasks.c **** 				else
2547:./freeRTOS/tasks.c **** 				{
2548:./freeRTOS/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:./freeRTOS/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:./freeRTOS/tasks.c **** 					at which the task at the head of the delayed list must
2551:./freeRTOS/tasks.c **** 					be removed from the Blocked state. */
2552:./freeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:./freeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:./freeRTOS/tasks.c **** 
2555:./freeRTOS/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:./freeRTOS/tasks.c **** 					{
2557:./freeRTOS/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:./freeRTOS/tasks.c **** 						item value is the time at which the task at the head
2559:./freeRTOS/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:./freeRTOS/tasks.c **** 						state -	so record the item value in
2561:./freeRTOS/tasks.c **** 						xNextTaskUnblockTime. */
2562:./freeRTOS/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:./freeRTOS/tasks.c **** 						break;
2564:./freeRTOS/tasks.c **** 					}
2565:./freeRTOS/tasks.c **** 					else
2566:./freeRTOS/tasks.c **** 					{
2567:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:./freeRTOS/tasks.c **** 					}
2569:./freeRTOS/tasks.c **** 
2570:./freeRTOS/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:./freeRTOS/tasks.c **** 
2573:./freeRTOS/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:./freeRTOS/tasks.c **** 					it from the event list. */
2575:./freeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:./freeRTOS/tasks.c **** 					{
2577:./freeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
ARM GAS  /tmp/cckkLGmm.s 			page 48


2578:./freeRTOS/tasks.c **** 					}
2579:./freeRTOS/tasks.c **** 					else
2580:./freeRTOS/tasks.c **** 					{
2581:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:./freeRTOS/tasks.c **** 					}
2583:./freeRTOS/tasks.c **** 
2584:./freeRTOS/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:./freeRTOS/tasks.c **** 					list. */
2586:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:./freeRTOS/tasks.c **** 
2588:./freeRTOS/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:./freeRTOS/tasks.c **** 					context switch if preemption is turned off. */
2590:./freeRTOS/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:./freeRTOS/tasks.c **** 					{
2592:./freeRTOS/tasks.c **** 						/* Preemption is on, but a context switch should
2593:./freeRTOS/tasks.c **** 						only be performed if the unblocked task has a
2594:./freeRTOS/tasks.c **** 						priority that is equal to or higher than the
2595:./freeRTOS/tasks.c **** 						currently executing task. */
2596:./freeRTOS/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:./freeRTOS/tasks.c **** 						{
2598:./freeRTOS/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:./freeRTOS/tasks.c **** 						}
2600:./freeRTOS/tasks.c **** 						else
2601:./freeRTOS/tasks.c **** 						{
2602:./freeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:./freeRTOS/tasks.c **** 						}
2604:./freeRTOS/tasks.c **** 					}
2605:./freeRTOS/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:./freeRTOS/tasks.c **** 				}
2607:./freeRTOS/tasks.c **** 			}
2608:./freeRTOS/tasks.c **** 		}
2609:./freeRTOS/tasks.c **** 
2610:./freeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:./freeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:./freeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:./freeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:./freeRTOS/tasks.c **** 		{
2615:./freeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:./freeRTOS/tasks.c **** 			{
2617:./freeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:./freeRTOS/tasks.c **** 			}
2619:./freeRTOS/tasks.c **** 			else
2620:./freeRTOS/tasks.c **** 			{
2621:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:./freeRTOS/tasks.c **** 			}
2623:./freeRTOS/tasks.c **** 		}
2624:./freeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:./freeRTOS/tasks.c **** 
2626:./freeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:./freeRTOS/tasks.c **** 		{
2628:./freeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:./freeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:./freeRTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:./freeRTOS/tasks.c **** 			{
2632:./freeRTOS/tasks.c **** 				vApplicationTickHook();
2633:./freeRTOS/tasks.c **** 			}
2634:./freeRTOS/tasks.c **** 			else
ARM GAS  /tmp/cckkLGmm.s 			page 49


2635:./freeRTOS/tasks.c **** 			{
2636:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:./freeRTOS/tasks.c **** 			}
2638:./freeRTOS/tasks.c **** 		}
2639:./freeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:./freeRTOS/tasks.c **** 	}
2641:./freeRTOS/tasks.c **** 	else
2642:./freeRTOS/tasks.c **** 	{
2643:./freeRTOS/tasks.c **** 		++uxPendedTicks;
2644:./freeRTOS/tasks.c **** 
2645:./freeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:./freeRTOS/tasks.c **** 		scheduler is locked. */
2647:./freeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:./freeRTOS/tasks.c **** 		{
2649:./freeRTOS/tasks.c **** 			vApplicationTickHook();
2650:./freeRTOS/tasks.c **** 		}
2651:./freeRTOS/tasks.c **** 		#endif
2652:./freeRTOS/tasks.c **** 	}
2653:./freeRTOS/tasks.c **** 
2654:./freeRTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:./freeRTOS/tasks.c **** 	{
2656:./freeRTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:./freeRTOS/tasks.c **** 		{
2658:./freeRTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:./freeRTOS/tasks.c **** 		}
2660:./freeRTOS/tasks.c **** 		else
2661:./freeRTOS/tasks.c **** 		{
2662:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:./freeRTOS/tasks.c **** 		}
2664:./freeRTOS/tasks.c **** 	}
2665:./freeRTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:./freeRTOS/tasks.c **** 
2667:./freeRTOS/tasks.c **** 	return xSwitchRequired;
2668:./freeRTOS/tasks.c **** }
2669:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2670:./freeRTOS/tasks.c **** 
2671:./freeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:./freeRTOS/tasks.c **** 
2673:./freeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:./freeRTOS/tasks.c **** 	{
2675:./freeRTOS/tasks.c **** 	TCB_t *xTCB;
2676:./freeRTOS/tasks.c **** 
2677:./freeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:./freeRTOS/tasks.c **** 		getting set. */
2679:./freeRTOS/tasks.c **** 		if( xTask == NULL )
2680:./freeRTOS/tasks.c **** 		{
2681:./freeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:./freeRTOS/tasks.c **** 		}
2683:./freeRTOS/tasks.c **** 		else
2684:./freeRTOS/tasks.c **** 		{
2685:./freeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:./freeRTOS/tasks.c **** 		}
2687:./freeRTOS/tasks.c **** 
2688:./freeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:./freeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2690:./freeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2691:./freeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
ARM GAS  /tmp/cckkLGmm.s 			page 50


2692:./freeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2693:./freeRTOS/tasks.c **** 	}
2694:./freeRTOS/tasks.c **** 
2695:./freeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2697:./freeRTOS/tasks.c **** 
2698:./freeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:./freeRTOS/tasks.c **** 
2700:./freeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:./freeRTOS/tasks.c **** 	{
2702:./freeRTOS/tasks.c **** 	TCB_t *xTCB;
2703:./freeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2704:./freeRTOS/tasks.c **** 
2705:./freeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:./freeRTOS/tasks.c **** 		if( xTask == NULL )
2707:./freeRTOS/tasks.c **** 		{
2708:./freeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:./freeRTOS/tasks.c **** 		}
2710:./freeRTOS/tasks.c **** 		else
2711:./freeRTOS/tasks.c **** 		{
2712:./freeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:./freeRTOS/tasks.c **** 		}
2714:./freeRTOS/tasks.c **** 
2715:./freeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:./freeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2717:./freeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2718:./freeRTOS/tasks.c **** 		{
2719:./freeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:./freeRTOS/tasks.c **** 		}
2721:./freeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2722:./freeRTOS/tasks.c **** 
2723:./freeRTOS/tasks.c **** 		return xReturn;
2724:./freeRTOS/tasks.c **** 	}
2725:./freeRTOS/tasks.c **** 
2726:./freeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2728:./freeRTOS/tasks.c **** 
2729:./freeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:./freeRTOS/tasks.c **** 
2731:./freeRTOS/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:./freeRTOS/tasks.c **** 	{
2733:./freeRTOS/tasks.c **** 	TCB_t *xTCB;
2734:./freeRTOS/tasks.c **** 	BaseType_t xReturn;
2735:./freeRTOS/tasks.c **** 
2736:./freeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:./freeRTOS/tasks.c **** 		if( xTask == NULL )
2738:./freeRTOS/tasks.c **** 		{
2739:./freeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:./freeRTOS/tasks.c **** 		}
2741:./freeRTOS/tasks.c **** 		else
2742:./freeRTOS/tasks.c **** 		{
2743:./freeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:./freeRTOS/tasks.c **** 		}
2745:./freeRTOS/tasks.c **** 
2746:./freeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:./freeRTOS/tasks.c **** 		{
2748:./freeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
ARM GAS  /tmp/cckkLGmm.s 			page 51


2749:./freeRTOS/tasks.c **** 		}
2750:./freeRTOS/tasks.c **** 		else
2751:./freeRTOS/tasks.c **** 		{
2752:./freeRTOS/tasks.c **** 			xReturn = pdFAIL;
2753:./freeRTOS/tasks.c **** 		}
2754:./freeRTOS/tasks.c **** 
2755:./freeRTOS/tasks.c **** 		return xReturn;
2756:./freeRTOS/tasks.c **** 	}
2757:./freeRTOS/tasks.c **** 
2758:./freeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2760:./freeRTOS/tasks.c **** 
2761:./freeRTOS/tasks.c **** void vTaskSwitchContext( void )
2762:./freeRTOS/tasks.c **** {
2763:./freeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:./freeRTOS/tasks.c **** 	{
2765:./freeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:./freeRTOS/tasks.c **** 		switch. */
2767:./freeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2768:./freeRTOS/tasks.c **** 	}
2769:./freeRTOS/tasks.c **** 	else
2770:./freeRTOS/tasks.c **** 	{
2771:./freeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
2772:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:./freeRTOS/tasks.c **** 
2774:./freeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:./freeRTOS/tasks.c **** 		{
2776:./freeRTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:./freeRTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:./freeRTOS/tasks.c **** 				#else
2779:./freeRTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:./freeRTOS/tasks.c **** 				#endif
2781:./freeRTOS/tasks.c **** 
2782:./freeRTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:./freeRTOS/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:./freeRTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:./freeRTOS/tasks.c **** 				protection here so count values are only valid until the timer
2786:./freeRTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:./freeRTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2788:./freeRTOS/tasks.c **** 				are provided by the application, not the kernel. */
2789:./freeRTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:./freeRTOS/tasks.c **** 				{
2791:./freeRTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:./freeRTOS/tasks.c **** 				}
2793:./freeRTOS/tasks.c **** 				else
2794:./freeRTOS/tasks.c **** 				{
2795:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:./freeRTOS/tasks.c **** 				}
2797:./freeRTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:./freeRTOS/tasks.c **** 		}
2799:./freeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:./freeRTOS/tasks.c **** 
2801:./freeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:./freeRTOS/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:./freeRTOS/tasks.c **** 
2804:./freeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:./freeRTOS/tasks.c **** 		optimised asm code. */
ARM GAS  /tmp/cckkLGmm.s 			page 52


2806:./freeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:./freeRTOS/tasks.c **** 
2809:./freeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:./freeRTOS/tasks.c **** 		{
2811:./freeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:./freeRTOS/tasks.c **** 			structure specific to this task. */
2813:./freeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:./freeRTOS/tasks.c **** 		}
2815:./freeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:./freeRTOS/tasks.c **** 	}
2817:./freeRTOS/tasks.c **** }
2818:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2819:./freeRTOS/tasks.c **** 
2820:./freeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:./freeRTOS/tasks.c **** {
2822:./freeRTOS/tasks.c **** 	configASSERT( pxEventList );
2823:./freeRTOS/tasks.c **** 
2824:./freeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:./freeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:./freeRTOS/tasks.c **** 
2827:./freeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:./freeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:./freeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:./freeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:./freeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:./freeRTOS/tasks.c **** 
2833:./freeRTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:./freeRTOS/tasks.c **** }
2835:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2836:./freeRTOS/tasks.c **** 
2837:./freeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:./freeRTOS/tasks.c **** {
2839:./freeRTOS/tasks.c **** 	configASSERT( pxEventList );
2840:./freeRTOS/tasks.c **** 
2841:./freeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:./freeRTOS/tasks.c **** 	the event groups implementation. */
2843:./freeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:./freeRTOS/tasks.c **** 
2845:./freeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:./freeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:./freeRTOS/tasks.c **** 	task that is not in the Blocked state. */
2848:./freeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:./freeRTOS/tasks.c **** 
2850:./freeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:./freeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:./freeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:./freeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:./freeRTOS/tasks.c **** 	the task level). */
2855:./freeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:./freeRTOS/tasks.c **** 
2857:./freeRTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:./freeRTOS/tasks.c **** }
2859:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2860:./freeRTOS/tasks.c **** 
2861:./freeRTOS/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 53


2863:./freeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:./freeRTOS/tasks.c **** 	{
2865:./freeRTOS/tasks.c **** 		configASSERT( pxEventList );
2866:./freeRTOS/tasks.c **** 
2867:./freeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
2868:./freeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:./freeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:./freeRTOS/tasks.c **** 		it should be called with the scheduler suspended. */
2871:./freeRTOS/tasks.c **** 
2872:./freeRTOS/tasks.c **** 
2873:./freeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:./freeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:./freeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:./freeRTOS/tasks.c **** 		can be used in place of vListInsert. */
2877:./freeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:./freeRTOS/tasks.c **** 
2879:./freeRTOS/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:./freeRTOS/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:./freeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:./freeRTOS/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:./freeRTOS/tasks.c **** 		{
2884:./freeRTOS/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:./freeRTOS/tasks.c **** 		}
2886:./freeRTOS/tasks.c **** 
2887:./freeRTOS/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:./freeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:./freeRTOS/tasks.c **** 	}
2890:./freeRTOS/tasks.c **** 
2891:./freeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
2892:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2893:./freeRTOS/tasks.c **** 
2894:./freeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:./freeRTOS/tasks.c **** {
2896:./freeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2897:./freeRTOS/tasks.c **** BaseType_t xReturn;
2898:./freeRTOS/tasks.c **** 
2899:./freeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:./freeRTOS/tasks.c **** 	called from a critical section within an ISR. */
2901:./freeRTOS/tasks.c **** 
2902:./freeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:./freeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:./freeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2905:./freeRTOS/tasks.c **** 
2906:./freeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:./freeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:./freeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:./freeRTOS/tasks.c **** 
2910:./freeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:./freeRTOS/tasks.c **** 	pxEventList is not empty. */
2912:./freeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:./freeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:./freeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:./freeRTOS/tasks.c **** 
2916:./freeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:./freeRTOS/tasks.c **** 	{
2918:./freeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:./freeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
ARM GAS  /tmp/cckkLGmm.s 			page 54


2920:./freeRTOS/tasks.c **** 	}
2921:./freeRTOS/tasks.c **** 	else
2922:./freeRTOS/tasks.c **** 	{
2923:./freeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:./freeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
2925:./freeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:./freeRTOS/tasks.c **** 	}
2927:./freeRTOS/tasks.c **** 
2928:./freeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:./freeRTOS/tasks.c **** 	{
2930:./freeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:./freeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:./freeRTOS/tasks.c **** 		it should force a context switch now. */
2933:./freeRTOS/tasks.c **** 		xReturn = pdTRUE;
2934:./freeRTOS/tasks.c **** 
2935:./freeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:./freeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:./freeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2938:./freeRTOS/tasks.c **** 	}
2939:./freeRTOS/tasks.c **** 	else
2940:./freeRTOS/tasks.c **** 	{
2941:./freeRTOS/tasks.c **** 		xReturn = pdFALSE;
2942:./freeRTOS/tasks.c **** 	}
2943:./freeRTOS/tasks.c **** 
2944:./freeRTOS/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:./freeRTOS/tasks.c **** 	{
2946:./freeRTOS/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:./freeRTOS/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:./freeRTOS/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:./freeRTOS/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:./freeRTOS/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:./freeRTOS/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:./freeRTOS/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:./freeRTOS/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:./freeRTOS/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:./freeRTOS/tasks.c **** 	}
2956:./freeRTOS/tasks.c **** 	#endif
2957:./freeRTOS/tasks.c **** 
2958:./freeRTOS/tasks.c **** 	return xReturn;
2959:./freeRTOS/tasks.c **** }
2960:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2961:./freeRTOS/tasks.c **** 
2962:./freeRTOS/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:./freeRTOS/tasks.c **** {
2964:./freeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2965:./freeRTOS/tasks.c **** BaseType_t xReturn;
2966:./freeRTOS/tasks.c **** 
2967:./freeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:./freeRTOS/tasks.c **** 	the event flags implementation. */
2969:./freeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:./freeRTOS/tasks.c **** 
2971:./freeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
2972:./freeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:./freeRTOS/tasks.c **** 
2974:./freeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:./freeRTOS/tasks.c **** 	event flags. */
2976:./freeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
ARM GAS  /tmp/cckkLGmm.s 			page 55


2977:./freeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:./freeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:./freeRTOS/tasks.c **** 
2980:./freeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:./freeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:./freeRTOS/tasks.c **** 	lists. */
2983:./freeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:./freeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:./freeRTOS/tasks.c **** 
2986:./freeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:./freeRTOS/tasks.c **** 	{
2988:./freeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has
2989:./freeRTOS/tasks.c **** 		a higher priority than the calling task.  This allows
2990:./freeRTOS/tasks.c **** 		the calling task to know if it should force a context
2991:./freeRTOS/tasks.c **** 		switch now. */
2992:./freeRTOS/tasks.c **** 		xReturn = pdTRUE;
2993:./freeRTOS/tasks.c **** 
2994:./freeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:./freeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:./freeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2997:./freeRTOS/tasks.c **** 	}
2998:./freeRTOS/tasks.c **** 	else
2999:./freeRTOS/tasks.c **** 	{
3000:./freeRTOS/tasks.c **** 		xReturn = pdFALSE;
3001:./freeRTOS/tasks.c **** 	}
3002:./freeRTOS/tasks.c **** 
3003:./freeRTOS/tasks.c **** 	return xReturn;
3004:./freeRTOS/tasks.c **** }
3005:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3006:./freeRTOS/tasks.c **** 
3007:./freeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:./freeRTOS/tasks.c **** {
3009:./freeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
3010:./freeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:./freeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:./freeRTOS/tasks.c **** }
3013:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3014:./freeRTOS/tasks.c **** 
3015:./freeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:./freeRTOS/tasks.c **** {
3017:./freeRTOS/tasks.c **** BaseType_t xReturn;
3018:./freeRTOS/tasks.c **** 
3019:./freeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
3020:./freeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
3021:./freeRTOS/tasks.c **** 
3022:./freeRTOS/tasks.c **** 	taskENTER_CRITICAL();
3023:./freeRTOS/tasks.c **** 	{
3024:./freeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:./freeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:./freeRTOS/tasks.c **** 
3027:./freeRTOS/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:./freeRTOS/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:./freeRTOS/tasks.c **** 			{
3030:./freeRTOS/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:./freeRTOS/tasks.c **** 				but has the same result. */
3032:./freeRTOS/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:./freeRTOS/tasks.c **** 				xReturn = pdTRUE;
ARM GAS  /tmp/cckkLGmm.s 			page 56


3034:./freeRTOS/tasks.c **** 			}
3035:./freeRTOS/tasks.c **** 			else
3036:./freeRTOS/tasks.c **** 		#endif
3037:./freeRTOS/tasks.c **** 
3038:./freeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:./freeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:./freeRTOS/tasks.c **** 			{
3041:./freeRTOS/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:./freeRTOS/tasks.c **** 				specified is the maximum block time then the task should block
3043:./freeRTOS/tasks.c **** 				indefinitely, and therefore never time out. */
3044:./freeRTOS/tasks.c **** 				xReturn = pdFALSE;
3045:./freeRTOS/tasks.c **** 			}
3046:./freeRTOS/tasks.c **** 			else
3047:./freeRTOS/tasks.c **** 		#endif
3048:./freeRTOS/tasks.c **** 
3049:./freeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:./freeRTOS/tasks.c **** 		{
3051:./freeRTOS/tasks.c **** 			/* The tick count is greater than the time at which
3052:./freeRTOS/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:./freeRTOS/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:./freeRTOS/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:./freeRTOS/tasks.c **** 			was called. */
3056:./freeRTOS/tasks.c **** 			xReturn = pdTRUE;
3057:./freeRTOS/tasks.c **** 		}
3058:./freeRTOS/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:./freeRTOS/tasks.c **** 		{
3060:./freeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:./freeRTOS/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:./freeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:./freeRTOS/tasks.c **** 			xReturn = pdFALSE;
3064:./freeRTOS/tasks.c **** 		}
3065:./freeRTOS/tasks.c **** 		else
3066:./freeRTOS/tasks.c **** 		{
3067:./freeRTOS/tasks.c **** 			xReturn = pdTRUE;
3068:./freeRTOS/tasks.c **** 		}
3069:./freeRTOS/tasks.c **** 	}
3070:./freeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
3071:./freeRTOS/tasks.c **** 
3072:./freeRTOS/tasks.c **** 	return xReturn;
3073:./freeRTOS/tasks.c **** }
3074:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3075:./freeRTOS/tasks.c **** 
3076:./freeRTOS/tasks.c **** void vTaskMissedYield( void )
3077:./freeRTOS/tasks.c **** {
3078:./freeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
3079:./freeRTOS/tasks.c **** }
3080:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3081:./freeRTOS/tasks.c **** 
3082:./freeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:./freeRTOS/tasks.c **** 
3084:./freeRTOS/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:./freeRTOS/tasks.c **** 	{
3086:./freeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3087:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
3088:./freeRTOS/tasks.c **** 
3089:./freeRTOS/tasks.c **** 		if( xTask != NULL )
3090:./freeRTOS/tasks.c **** 		{
ARM GAS  /tmp/cckkLGmm.s 			page 57


3091:./freeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:./freeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:./freeRTOS/tasks.c **** 		}
3094:./freeRTOS/tasks.c **** 		else
3095:./freeRTOS/tasks.c **** 		{
3096:./freeRTOS/tasks.c **** 			uxReturn = 0U;
3097:./freeRTOS/tasks.c **** 		}
3098:./freeRTOS/tasks.c **** 
3099:./freeRTOS/tasks.c **** 		return uxReturn;
3100:./freeRTOS/tasks.c **** 	}
3101:./freeRTOS/tasks.c **** 
3102:./freeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3104:./freeRTOS/tasks.c **** 
3105:./freeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:./freeRTOS/tasks.c **** 
3107:./freeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:./freeRTOS/tasks.c **** 	{
3109:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
3110:./freeRTOS/tasks.c **** 
3111:./freeRTOS/tasks.c **** 		if( xTask != NULL )
3112:./freeRTOS/tasks.c **** 		{
3113:./freeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:./freeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:./freeRTOS/tasks.c **** 		}
3116:./freeRTOS/tasks.c **** 	}
3117:./freeRTOS/tasks.c **** 
3118:./freeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:./freeRTOS/tasks.c **** 
3120:./freeRTOS/tasks.c **** /*
3121:./freeRTOS/tasks.c ****  * -----------------------------------------------------------
3122:./freeRTOS/tasks.c ****  * The Idle task.
3123:./freeRTOS/tasks.c ****  * ----------------------------------------------------------
3124:./freeRTOS/tasks.c ****  *
3125:./freeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:./freeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:./freeRTOS/tasks.c ****  *
3128:./freeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:./freeRTOS/tasks.c ****  *
3130:./freeRTOS/tasks.c ****  */
3131:./freeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:./freeRTOS/tasks.c **** {
3133:./freeRTOS/tasks.c **** 	/* Stop warnings. */
3134:./freeRTOS/tasks.c **** 	( void ) pvParameters;
3135:./freeRTOS/tasks.c **** 
3136:./freeRTOS/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:./freeRTOS/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:./freeRTOS/tasks.c **** 
3139:./freeRTOS/tasks.c **** 	for( ;; )
3140:./freeRTOS/tasks.c **** 	{
3141:./freeRTOS/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:./freeRTOS/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:./freeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:./freeRTOS/tasks.c **** 
3145:./freeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:./freeRTOS/tasks.c **** 		{
3147:./freeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
ARM GAS  /tmp/cckkLGmm.s 			page 58


3148:./freeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
3149:./freeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:./freeRTOS/tasks.c **** 			will automatically get the processor anyway. */
3151:./freeRTOS/tasks.c **** 			taskYIELD();
3152:./freeRTOS/tasks.c **** 		}
3153:./freeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:./freeRTOS/tasks.c **** 
3155:./freeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:./freeRTOS/tasks.c **** 		{
3157:./freeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:./freeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:./freeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
3160:./freeRTOS/tasks.c **** 			timeslice.
3161:./freeRTOS/tasks.c **** 
3162:./freeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
3163:./freeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:./freeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:./freeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:./freeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:./freeRTOS/tasks.c **** 			{
3168:./freeRTOS/tasks.c **** 				taskYIELD();
3169:./freeRTOS/tasks.c **** 			}
3170:./freeRTOS/tasks.c **** 			else
3171:./freeRTOS/tasks.c **** 			{
3172:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:./freeRTOS/tasks.c **** 			}
3174:./freeRTOS/tasks.c **** 		}
3175:./freeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:./freeRTOS/tasks.c **** 
3177:./freeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:./freeRTOS/tasks.c **** 		{
3179:./freeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:./freeRTOS/tasks.c **** 
3181:./freeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:./freeRTOS/tasks.c **** 			allows the application designer to add background functionality
3183:./freeRTOS/tasks.c **** 			without the overhead of a separate task.
3184:./freeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:./freeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:./freeRTOS/tasks.c **** 			vApplicationIdleHook();
3187:./freeRTOS/tasks.c **** 		}
3188:./freeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:./freeRTOS/tasks.c **** 
3190:./freeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:./freeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:./freeRTOS/tasks.c **** 		user defined low power mode	implementations require
3193:./freeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:./freeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:./freeRTOS/tasks.c **** 		{
3196:./freeRTOS/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:./freeRTOS/tasks.c **** 
3198:./freeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:./freeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:./freeRTOS/tasks.c **** 			test of the expected idle time is performed without the
3201:./freeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:./freeRTOS/tasks.c **** 			valid. */
3203:./freeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 59


3205:./freeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:./freeRTOS/tasks.c **** 			{
3207:./freeRTOS/tasks.c **** 				vTaskSuspendAll();
3208:./freeRTOS/tasks.c **** 				{
3209:./freeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:./freeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
3211:./freeRTOS/tasks.c **** 					be used. */
3212:./freeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:./freeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:./freeRTOS/tasks.c **** 
3215:./freeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:./freeRTOS/tasks.c **** 					{
3217:./freeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:./freeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:./freeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:./freeRTOS/tasks.c **** 					}
3221:./freeRTOS/tasks.c **** 					else
3222:./freeRTOS/tasks.c **** 					{
3223:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:./freeRTOS/tasks.c **** 					}
3225:./freeRTOS/tasks.c **** 				}
3226:./freeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
3227:./freeRTOS/tasks.c **** 			}
3228:./freeRTOS/tasks.c **** 			else
3229:./freeRTOS/tasks.c **** 			{
3230:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:./freeRTOS/tasks.c **** 			}
3232:./freeRTOS/tasks.c **** 		}
3233:./freeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:./freeRTOS/tasks.c **** 	}
3235:./freeRTOS/tasks.c **** }
3236:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3237:./freeRTOS/tasks.c **** 
3238:./freeRTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:./freeRTOS/tasks.c **** 
3240:./freeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:./freeRTOS/tasks.c **** 	{
3242:./freeRTOS/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:./freeRTOS/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:./freeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:./freeRTOS/tasks.c **** 
3246:./freeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:./freeRTOS/tasks.c **** 		{
3248:./freeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:./freeRTOS/tasks.c **** 			eReturn = eAbortSleep;
3250:./freeRTOS/tasks.c **** 		}
3251:./freeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:./freeRTOS/tasks.c **** 		{
3253:./freeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:./freeRTOS/tasks.c **** 			eReturn = eAbortSleep;
3255:./freeRTOS/tasks.c **** 		}
3256:./freeRTOS/tasks.c **** 		else
3257:./freeRTOS/tasks.c **** 		{
3258:./freeRTOS/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:./freeRTOS/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:./freeRTOS/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:./freeRTOS/tasks.c **** 			interrupts. */
ARM GAS  /tmp/cckkLGmm.s 			page 60


3262:./freeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:./freeRTOS/tasks.c **** 			{
3264:./freeRTOS/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:./freeRTOS/tasks.c **** 			}
3266:./freeRTOS/tasks.c **** 			else
3267:./freeRTOS/tasks.c **** 			{
3268:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:./freeRTOS/tasks.c **** 			}
3270:./freeRTOS/tasks.c **** 		}
3271:./freeRTOS/tasks.c **** 
3272:./freeRTOS/tasks.c **** 		return eReturn;
3273:./freeRTOS/tasks.c **** 	}
3274:./freeRTOS/tasks.c **** 
3275:./freeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3277:./freeRTOS/tasks.c **** 
3278:./freeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:./freeRTOS/tasks.c **** 
3280:./freeRTOS/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:./freeRTOS/tasks.c **** 	{
3282:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
3283:./freeRTOS/tasks.c **** 
3284:./freeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:./freeRTOS/tasks.c **** 		{
3286:./freeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:./freeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:./freeRTOS/tasks.c **** 		}
3289:./freeRTOS/tasks.c **** 	}
3290:./freeRTOS/tasks.c **** 
3291:./freeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3293:./freeRTOS/tasks.c **** 
3294:./freeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:./freeRTOS/tasks.c **** 
3296:./freeRTOS/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:./freeRTOS/tasks.c **** 	{
3298:./freeRTOS/tasks.c **** 	void *pvReturn = NULL;
3299:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
3300:./freeRTOS/tasks.c **** 
3301:./freeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:./freeRTOS/tasks.c **** 		{
3303:./freeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:./freeRTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:./freeRTOS/tasks.c **** 		}
3306:./freeRTOS/tasks.c **** 		else
3307:./freeRTOS/tasks.c **** 		{
3308:./freeRTOS/tasks.c **** 			pvReturn = NULL;
3309:./freeRTOS/tasks.c **** 		}
3310:./freeRTOS/tasks.c **** 
3311:./freeRTOS/tasks.c **** 		return pvReturn;
3312:./freeRTOS/tasks.c **** 	}
3313:./freeRTOS/tasks.c **** 
3314:./freeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3316:./freeRTOS/tasks.c **** 
3317:./freeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 61


3319:./freeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:./freeRTOS/tasks.c **** 	{
3321:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
3322:./freeRTOS/tasks.c **** 
3323:./freeRTOS/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:./freeRTOS/tasks.c **** 		the calling task. */
3325:./freeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:./freeRTOS/tasks.c **** 
3327:./freeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:./freeRTOS/tasks.c **** 	}
3329:./freeRTOS/tasks.c **** 
3330:./freeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3332:./freeRTOS/tasks.c **** 
3333:./freeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3334:./freeRTOS/tasks.c **** {
3335:./freeRTOS/tasks.c **** UBaseType_t uxPriority;
3336:./freeRTOS/tasks.c **** 
3337:./freeRTOS/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:./freeRTOS/tasks.c **** 	{
3339:./freeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:./freeRTOS/tasks.c **** 	}
3341:./freeRTOS/tasks.c **** 
3342:./freeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:./freeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:./freeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:./freeRTOS/tasks.c **** 
3346:./freeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:./freeRTOS/tasks.c **** 	{
3348:./freeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:./freeRTOS/tasks.c **** 	}
3350:./freeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:./freeRTOS/tasks.c **** 
3352:./freeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:./freeRTOS/tasks.c **** 	{
3354:./freeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:./freeRTOS/tasks.c **** 	}
3356:./freeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:./freeRTOS/tasks.c **** 
3358:./freeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:./freeRTOS/tasks.c **** 	using list2. */
3360:./freeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:./freeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:./freeRTOS/tasks.c **** }
3363:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3364:./freeRTOS/tasks.c **** 
3365:./freeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:./freeRTOS/tasks.c **** {
3367:./freeRTOS/tasks.c **** 
3368:./freeRTOS/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:./freeRTOS/tasks.c **** 
3370:./freeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:./freeRTOS/tasks.c **** 	{
3372:./freeRTOS/tasks.c **** 		BaseType_t xListIsEmpty;
3373:./freeRTOS/tasks.c **** 
3374:./freeRTOS/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:./freeRTOS/tasks.c **** 		too often in the idle task. */
ARM GAS  /tmp/cckkLGmm.s 			page 62


3376:./freeRTOS/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:./freeRTOS/tasks.c **** 		{
3378:./freeRTOS/tasks.c **** 			vTaskSuspendAll();
3379:./freeRTOS/tasks.c **** 			{
3380:./freeRTOS/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:./freeRTOS/tasks.c **** 			}
3382:./freeRTOS/tasks.c **** 			( void ) xTaskResumeAll();
3383:./freeRTOS/tasks.c **** 
3384:./freeRTOS/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:./freeRTOS/tasks.c **** 			{
3386:./freeRTOS/tasks.c **** 				TCB_t *pxTCB;
3387:./freeRTOS/tasks.c **** 
3388:./freeRTOS/tasks.c **** 				taskENTER_CRITICAL();
3389:./freeRTOS/tasks.c **** 				{
3390:./freeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:./freeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:./freeRTOS/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:./freeRTOS/tasks.c **** 				}
3395:./freeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
3396:./freeRTOS/tasks.c **** 
3397:./freeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:./freeRTOS/tasks.c **** 			}
3399:./freeRTOS/tasks.c **** 			else
3400:./freeRTOS/tasks.c **** 			{
3401:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:./freeRTOS/tasks.c **** 			}
3403:./freeRTOS/tasks.c **** 		}
3404:./freeRTOS/tasks.c **** 	}
3405:./freeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:./freeRTOS/tasks.c **** }
3407:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3408:./freeRTOS/tasks.c **** 
3409:./freeRTOS/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:./freeRTOS/tasks.c **** 
3411:./freeRTOS/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:./freeRTOS/tasks.c **** 	{
3413:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
3414:./freeRTOS/tasks.c **** 
3415:./freeRTOS/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:./freeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:./freeRTOS/tasks.c **** 
3418:./freeRTOS/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:./freeRTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:./freeRTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:./freeRTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:./freeRTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:./freeRTOS/tasks.c **** 
3424:./freeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:./freeRTOS/tasks.c **** 		{
3426:./freeRTOS/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:./freeRTOS/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:./freeRTOS/tasks.c **** 			being in the Blocked state. */
3429:./freeRTOS/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:./freeRTOS/tasks.c **** 			{
3431:./freeRTOS/tasks.c **** 				vTaskSuspendAll();
3432:./freeRTOS/tasks.c **** 				{
ARM GAS  /tmp/cckkLGmm.s 			page 63


3433:./freeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:./freeRTOS/tasks.c **** 					{
3435:./freeRTOS/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:./freeRTOS/tasks.c **** 					}
3437:./freeRTOS/tasks.c **** 				}
3438:./freeRTOS/tasks.c **** 				xTaskResumeAll();
3439:./freeRTOS/tasks.c **** 			}
3440:./freeRTOS/tasks.c **** 		}
3441:./freeRTOS/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:./freeRTOS/tasks.c **** 
3443:./freeRTOS/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:./freeRTOS/tasks.c **** 		{
3445:./freeRTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:./freeRTOS/tasks.c **** 		}
3447:./freeRTOS/tasks.c **** 		#else
3448:./freeRTOS/tasks.c **** 		{
3449:./freeRTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:./freeRTOS/tasks.c **** 		}
3451:./freeRTOS/tasks.c **** 		#endif
3452:./freeRTOS/tasks.c **** 
3453:./freeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:./freeRTOS/tasks.c **** 		{
3455:./freeRTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:./freeRTOS/tasks.c **** 		}
3457:./freeRTOS/tasks.c **** 		#else
3458:./freeRTOS/tasks.c **** 		{
3459:./freeRTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:./freeRTOS/tasks.c **** 		}
3461:./freeRTOS/tasks.c **** 		#endif
3462:./freeRTOS/tasks.c **** 
3463:./freeRTOS/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:./freeRTOS/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:./freeRTOS/tasks.c **** 		just set to whatever is passed in. */
3466:./freeRTOS/tasks.c **** 		if( eState != eInvalid )
3467:./freeRTOS/tasks.c **** 		{
3468:./freeRTOS/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:./freeRTOS/tasks.c **** 		}
3470:./freeRTOS/tasks.c **** 		else
3471:./freeRTOS/tasks.c **** 		{
3472:./freeRTOS/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:./freeRTOS/tasks.c **** 		}
3474:./freeRTOS/tasks.c **** 
3475:./freeRTOS/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:./freeRTOS/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:./freeRTOS/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:./freeRTOS/tasks.c **** 		{
3479:./freeRTOS/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:./freeRTOS/tasks.c **** 			{
3481:./freeRTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:./freeRTOS/tasks.c **** 			}
3483:./freeRTOS/tasks.c **** 			#else
3484:./freeRTOS/tasks.c **** 			{
3485:./freeRTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:./freeRTOS/tasks.c **** 			}
3487:./freeRTOS/tasks.c **** 			#endif
3488:./freeRTOS/tasks.c **** 		}
3489:./freeRTOS/tasks.c **** 		else
ARM GAS  /tmp/cckkLGmm.s 			page 64


3490:./freeRTOS/tasks.c **** 		{
3491:./freeRTOS/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:./freeRTOS/tasks.c **** 		}
3493:./freeRTOS/tasks.c **** 	}
3494:./freeRTOS/tasks.c **** 
3495:./freeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3497:./freeRTOS/tasks.c **** 
3498:./freeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:./freeRTOS/tasks.c **** 
3500:./freeRTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:./freeRTOS/tasks.c **** 	{
3502:./freeRTOS/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:./freeRTOS/tasks.c **** 	UBaseType_t uxTask = 0;
3504:./freeRTOS/tasks.c **** 
3505:./freeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:./freeRTOS/tasks.c **** 		{
3507:./freeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:./freeRTOS/tasks.c **** 
3509:./freeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:./freeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:./freeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:./freeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:./freeRTOS/tasks.c **** 			do
3514:./freeRTOS/tasks.c **** 			{
3515:./freeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:./freeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:./freeRTOS/tasks.c **** 				uxTask++;
3518:./freeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:./freeRTOS/tasks.c **** 		}
3520:./freeRTOS/tasks.c **** 		else
3521:./freeRTOS/tasks.c **** 		{
3522:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:./freeRTOS/tasks.c **** 		}
3524:./freeRTOS/tasks.c **** 
3525:./freeRTOS/tasks.c **** 		return uxTask;
3526:./freeRTOS/tasks.c **** 	}
3527:./freeRTOS/tasks.c **** 
3528:./freeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3530:./freeRTOS/tasks.c **** 
3531:./freeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:./freeRTOS/tasks.c **** 
3533:./freeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:./freeRTOS/tasks.c **** 	{
 100              		.loc 1 3534 2 is_stmt 1 view -0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
3535:./freeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
 105              		.loc 1 3535 2 view .LVU23
3536:./freeRTOS/tasks.c **** 
3537:./freeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 106              		.loc 1 3537 3 view .LVU24
3535:./freeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
 107              		.loc 1 3535 11 is_stmt 0 view .LVU25
ARM GAS  /tmp/cckkLGmm.s 			page 65


 108 0000 0023     		movs	r3, #0
 109              		.loc 1 3537 8 view .LVU26
 110 0002 01E0     		b	.L10
 111              	.LVL9:
 112              	.L11:
3538:./freeRTOS/tasks.c **** 		{
3539:./freeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 113              		.loc 1 3539 4 is_stmt 1 view .LVU27
 114              		.loc 1 3539 17 is_stmt 0 view .LVU28
 115 0004 0130     		adds	r0, r0, #1
 116              	.LVL10:
3540:./freeRTOS/tasks.c **** 			ulCount++;
 117              		.loc 1 3540 4 is_stmt 1 view .LVU29
 118              		.loc 1 3540 11 is_stmt 0 view .LVU30
 119 0006 0133     		adds	r3, r3, #1
 120              	.LVL11:
 121              	.L10:
3537:./freeRTOS/tasks.c **** 		{
 122              		.loc 1 3537 8 is_stmt 1 view .LVU31
3537:./freeRTOS/tasks.c **** 		{
 123              		.loc 1 3537 10 is_stmt 0 view .LVU32
 124 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
3537:./freeRTOS/tasks.c **** 		{
 125              		.loc 1 3537 8 view .LVU33
 126 000a A52A     		cmp	r2, #165
 127 000c FAD0     		beq	.L11
3541:./freeRTOS/tasks.c **** 		}
3542:./freeRTOS/tasks.c **** 
3543:./freeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 128              		.loc 1 3543 3 is_stmt 1 view .LVU34
 129              	.LVL12:
3544:./freeRTOS/tasks.c **** 
3545:./freeRTOS/tasks.c **** 		return ( uint16_t ) ulCount;
 130              		.loc 1 3545 3 view .LVU35
3546:./freeRTOS/tasks.c **** 	}
 131              		.loc 1 3546 2 is_stmt 0 view .LVU36
 132 000e C3F38F00 		ubfx	r0, r3, #2, #16
 133              	.LVL13:
 134              		.loc 1 3546 2 view .LVU37
 135 0012 7047     		bx	lr
 136              		.cfi_endproc
 137              	.LFE38:
 139              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 140              		.align	1
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu fpv4-sp-d16
 146              	prvResetNextTaskUnblockTime:
 147              	.LFB41:
3547:./freeRTOS/tasks.c **** 
3548:./freeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3550:./freeRTOS/tasks.c **** 
3551:./freeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:./freeRTOS/tasks.c **** 
3553:./freeRTOS/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
ARM GAS  /tmp/cckkLGmm.s 			page 66


3554:./freeRTOS/tasks.c **** 	{
3555:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
3556:./freeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3557:./freeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3558:./freeRTOS/tasks.c **** 
3559:./freeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:./freeRTOS/tasks.c **** 
3561:./freeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:./freeRTOS/tasks.c **** 		{
3563:./freeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:./freeRTOS/tasks.c **** 		}
3565:./freeRTOS/tasks.c **** 		#else
3566:./freeRTOS/tasks.c **** 		{
3567:./freeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:./freeRTOS/tasks.c **** 		}
3569:./freeRTOS/tasks.c **** 		#endif
3570:./freeRTOS/tasks.c **** 
3571:./freeRTOS/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:./freeRTOS/tasks.c **** 
3573:./freeRTOS/tasks.c **** 		return uxReturn;
3574:./freeRTOS/tasks.c **** 	}
3575:./freeRTOS/tasks.c **** 
3576:./freeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3578:./freeRTOS/tasks.c **** 
3579:./freeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:./freeRTOS/tasks.c **** 
3581:./freeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:./freeRTOS/tasks.c **** 	{
3583:./freeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:./freeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:./freeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3586:./freeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:./freeRTOS/tasks.c **** 
3588:./freeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:./freeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:./freeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:./freeRTOS/tasks.c **** 		{
3592:./freeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:./freeRTOS/tasks.c **** 		}
3594:./freeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:./freeRTOS/tasks.c **** 
3596:./freeRTOS/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:./freeRTOS/tasks.c **** 		{
3598:./freeRTOS/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:./freeRTOS/tasks.c **** 			the stack and TCB. */
3600:./freeRTOS/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:./freeRTOS/tasks.c **** 			vPortFree( pxTCB );
3602:./freeRTOS/tasks.c **** 		}
3603:./freeRTOS/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:./freeRTOS/tasks.c **** 		{
3605:./freeRTOS/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:./freeRTOS/tasks.c **** 			check what was statically allocated before trying to free the
3607:./freeRTOS/tasks.c **** 			memory. */
3608:./freeRTOS/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:./freeRTOS/tasks.c **** 			{
3610:./freeRTOS/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
ARM GAS  /tmp/cckkLGmm.s 			page 67


3611:./freeRTOS/tasks.c **** 				must be freed. */
3612:./freeRTOS/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:./freeRTOS/tasks.c **** 				vPortFree( pxTCB );
3614:./freeRTOS/tasks.c **** 			}
3615:./freeRTOS/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:./freeRTOS/tasks.c **** 			{
3617:./freeRTOS/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:./freeRTOS/tasks.c **** 				only memory that must be freed. */
3619:./freeRTOS/tasks.c **** 				vPortFree( pxTCB );
3620:./freeRTOS/tasks.c **** 			}
3621:./freeRTOS/tasks.c **** 			else
3622:./freeRTOS/tasks.c **** 			{
3623:./freeRTOS/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:./freeRTOS/tasks.c **** 				nothing needs to be freed. */
3625:./freeRTOS/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:./freeRTOS/tasks.c **** 			}
3628:./freeRTOS/tasks.c **** 		}
3629:./freeRTOS/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:./freeRTOS/tasks.c **** 	}
3631:./freeRTOS/tasks.c **** 
3632:./freeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3634:./freeRTOS/tasks.c **** 
3635:./freeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:./freeRTOS/tasks.c **** {
 148              		.loc 1 3636 1 is_stmt 1 view -0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              		@ link register save eliminated.
3637:./freeRTOS/tasks.c **** TCB_t *pxTCB;
 153              		.loc 1 3637 1 view .LVU39
3638:./freeRTOS/tasks.c **** 
3639:./freeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 154              		.loc 1 3639 2 view .LVU40
 155              		.loc 1 3639 6 is_stmt 0 view .LVU41
 156 0000 084B     		ldr	r3, .L15
 157 0002 1B68     		ldr	r3, [r3]
 158 0004 1B68     		ldr	r3, [r3]
 159              		.loc 1 3639 45 view .LVU42
 160 0006 23B9     		cbnz	r3, .L13
3640:./freeRTOS/tasks.c **** 	{
3641:./freeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:./freeRTOS/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:./freeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:./freeRTOS/tasks.c **** 		there is an item in the delayed list. */
3645:./freeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 161              		.loc 1 3645 3 is_stmt 1 view .LVU43
 162              		.loc 1 3645 24 is_stmt 0 view .LVU44
 163 0008 074B     		ldr	r3, .L15+4
 164 000a 4FF0FF32 		mov	r2, #-1
 165 000e 1A60     		str	r2, [r3]
 166 0010 7047     		bx	lr
 167              	.L13:
3646:./freeRTOS/tasks.c **** 	}
3647:./freeRTOS/tasks.c **** 	else
ARM GAS  /tmp/cckkLGmm.s 			page 68


3648:./freeRTOS/tasks.c **** 	{
3649:./freeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:./freeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:./freeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:./freeRTOS/tasks.c **** 		from the Blocked state. */
3653:./freeRTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 168              		.loc 1 3653 3 is_stmt 1 view .LVU45
 169              		.loc 1 3653 27 is_stmt 0 view .LVU46
 170 0012 044B     		ldr	r3, .L15
 171 0014 1B68     		ldr	r3, [r3]
 172 0016 DB68     		ldr	r3, [r3, #12]
 173              		.loc 1 3653 13 view .LVU47
 174 0018 DB68     		ldr	r3, [r3, #12]
 175              	.LVL14:
3654:./freeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 176              		.loc 1 3654 3 is_stmt 1 view .LVU48
 177              		.loc 1 3654 26 is_stmt 0 view .LVU49
 178 001a 5A68     		ldr	r2, [r3, #4]
 179              		.loc 1 3654 24 view .LVU50
 180 001c 024B     		ldr	r3, .L15+4
 181              	.LVL15:
 182              		.loc 1 3654 24 view .LVU51
 183 001e 1A60     		str	r2, [r3]
3655:./freeRTOS/tasks.c **** 	}
3656:./freeRTOS/tasks.c **** }
 184              		.loc 1 3656 1 view .LVU52
 185 0020 7047     		bx	lr
 186              	.L16:
 187 0022 00BF     		.align	2
 188              	.L15:
 189 0024 00000000 		.word	.LANCHOR2
 190 0028 00000000 		.word	.LANCHOR3
 191              		.cfi_endproc
 192              	.LFE41:
 194              		.section	.text.prvDeleteTCB,"ax",%progbits
 195              		.align	1
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu fpv4-sp-d16
 201              	prvDeleteTCB:
 202              	.LVL16:
 203              	.LFB40:
3582:./freeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 204              		.loc 1 3582 2 is_stmt 1 view -0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
3582:./freeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 208              		.loc 1 3582 2 is_stmt 0 view .LVU54
 209 0000 10B5     		push	{r4, lr}
 210              	.LCFI0:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 4, -8
 213              		.cfi_offset 14, -4
 214 0002 0446     		mov	r4, r0
3586:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 69


 215              		.loc 1 3586 3 is_stmt 1 view .LVU55
3600:./freeRTOS/tasks.c **** 			vPortFree( pxTCB );
 216              		.loc 1 3600 4 view .LVU56
 217 0004 006B     		ldr	r0, [r0, #48]
 218              	.LVL17:
3600:./freeRTOS/tasks.c **** 			vPortFree( pxTCB );
 219              		.loc 1 3600 4 is_stmt 0 view .LVU57
 220 0006 FFF7FEFF 		bl	vPortFree
 221              	.LVL18:
3601:./freeRTOS/tasks.c **** 		}
 222              		.loc 1 3601 4 is_stmt 1 view .LVU58
 223 000a 2046     		mov	r0, r4
 224 000c FFF7FEFF 		bl	vPortFree
 225              	.LVL19:
3630:./freeRTOS/tasks.c **** 
 226              		.loc 1 3630 2 is_stmt 0 view .LVU59
 227 0010 10BD     		pop	{r4, pc}
3630:./freeRTOS/tasks.c **** 
 228              		.loc 1 3630 2 view .LVU60
 229              		.cfi_endproc
 230              	.LFE40:
 232              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 233              		.align	1
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu fpv4-sp-d16
 239              	prvInitialiseNewTask:
 240              	.LVL20:
 241              	.LFB6:
 775:./freeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 242              		.loc 1 775 1 is_stmt 1 view -0
 243              		.cfi_startproc
 244              		@ args = 16, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 775:./freeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 246              		.loc 1 775 1 is_stmt 0 view .LVU62
 247 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 248              	.LCFI1:
 249              		.cfi_def_cfa_offset 32
 250              		.cfi_offset 4, -32
 251              		.cfi_offset 5, -28
 252              		.cfi_offset 6, -24
 253              		.cfi_offset 7, -20
 254              		.cfi_offset 8, -16
 255              		.cfi_offset 9, -12
 256              		.cfi_offset 10, -8
 257              		.cfi_offset 14, -4
 258 0004 8046     		mov	r8, r0
 259 0006 0D46     		mov	r5, r1
 260 0008 1746     		mov	r7, r2
 261 000a 9946     		mov	r9, r3
 262 000c 089E     		ldr	r6, [sp, #32]
 263 000e DDF824A0 		ldr	r10, [sp, #36]
 264 0012 0A9C     		ldr	r4, [sp, #40]
 776:./freeRTOS/tasks.c **** UBaseType_t x;
 265              		.loc 1 776 1 is_stmt 1 view .LVU63
ARM GAS  /tmp/cckkLGmm.s 			page 70


 777:./freeRTOS/tasks.c **** 
 266              		.loc 1 777 1 view .LVU64
 797:./freeRTOS/tasks.c **** 	}
 267              		.loc 1 797 3 view .LVU65
 797:./freeRTOS/tasks.c **** 	}
 268              		.loc 1 797 12 is_stmt 0 view .LVU66
 269 0014 9200     		lsls	r2, r2, #2
 270              	.LVL21:
 797:./freeRTOS/tasks.c **** 	}
 271              		.loc 1 797 12 view .LVU67
 272 0016 A521     		movs	r1, #165
 273              	.LVL22:
 797:./freeRTOS/tasks.c **** 	}
 274              		.loc 1 797 12 view .LVU68
 275 0018 206B     		ldr	r0, [r4, #48]
 276              	.LVL23:
 797:./freeRTOS/tasks.c **** 	}
 277              		.loc 1 797 12 view .LVU69
 278 001a FFF7FEFF 		bl	memset
 279              	.LVL24:
 807:./freeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 280              		.loc 1 807 3 is_stmt 1 view .LVU70
 807:./freeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 281              		.loc 1 807 26 is_stmt 0 view .LVU71
 282 001e 236B     		ldr	r3, [r4, #48]
 807:./freeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 283              		.loc 1 807 36 view .LVU72
 284 0020 07F18042 		add	r2, r7, #1073741824
 285 0024 013A     		subs	r2, r2, #1
 807:./freeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 286              		.loc 1 807 16 view .LVU73
 287 0026 03EB8207 		add	r7, r3, r2, lsl #2
 288              	.LVL25:
 808:./freeRTOS/tasks.c **** 
 289              		.loc 1 808 3 is_stmt 1 view .LVU74
 808:./freeRTOS/tasks.c **** 
 290              		.loc 1 808 81 is_stmt 0 view .LVU75
 291 002a 27F00707 		bic	r7, r7, #7
 292              	.LVL26:
 811:./freeRTOS/tasks.c **** 	}
 293              		.loc 1 811 124 is_stmt 1 view .LVU76
 827:./freeRTOS/tasks.c **** 	{
 294              		.loc 1 827 2 view .LVU77
 827:./freeRTOS/tasks.c **** 	{
 295              		.loc 1 827 9 is_stmt 0 view .LVU78
 296 002e 4FF0000C 		mov	ip, #0
 297              	.LVL27:
 298              	.L20:
 827:./freeRTOS/tasks.c **** 	{
 299              		.loc 1 827 30 is_stmt 1 discriminator 1 view .LVU79
 827:./freeRTOS/tasks.c **** 	{
 300              		.loc 1 827 2 is_stmt 0 discriminator 1 view .LVU80
 301 0032 BCF10F0F 		cmp	ip, #15
 302 0036 0BD8     		bhi	.L21
 829:./freeRTOS/tasks.c **** 
 303              		.loc 1 829 3 is_stmt 1 view .LVU81
 829:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 71


 304              		.loc 1 829 37 is_stmt 0 view .LVU82
 305 0038 15F80C20 		ldrb	r2, [r5, ip]	@ zero_extendqisi2
 829:./freeRTOS/tasks.c **** 
 306              		.loc 1 829 29 view .LVU83
 307 003c 04EB0C03 		add	r3, r4, ip
 308 0040 83F83420 		strb	r2, [r3, #52]
 834:./freeRTOS/tasks.c **** 		{
 309              		.loc 1 834 3 is_stmt 1 view .LVU84
 834:./freeRTOS/tasks.c **** 		{
 310              		.loc 1 834 13 is_stmt 0 view .LVU85
 311 0044 15F80C30 		ldrb	r3, [r5, ip]	@ zero_extendqisi2
 834:./freeRTOS/tasks.c **** 		{
 312              		.loc 1 834 5 view .LVU86
 313 0048 13B1     		cbz	r3, .L21
 840:./freeRTOS/tasks.c **** 		}
 314              		.loc 1 840 28 is_stmt 1 discriminator 2 view .LVU87
 827:./freeRTOS/tasks.c **** 	{
 315              		.loc 1 827 75 discriminator 2 view .LVU88
 827:./freeRTOS/tasks.c **** 	{
 316              		.loc 1 827 76 is_stmt 0 discriminator 2 view .LVU89
 317 004a 0CF1010C 		add	ip, ip, #1
 318              	.LVL28:
 827:./freeRTOS/tasks.c **** 	{
 319              		.loc 1 827 76 discriminator 2 view .LVU90
 320 004e F0E7     		b	.L20
 321              	.L21:
 846:./freeRTOS/tasks.c **** 
 322              		.loc 1 846 2 is_stmt 1 view .LVU91
 846:./freeRTOS/tasks.c **** 
 323              		.loc 1 846 54 is_stmt 0 view .LVU92
 324 0050 0023     		movs	r3, #0
 325 0052 84F84330 		strb	r3, [r4, #67]
 850:./freeRTOS/tasks.c **** 	{
 326              		.loc 1 850 2 is_stmt 1 view .LVU93
 850:./freeRTOS/tasks.c **** 	{
 327              		.loc 1 850 4 is_stmt 0 view .LVU94
 328 0056 092E     		cmp	r6, #9
 329 0058 00D9     		bls	.L23
 852:./freeRTOS/tasks.c **** 	}
 330              		.loc 1 852 14 view .LVU95
 331 005a 0926     		movs	r6, #9
 332              	.L23:
 333              	.LVL29:
 856:./freeRTOS/tasks.c **** 	}
 334              		.loc 1 856 27 is_stmt 1 view .LVU96
 859:./freeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 335              		.loc 1 859 2 view .LVU97
 859:./freeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 336              		.loc 1 859 23 is_stmt 0 view .LVU98
 337 005c E662     		str	r6, [r4, #44]
 862:./freeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 338              		.loc 1 862 3 is_stmt 1 view .LVU99
 862:./freeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 339              		.loc 1 862 28 is_stmt 0 view .LVU100
 340 005e 6664     		str	r6, [r4, #68]
 863:./freeRTOS/tasks.c **** 	}
 341              		.loc 1 863 3 is_stmt 1 view .LVU101
ARM GAS  /tmp/cckkLGmm.s 			page 72


 863:./freeRTOS/tasks.c **** 	}
 342              		.loc 1 863 27 is_stmt 0 view .LVU102
 343 0060 0025     		movs	r5, #0
 344              	.LVL30:
 863:./freeRTOS/tasks.c **** 	}
 345              		.loc 1 863 27 view .LVU103
 346 0062 A564     		str	r5, [r4, #72]
 867:./freeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 347              		.loc 1 867 2 is_stmt 1 view .LVU104
 348 0064 201D     		adds	r0, r4, #4
 349 0066 FFF7FEFF 		bl	vListInitialiseItem
 350              	.LVL31:
 868:./freeRTOS/tasks.c **** 
 351              		.loc 1 868 2 view .LVU105
 352 006a 04F11800 		add	r0, r4, #24
 353 006e FFF7FEFF 		bl	vListInitialiseItem
 354              	.LVL32:
 872:./freeRTOS/tasks.c **** 
 355              		.loc 1 872 2 view .LVU106
 356 0072 2461     		str	r4, [r4, #16]
 875:./freeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 357              		.loc 1 875 2 view .LVU107
 358 0074 C6F10A06 		rsb	r6, r6, #10
 359              	.LVL33:
 875:./freeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 360              		.loc 1 875 2 is_stmt 0 view .LVU108
 361 0078 A661     		str	r6, [r4, #24]
 876:./freeRTOS/tasks.c **** 
 362              		.loc 1 876 2 is_stmt 1 view .LVU109
 363 007a 6462     		str	r4, [r4, #36]
 903:./freeRTOS/tasks.c **** 	}
 364              		.loc 1 903 3 view .LVU110
 918:./freeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 365              		.loc 1 918 3 view .LVU111
 918:./freeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 366              		.loc 1 918 29 is_stmt 0 view .LVU112
 367 007c E564     		str	r5, [r4, #76]
 919:./freeRTOS/tasks.c **** 	}
 368              		.loc 1 919 3 is_stmt 1 view .LVU113
 919:./freeRTOS/tasks.c **** 	}
 369              		.loc 1 919 27 is_stmt 0 view .LVU114
 370 007e 84F85050 		strb	r5, [r4, #80]
 946:./freeRTOS/tasks.c **** 	}
 371              		.loc 1 946 3 is_stmt 1 view .LVU115
 946:./freeRTOS/tasks.c **** 	}
 372              		.loc 1 946 28 is_stmt 0 view .LVU116
 373 0082 4A46     		mov	r2, r9
 374 0084 4146     		mov	r1, r8
 375 0086 3846     		mov	r0, r7
 376 0088 FFF7FEFF 		bl	pxPortInitialiseStack
 377              	.LVL34:
 946:./freeRTOS/tasks.c **** 	}
 378              		.loc 1 946 26 view .LVU117
 379 008c 2060     		str	r0, [r4]
 950:./freeRTOS/tasks.c **** 	{
 380              		.loc 1 950 2 is_stmt 1 view .LVU118
 950:./freeRTOS/tasks.c **** 	{
ARM GAS  /tmp/cckkLGmm.s 			page 73


 381              		.loc 1 950 4 is_stmt 0 view .LVU119
 382 008e BAF1000F 		cmp	r10, #0
 383 0092 01D0     		beq	.L19
 954:./freeRTOS/tasks.c **** 	}
 384              		.loc 1 954 3 is_stmt 1 view .LVU120
 954:./freeRTOS/tasks.c **** 	}
 385              		.loc 1 954 18 is_stmt 0 view .LVU121
 386 0094 CAF80040 		str	r4, [r10]
 958:./freeRTOS/tasks.c **** 	}
 387              		.loc 1 958 27 is_stmt 1 view .LVU122
 388              	.L19:
 960:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 389              		.loc 1 960 1 is_stmt 0 view .LVU123
 390 0098 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 960:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 391              		.loc 1 960 1 view .LVU124
 392              		.cfi_endproc
 393              	.LFE6:
 395              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 396              		.align	1
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 400              		.fpu fpv4-sp-d16
 402              	prvInitialiseTaskLists:
 403              	.LFB36:
3334:./freeRTOS/tasks.c **** UBaseType_t uxPriority;
 404              		.loc 1 3334 1 is_stmt 1 view -0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408 0000 38B5     		push	{r3, r4, r5, lr}
 409              	.LCFI2:
 410              		.cfi_def_cfa_offset 16
 411              		.cfi_offset 3, -16
 412              		.cfi_offset 4, -12
 413              		.cfi_offset 5, -8
 414              		.cfi_offset 14, -4
3335:./freeRTOS/tasks.c **** 
 415              		.loc 1 3335 1 view .LVU126
3337:./freeRTOS/tasks.c **** 	{
 416              		.loc 1 3337 2 view .LVU127
 417              	.LVL35:
3337:./freeRTOS/tasks.c **** 	{
 418              		.loc 1 3337 18 is_stmt 0 view .LVU128
 419 0002 0024     		movs	r4, #0
3337:./freeRTOS/tasks.c **** 	{
 420              		.loc 1 3337 2 view .LVU129
 421 0004 07E0     		b	.L28
 422              	.LVL36:
 423              	.L29:
3339:./freeRTOS/tasks.c **** 	}
 424              		.loc 1 3339 3 is_stmt 1 discriminator 3 view .LVU130
 425 0006 04EB8402 		add	r2, r4, r4, lsl #2
 426 000a 9300     		lsls	r3, r2, #2
 427 000c 0E48     		ldr	r0, .L31
 428 000e 1844     		add	r0, r0, r3
ARM GAS  /tmp/cckkLGmm.s 			page 74


 429 0010 FFF7FEFF 		bl	vListInitialise
 430              	.LVL37:
3337:./freeRTOS/tasks.c **** 	{
 431              		.loc 1 3337 91 discriminator 3 view .LVU131
3337:./freeRTOS/tasks.c **** 	{
 432              		.loc 1 3337 101 is_stmt 0 discriminator 3 view .LVU132
 433 0014 0134     		adds	r4, r4, #1
 434              	.LVL38:
 435              	.L28:
3337:./freeRTOS/tasks.c **** 	{
 436              		.loc 1 3337 40 is_stmt 1 discriminator 1 view .LVU133
3337:./freeRTOS/tasks.c **** 	{
 437              		.loc 1 3337 2 is_stmt 0 discriminator 1 view .LVU134
 438 0016 092C     		cmp	r4, #9
 439 0018 F5D9     		bls	.L29
3342:./freeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 440              		.loc 1 3342 2 is_stmt 1 view .LVU135
 441 001a 0C4D     		ldr	r5, .L31+4
 442 001c 2846     		mov	r0, r5
 443 001e FFF7FEFF 		bl	vListInitialise
 444              	.LVL39:
3343:./freeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 445              		.loc 1 3343 2 view .LVU136
 446 0022 0B4C     		ldr	r4, .L31+8
 447              	.LVL40:
3343:./freeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 448              		.loc 1 3343 2 is_stmt 0 view .LVU137
 449 0024 2046     		mov	r0, r4
 450 0026 FFF7FEFF 		bl	vListInitialise
 451              	.LVL41:
3344:./freeRTOS/tasks.c **** 
 452              		.loc 1 3344 2 is_stmt 1 view .LVU138
 453 002a 0A48     		ldr	r0, .L31+12
 454 002c FFF7FEFF 		bl	vListInitialise
 455              	.LVL42:
3348:./freeRTOS/tasks.c **** 	}
 456              		.loc 1 3348 3 view .LVU139
 457 0030 0948     		ldr	r0, .L31+16
 458 0032 FFF7FEFF 		bl	vListInitialise
 459              	.LVL43:
3354:./freeRTOS/tasks.c **** 	}
 460              		.loc 1 3354 3 view .LVU140
 461 0036 0948     		ldr	r0, .L31+20
 462 0038 FFF7FEFF 		bl	vListInitialise
 463              	.LVL44:
3360:./freeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 464              		.loc 1 3360 2 view .LVU141
3360:./freeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 465              		.loc 1 3360 20 is_stmt 0 view .LVU142
 466 003c 084B     		ldr	r3, .L31+24
 467 003e 1D60     		str	r5, [r3]
3361:./freeRTOS/tasks.c **** }
 468              		.loc 1 3361 2 is_stmt 1 view .LVU143
3361:./freeRTOS/tasks.c **** }
 469              		.loc 1 3361 28 is_stmt 0 view .LVU144
 470 0040 084B     		ldr	r3, .L31+28
 471 0042 1C60     		str	r4, [r3]
ARM GAS  /tmp/cckkLGmm.s 			page 75


3362:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 472              		.loc 1 3362 1 view .LVU145
 473 0044 38BD     		pop	{r3, r4, r5, pc}
 474              	.L32:
 475 0046 00BF     		.align	2
 476              	.L31:
 477 0048 00000000 		.word	.LANCHOR4
 478 004c 00000000 		.word	.LANCHOR5
 479 0050 00000000 		.word	.LANCHOR6
 480 0054 00000000 		.word	.LANCHOR1
 481 0058 00000000 		.word	.LANCHOR7
 482 005c 00000000 		.word	.LANCHOR0
 483 0060 00000000 		.word	.LANCHOR2
 484 0064 00000000 		.word	.LANCHOR8
 485              		.cfi_endproc
 486              	.LFE36:
 488              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 489              		.align	1
 490              		.syntax unified
 491              		.thumb
 492              		.thumb_func
 493              		.fpu fpv4-sp-d16
 495              	prvAddNewTaskToReadyList:
 496              	.LVL45:
 497              	.LFB7:
 964:./freeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 498              		.loc 1 964 1 is_stmt 1 view -0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 0
 501              		@ frame_needed = 0, uses_anonymous_args = 0
 964:./freeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 502              		.loc 1 964 1 is_stmt 0 view .LVU147
 503 0000 10B5     		push	{r4, lr}
 504              	.LCFI3:
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 4, -8
 507              		.cfi_offset 14, -4
 508 0002 0446     		mov	r4, r0
 967:./freeRTOS/tasks.c **** 	{
 509              		.loc 1 967 2 is_stmt 1 view .LVU148
 510 0004 FFF7FEFF 		bl	vPortEnterCritical
 511              	.LVL46:
 969:./freeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 512              		.loc 1 969 3 view .LVU149
 969:./freeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 513              		.loc 1 969 25 is_stmt 0 view .LVU150
 514 0008 214A     		ldr	r2, .L40
 515 000a 1368     		ldr	r3, [r2]
 516 000c 0133     		adds	r3, r3, #1
 517 000e 1360     		str	r3, [r2]
 970:./freeRTOS/tasks.c **** 		{
 518              		.loc 1 970 3 is_stmt 1 view .LVU151
 970:./freeRTOS/tasks.c **** 		{
 519              		.loc 1 970 20 is_stmt 0 view .LVU152
 520 0010 204B     		ldr	r3, .L40+4
 521 0012 1B68     		ldr	r3, [r3]
 970:./freeRTOS/tasks.c **** 		{
ARM GAS  /tmp/cckkLGmm.s 			page 76


 522              		.loc 1 970 5 view .LVU153
 523 0014 5BB1     		cbz	r3, .L38
 993:./freeRTOS/tasks.c **** 			{
 524              		.loc 1 993 4 is_stmt 1 view .LVU154
 993:./freeRTOS/tasks.c **** 			{
 525              		.loc 1 993 26 is_stmt 0 view .LVU155
 526 0016 204B     		ldr	r3, .L40+8
 527 0018 1B68     		ldr	r3, [r3]
 993:./freeRTOS/tasks.c **** 			{
 528              		.loc 1 993 6 view .LVU156
 529 001a 6BB9     		cbnz	r3, .L35
 995:./freeRTOS/tasks.c **** 				{
 530              		.loc 1 995 5 is_stmt 1 view .LVU157
 995:./freeRTOS/tasks.c **** 				{
 531              		.loc 1 995 21 is_stmt 0 view .LVU158
 532 001c 1D4B     		ldr	r3, .L40+4
 533 001e 1B68     		ldr	r3, [r3]
 534 0020 DA6A     		ldr	r2, [r3, #44]
 995:./freeRTOS/tasks.c **** 				{
 535              		.loc 1 995 45 view .LVU159
 536 0022 E36A     		ldr	r3, [r4, #44]
 995:./freeRTOS/tasks.c **** 				{
 537              		.loc 1 995 7 view .LVU160
 538 0024 9A42     		cmp	r2, r3
 539 0026 07D8     		bhi	.L35
 997:./freeRTOS/tasks.c **** 				}
 540              		.loc 1 997 6 is_stmt 1 view .LVU161
 997:./freeRTOS/tasks.c **** 				}
 541              		.loc 1 997 19 is_stmt 0 view .LVU162
 542 0028 1A4B     		ldr	r3, .L40+4
 543 002a 1C60     		str	r4, [r3]
 544 002c 04E0     		b	.L35
 545              	.L38:
 974:./freeRTOS/tasks.c **** 
 546              		.loc 1 974 4 is_stmt 1 view .LVU163
 974:./freeRTOS/tasks.c **** 
 547              		.loc 1 974 17 is_stmt 0 view .LVU164
 548 002e 194B     		ldr	r3, .L40+4
 549 0030 1C60     		str	r4, [r3]
 976:./freeRTOS/tasks.c **** 			{
 550              		.loc 1 976 4 is_stmt 1 view .LVU165
 976:./freeRTOS/tasks.c **** 			{
 551              		.loc 1 976 31 is_stmt 0 view .LVU166
 552 0032 1368     		ldr	r3, [r2]
 976:./freeRTOS/tasks.c **** 			{
 553              		.loc 1 976 6 view .LVU167
 554 0034 012B     		cmp	r3, #1
 555 0036 28D0     		beq	.L39
 556              	.L35:
1006:./freeRTOS/tasks.c **** 			}
 557              		.loc 1 1006 29 is_stmt 1 view .LVU168
1010:./freeRTOS/tasks.c **** 
 558              		.loc 1 1010 3 view .LVU169
1010:./freeRTOS/tasks.c **** 
 559              		.loc 1 1010 15 is_stmt 0 view .LVU170
 560 0038 184A     		ldr	r2, .L40+12
 561 003a 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cckkLGmm.s 			page 77


 562 003c 0133     		adds	r3, r3, #1
 563 003e 1360     		str	r3, [r2]
1018:./freeRTOS/tasks.c **** 
 564              		.loc 1 1018 31 is_stmt 1 view .LVU171
1020:./freeRTOS/tasks.c **** 
 565              		.loc 1 1020 3 view .LVU172
1020:./freeRTOS/tasks.c **** 
 566              		.loc 1 1020 3 view .LVU173
 567 0040 E06A     		ldr	r0, [r4, #44]
 568 0042 0123     		movs	r3, #1
 569 0044 8340     		lsls	r3, r3, r0
 570 0046 164A     		ldr	r2, .L40+16
 571 0048 1168     		ldr	r1, [r2]
 572 004a 0B43     		orrs	r3, r3, r1
 573 004c 1360     		str	r3, [r2]
1020:./freeRTOS/tasks.c **** 
 574              		.loc 1 1020 3 view .LVU174
 575 004e 00EB8000 		add	r0, r0, r0, lsl #2
 576 0052 211D     		adds	r1, r4, #4
 577 0054 134B     		ldr	r3, .L40+20
 578 0056 03EB8000 		add	r0, r3, r0, lsl #2
 579 005a FFF7FEFF 		bl	vListInsertEnd
 580              	.LVL47:
1020:./freeRTOS/tasks.c **** 
 581              		.loc 1 1020 36 view .LVU175
1022:./freeRTOS/tasks.c **** 	}
 582              		.loc 1 1022 3 view .LVU176
1024:./freeRTOS/tasks.c **** 
 583              		.loc 1 1024 2 view .LVU177
 584 005e FFF7FEFF 		bl	vPortExitCritical
 585              	.LVL48:
1026:./freeRTOS/tasks.c **** 	{
 586              		.loc 1 1026 2 view .LVU178
1026:./freeRTOS/tasks.c **** 	{
 587              		.loc 1 1026 24 is_stmt 0 view .LVU179
 588 0062 0D4B     		ldr	r3, .L40+8
 589 0064 1B68     		ldr	r3, [r3]
1026:./freeRTOS/tasks.c **** 	{
 590              		.loc 1 1026 4 view .LVU180
 591 0066 7BB1     		cbz	r3, .L33
1030:./freeRTOS/tasks.c **** 		{
 592              		.loc 1 1030 3 is_stmt 1 view .LVU181
1030:./freeRTOS/tasks.c **** 		{
 593              		.loc 1 1030 19 is_stmt 0 view .LVU182
 594 0068 0A4B     		ldr	r3, .L40+4
 595 006a 1B68     		ldr	r3, [r3]
 596 006c DA6A     		ldr	r2, [r3, #44]
1030:./freeRTOS/tasks.c **** 		{
 597              		.loc 1 1030 42 view .LVU183
 598 006e E36A     		ldr	r3, [r4, #44]
1030:./freeRTOS/tasks.c **** 		{
 599              		.loc 1 1030 5 view .LVU184
 600 0070 9A42     		cmp	r2, r3
 601 0072 09D2     		bcs	.L33
1032:./freeRTOS/tasks.c **** 		}
 602              		.loc 1 1032 4 is_stmt 1 view .LVU185
 603 0074 4FF0E023 		mov	r3, #-536813568
ARM GAS  /tmp/cckkLGmm.s 			page 78


 604 0078 4FF08052 		mov	r2, #268435456
 605 007c C3F8042D 		str	r2, [r3, #3332]
1032:./freeRTOS/tasks.c **** 		}
 606              		.loc 1 1032 4 view .LVU186
 607              		.syntax unified
 608              	@ 1032 "./freeRTOS/tasks.c" 1
 609 0080 BFF34F8F 		dsb
 610              	@ 0 "" 2
1032:./freeRTOS/tasks.c **** 		}
 611              		.loc 1 1032 4 view .LVU187
 612              	@ 1032 "./freeRTOS/tasks.c" 1
 613 0084 BFF36F8F 		isb
 614              	@ 0 "" 2
1032:./freeRTOS/tasks.c **** 		}
 615              		.loc 1 1032 35 view .LVU188
1041:./freeRTOS/tasks.c **** 	}
 616              		.loc 1 1041 27 view .LVU189
 617              		.thumb
 618              		.syntax unified
 619              	.L33:
1043:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 620              		.loc 1 1043 1 is_stmt 0 view .LVU190
 621 0088 10BD     		pop	{r4, pc}
 622              	.LVL49:
 623              	.L39:
 981:./freeRTOS/tasks.c **** 			}
 624              		.loc 1 981 5 is_stmt 1 view .LVU191
 625 008a FFF7FEFF 		bl	prvInitialiseTaskLists
 626              	.LVL50:
 627 008e D3E7     		b	.L35
 628              	.L41:
 629              		.align	2
 630              	.L40:
 631 0090 00000000 		.word	.LANCHOR9
 632 0094 00000000 		.word	.LANCHOR10
 633 0098 00000000 		.word	.LANCHOR11
 634 009c 00000000 		.word	.LANCHOR12
 635 00a0 00000000 		.word	.LANCHOR13
 636 00a4 00000000 		.word	.LANCHOR4
 637              		.cfi_endproc
 638              	.LFE7:
 640              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 641              		.align	1
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	prvAddCurrentTaskToDelayedList:
 648              	.LVL51:
 649              	.LFB53:
3657:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3658:./freeRTOS/tasks.c **** 
3659:./freeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:./freeRTOS/tasks.c **** 
3661:./freeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:./freeRTOS/tasks.c **** 	{
3663:./freeRTOS/tasks.c **** 	TaskHandle_t xReturn;
ARM GAS  /tmp/cckkLGmm.s 			page 79


3664:./freeRTOS/tasks.c **** 
3665:./freeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3666:./freeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:./freeRTOS/tasks.c **** 		individual execution thread. */
3668:./freeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
3669:./freeRTOS/tasks.c **** 
3670:./freeRTOS/tasks.c **** 		return xReturn;
3671:./freeRTOS/tasks.c **** 	}
3672:./freeRTOS/tasks.c **** 
3673:./freeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3675:./freeRTOS/tasks.c **** 
3676:./freeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:./freeRTOS/tasks.c **** 
3678:./freeRTOS/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:./freeRTOS/tasks.c **** 	{
3680:./freeRTOS/tasks.c **** 	BaseType_t xReturn;
3681:./freeRTOS/tasks.c **** 
3682:./freeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:./freeRTOS/tasks.c **** 		{
3684:./freeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:./freeRTOS/tasks.c **** 		}
3686:./freeRTOS/tasks.c **** 		else
3687:./freeRTOS/tasks.c **** 		{
3688:./freeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:./freeRTOS/tasks.c **** 			{
3690:./freeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:./freeRTOS/tasks.c **** 			}
3692:./freeRTOS/tasks.c **** 			else
3693:./freeRTOS/tasks.c **** 			{
3694:./freeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:./freeRTOS/tasks.c **** 			}
3696:./freeRTOS/tasks.c **** 		}
3697:./freeRTOS/tasks.c **** 
3698:./freeRTOS/tasks.c **** 		return xReturn;
3699:./freeRTOS/tasks.c **** 	}
3700:./freeRTOS/tasks.c **** 
3701:./freeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3703:./freeRTOS/tasks.c **** 
3704:./freeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:./freeRTOS/tasks.c **** 
3706:./freeRTOS/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:./freeRTOS/tasks.c **** 	{
3708:./freeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:./freeRTOS/tasks.c **** 
3710:./freeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:./freeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:./freeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
3713:./freeRTOS/tasks.c **** 		{
3714:./freeRTOS/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:./freeRTOS/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:./freeRTOS/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:./freeRTOS/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:./freeRTOS/tasks.c **** 			{
3719:./freeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:./freeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
ARM GAS  /tmp/cckkLGmm.s 			page 80


3721:./freeRTOS/tasks.c **** 				not	being used for anything else. */
3722:./freeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:./freeRTOS/tasks.c **** 				{
3724:./freeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:./freeRTOS/tasks.c **** 				}
3726:./freeRTOS/tasks.c **** 				else
3727:./freeRTOS/tasks.c **** 				{
3728:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:./freeRTOS/tasks.c **** 				}
3730:./freeRTOS/tasks.c **** 
3731:./freeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:./freeRTOS/tasks.c **** 				to be moved into a new list. */
3733:./freeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:./freeRTOS/tasks.c **** 				{
3735:./freeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:./freeRTOS/tasks.c **** 					{
3737:./freeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:./freeRTOS/tasks.c **** 					}
3739:./freeRTOS/tasks.c **** 					else
3740:./freeRTOS/tasks.c **** 					{
3741:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:./freeRTOS/tasks.c **** 					}
3743:./freeRTOS/tasks.c **** 
3744:./freeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:./freeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:./freeRTOS/tasks.c **** 				}
3748:./freeRTOS/tasks.c **** 				else
3749:./freeRTOS/tasks.c **** 				{
3750:./freeRTOS/tasks.c **** 					/* Just inherit the priority. */
3751:./freeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:./freeRTOS/tasks.c **** 				}
3753:./freeRTOS/tasks.c **** 
3754:./freeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:./freeRTOS/tasks.c **** 			}
3756:./freeRTOS/tasks.c **** 			else
3757:./freeRTOS/tasks.c **** 			{
3758:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:./freeRTOS/tasks.c **** 			}
3760:./freeRTOS/tasks.c **** 		}
3761:./freeRTOS/tasks.c **** 		else
3762:./freeRTOS/tasks.c **** 		{
3763:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:./freeRTOS/tasks.c **** 		}
3765:./freeRTOS/tasks.c **** 	}
3766:./freeRTOS/tasks.c **** 
3767:./freeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3768:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3769:./freeRTOS/tasks.c **** 
3770:./freeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:./freeRTOS/tasks.c **** 
3772:./freeRTOS/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:./freeRTOS/tasks.c **** 	{
3774:./freeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:./freeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:./freeRTOS/tasks.c **** 
3777:./freeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
ARM GAS  /tmp/cckkLGmm.s 			page 81


3778:./freeRTOS/tasks.c **** 		{
3779:./freeRTOS/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:./freeRTOS/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:./freeRTOS/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:./freeRTOS/tasks.c **** 			be the running state task. */
3783:./freeRTOS/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:./freeRTOS/tasks.c **** 
3785:./freeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:./freeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:./freeRTOS/tasks.c **** 
3788:./freeRTOS/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:./freeRTOS/tasks.c **** 			task? */
3790:./freeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:./freeRTOS/tasks.c **** 			{
3792:./freeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:./freeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:./freeRTOS/tasks.c **** 				{
3795:./freeRTOS/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:./freeRTOS/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:./freeRTOS/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:./freeRTOS/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:./freeRTOS/tasks.c **** 					the	holding task from the ready	list. */
3800:./freeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:./freeRTOS/tasks.c **** 					{
3802:./freeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:./freeRTOS/tasks.c **** 					}
3804:./freeRTOS/tasks.c **** 					else
3805:./freeRTOS/tasks.c **** 					{
3806:./freeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:./freeRTOS/tasks.c **** 					}
3808:./freeRTOS/tasks.c **** 
3809:./freeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:./freeRTOS/tasks.c **** 					new	ready list. */
3811:./freeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:./freeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:./freeRTOS/tasks.c **** 
3814:./freeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:./freeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3816:./freeRTOS/tasks.c **** 					running to give back the mutex. */
3817:./freeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:./freeRTOS/tasks.c **** 
3820:./freeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:./freeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
3822:./freeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:./freeRTOS/tasks.c **** 					in an order different to that in which they were taken.
3824:./freeRTOS/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:./freeRTOS/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:./freeRTOS/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:./freeRTOS/tasks.c **** 					a task is waiting on it or not. */
3828:./freeRTOS/tasks.c **** 					xReturn = pdTRUE;
3829:./freeRTOS/tasks.c **** 				}
3830:./freeRTOS/tasks.c **** 				else
3831:./freeRTOS/tasks.c **** 				{
3832:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:./freeRTOS/tasks.c **** 				}
3834:./freeRTOS/tasks.c **** 			}
ARM GAS  /tmp/cckkLGmm.s 			page 82


3835:./freeRTOS/tasks.c **** 			else
3836:./freeRTOS/tasks.c **** 			{
3837:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:./freeRTOS/tasks.c **** 			}
3839:./freeRTOS/tasks.c **** 		}
3840:./freeRTOS/tasks.c **** 		else
3841:./freeRTOS/tasks.c **** 		{
3842:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:./freeRTOS/tasks.c **** 		}
3844:./freeRTOS/tasks.c **** 
3845:./freeRTOS/tasks.c **** 		return xReturn;
3846:./freeRTOS/tasks.c **** 	}
3847:./freeRTOS/tasks.c **** 
3848:./freeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3849:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3850:./freeRTOS/tasks.c **** 
3851:./freeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:./freeRTOS/tasks.c **** 
3853:./freeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
3854:./freeRTOS/tasks.c **** 	{
3855:./freeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:./freeRTOS/tasks.c **** 
3857:./freeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:./freeRTOS/tasks.c **** 		{
3859:./freeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:./freeRTOS/tasks.c **** 
3861:./freeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:./freeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:./freeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:./freeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:./freeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:./freeRTOS/tasks.c **** 			critical section. */
3867:./freeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:./freeRTOS/tasks.c **** 			{
3869:./freeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:./freeRTOS/tasks.c **** 			}
3871:./freeRTOS/tasks.c **** 		}
3872:./freeRTOS/tasks.c **** 		else
3873:./freeRTOS/tasks.c **** 		{
3874:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:./freeRTOS/tasks.c **** 		}
3876:./freeRTOS/tasks.c **** 	}
3877:./freeRTOS/tasks.c **** 
3878:./freeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3880:./freeRTOS/tasks.c **** 
3881:./freeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:./freeRTOS/tasks.c **** 
3883:./freeRTOS/tasks.c **** 	void vTaskExitCritical( void )
3884:./freeRTOS/tasks.c **** 	{
3885:./freeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:./freeRTOS/tasks.c **** 		{
3887:./freeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:./freeRTOS/tasks.c **** 			{
3889:./freeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:./freeRTOS/tasks.c **** 
3891:./freeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
ARM GAS  /tmp/cckkLGmm.s 			page 83


3892:./freeRTOS/tasks.c **** 				{
3893:./freeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
3894:./freeRTOS/tasks.c **** 				}
3895:./freeRTOS/tasks.c **** 				else
3896:./freeRTOS/tasks.c **** 				{
3897:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:./freeRTOS/tasks.c **** 				}
3899:./freeRTOS/tasks.c **** 			}
3900:./freeRTOS/tasks.c **** 			else
3901:./freeRTOS/tasks.c **** 			{
3902:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:./freeRTOS/tasks.c **** 			}
3904:./freeRTOS/tasks.c **** 		}
3905:./freeRTOS/tasks.c **** 		else
3906:./freeRTOS/tasks.c **** 		{
3907:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:./freeRTOS/tasks.c **** 		}
3909:./freeRTOS/tasks.c **** 	}
3910:./freeRTOS/tasks.c **** 
3911:./freeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3913:./freeRTOS/tasks.c **** 
3914:./freeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:./freeRTOS/tasks.c **** 
3916:./freeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:./freeRTOS/tasks.c **** 	{
3918:./freeRTOS/tasks.c **** 	size_t x;
3919:./freeRTOS/tasks.c **** 
3920:./freeRTOS/tasks.c **** 		/* Start by copying the entire string. */
3921:./freeRTOS/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:./freeRTOS/tasks.c **** 
3923:./freeRTOS/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:./freeRTOS/tasks.c **** 		printed out. */
3925:./freeRTOS/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:./freeRTOS/tasks.c **** 		{
3927:./freeRTOS/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:./freeRTOS/tasks.c **** 		}
3929:./freeRTOS/tasks.c **** 
3930:./freeRTOS/tasks.c **** 		/* Terminate. */
3931:./freeRTOS/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:./freeRTOS/tasks.c **** 
3933:./freeRTOS/tasks.c **** 		/* Return the new end of string. */
3934:./freeRTOS/tasks.c **** 		return &( pcBuffer[ x ] );
3935:./freeRTOS/tasks.c **** 	}
3936:./freeRTOS/tasks.c **** 
3937:./freeRTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3939:./freeRTOS/tasks.c **** 
3940:./freeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:./freeRTOS/tasks.c **** 
3942:./freeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:./freeRTOS/tasks.c **** 	{
3944:./freeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:./freeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:./freeRTOS/tasks.c **** 	char cStatus;
3947:./freeRTOS/tasks.c **** 
3948:./freeRTOS/tasks.c **** 		/*
ARM GAS  /tmp/cckkLGmm.s 			page 84


3949:./freeRTOS/tasks.c **** 		 * PLEASE NOTE:
3950:./freeRTOS/tasks.c **** 		 *
3951:./freeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:./freeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:./freeRTOS/tasks.c **** 		 * scheduler.
3954:./freeRTOS/tasks.c **** 		 *
3955:./freeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:./freeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:./freeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
3958:./freeRTOS/tasks.c **** 		 *
3959:./freeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:./freeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:./freeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:./freeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:./freeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:./freeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:./freeRTOS/tasks.c **** 		 * snprintf() implementation!).
3966:./freeRTOS/tasks.c **** 		 *
3967:./freeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:./freeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:./freeRTOS/tasks.c **** 		 * through a call to vTaskList().
3970:./freeRTOS/tasks.c **** 		 */
3971:./freeRTOS/tasks.c **** 
3972:./freeRTOS/tasks.c **** 
3973:./freeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:./freeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:./freeRTOS/tasks.c **** 
3976:./freeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:./freeRTOS/tasks.c **** 		function is executing. */
3978:./freeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:./freeRTOS/tasks.c **** 
3980:./freeRTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:./freeRTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:./freeRTOS/tasks.c **** 		equate to NULL. */
3983:./freeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:./freeRTOS/tasks.c **** 
3985:./freeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:./freeRTOS/tasks.c **** 		{
3987:./freeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3988:./freeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:./freeRTOS/tasks.c **** 
3990:./freeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:./freeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:./freeRTOS/tasks.c **** 			{
3993:./freeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:./freeRTOS/tasks.c **** 				{
3995:./freeRTOS/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:./freeRTOS/tasks.c **** 										break;
3997:./freeRTOS/tasks.c **** 
3998:./freeRTOS/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:./freeRTOS/tasks.c **** 										break;
4000:./freeRTOS/tasks.c **** 
4001:./freeRTOS/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:./freeRTOS/tasks.c **** 										break;
4003:./freeRTOS/tasks.c **** 
4004:./freeRTOS/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:./freeRTOS/tasks.c **** 										break;
ARM GAS  /tmp/cckkLGmm.s 			page 85


4006:./freeRTOS/tasks.c **** 
4007:./freeRTOS/tasks.c **** 					default:			/* Should not get here, but it is included
4008:./freeRTOS/tasks.c **** 										to prevent static checking errors. */
4009:./freeRTOS/tasks.c **** 										cStatus = 0x00;
4010:./freeRTOS/tasks.c **** 										break;
4011:./freeRTOS/tasks.c **** 				}
4012:./freeRTOS/tasks.c **** 
4013:./freeRTOS/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:./freeRTOS/tasks.c **** 				can be printed in tabular form more easily. */
4015:./freeRTOS/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:./freeRTOS/tasks.c **** 
4017:./freeRTOS/tasks.c **** 				/* Write the rest of the string. */
4018:./freeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:./freeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:./freeRTOS/tasks.c **** 			}
4021:./freeRTOS/tasks.c **** 
4022:./freeRTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:./freeRTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:./freeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:./freeRTOS/tasks.c **** 		}
4026:./freeRTOS/tasks.c **** 		else
4027:./freeRTOS/tasks.c **** 		{
4028:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:./freeRTOS/tasks.c **** 		}
4030:./freeRTOS/tasks.c **** 	}
4031:./freeRTOS/tasks.c **** 
4032:./freeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:./freeRTOS/tasks.c **** /*----------------------------------------------------------*/
4034:./freeRTOS/tasks.c **** 
4035:./freeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:./freeRTOS/tasks.c **** 
4037:./freeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:./freeRTOS/tasks.c **** 	{
4039:./freeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:./freeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:./freeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:./freeRTOS/tasks.c **** 
4043:./freeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:./freeRTOS/tasks.c **** 		{
4045:./freeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:./freeRTOS/tasks.c **** 		}
4047:./freeRTOS/tasks.c **** 		#endif
4048:./freeRTOS/tasks.c **** 
4049:./freeRTOS/tasks.c **** 		/*
4050:./freeRTOS/tasks.c **** 		 * PLEASE NOTE:
4051:./freeRTOS/tasks.c **** 		 *
4052:./freeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:./freeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:./freeRTOS/tasks.c **** 		 * scheduler.
4055:./freeRTOS/tasks.c **** 		 *
4056:./freeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:./freeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:./freeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:./freeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
4060:./freeRTOS/tasks.c **** 		 *
4061:./freeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:./freeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
ARM GAS  /tmp/cckkLGmm.s 			page 86


4063:./freeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:./freeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:./freeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:./freeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:./freeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
4068:./freeRTOS/tasks.c **** 		 *
4069:./freeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:./freeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:./freeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:./freeRTOS/tasks.c **** 		 */
4073:./freeRTOS/tasks.c **** 
4074:./freeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:./freeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:./freeRTOS/tasks.c **** 
4077:./freeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:./freeRTOS/tasks.c **** 		function is executing. */
4079:./freeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:./freeRTOS/tasks.c **** 
4081:./freeRTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:./freeRTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:./freeRTOS/tasks.c **** 		equate to NULL. */
4084:./freeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:./freeRTOS/tasks.c **** 
4086:./freeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:./freeRTOS/tasks.c **** 		{
4088:./freeRTOS/tasks.c **** 			/* Generate the (binary) data. */
4089:./freeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:./freeRTOS/tasks.c **** 
4091:./freeRTOS/tasks.c **** 			/* For percentage calculations. */
4092:./freeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
4093:./freeRTOS/tasks.c **** 
4094:./freeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
4095:./freeRTOS/tasks.c **** 			if( ulTotalTime > 0 )
4096:./freeRTOS/tasks.c **** 			{
4097:./freeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:./freeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:./freeRTOS/tasks.c **** 				{
4100:./freeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:./freeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:./freeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:./freeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:./freeRTOS/tasks.c **** 
4105:./freeRTOS/tasks.c **** 					/* Write the task name to the string, padding with
4106:./freeRTOS/tasks.c **** 					spaces so it can be printed in tabular form more
4107:./freeRTOS/tasks.c **** 					easily. */
4108:./freeRTOS/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:./freeRTOS/tasks.c **** 
4110:./freeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:./freeRTOS/tasks.c **** 					{
4112:./freeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:./freeRTOS/tasks.c **** 						{
4114:./freeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:./freeRTOS/tasks.c **** 						}
4116:./freeRTOS/tasks.c **** 						#else
4117:./freeRTOS/tasks.c **** 						{
4118:./freeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:./freeRTOS/tasks.c **** 							printf() library can be used. */
ARM GAS  /tmp/cckkLGmm.s 			page 87


4120:./freeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:./freeRTOS/tasks.c **** 						}
4122:./freeRTOS/tasks.c **** 						#endif
4123:./freeRTOS/tasks.c **** 					}
4124:./freeRTOS/tasks.c **** 					else
4125:./freeRTOS/tasks.c **** 					{
4126:./freeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
4127:./freeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
4128:./freeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:./freeRTOS/tasks.c **** 						{
4130:./freeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:./freeRTOS/tasks.c **** 						}
4132:./freeRTOS/tasks.c **** 						#else
4133:./freeRTOS/tasks.c **** 						{
4134:./freeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:./freeRTOS/tasks.c **** 							printf() library can be used. */
4136:./freeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:./freeRTOS/tasks.c **** 						}
4138:./freeRTOS/tasks.c **** 						#endif
4139:./freeRTOS/tasks.c **** 					}
4140:./freeRTOS/tasks.c **** 
4141:./freeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:./freeRTOS/tasks.c **** 				}
4143:./freeRTOS/tasks.c **** 			}
4144:./freeRTOS/tasks.c **** 			else
4145:./freeRTOS/tasks.c **** 			{
4146:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:./freeRTOS/tasks.c **** 			}
4148:./freeRTOS/tasks.c **** 
4149:./freeRTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:./freeRTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:./freeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:./freeRTOS/tasks.c **** 		}
4153:./freeRTOS/tasks.c **** 		else
4154:./freeRTOS/tasks.c **** 		{
4155:./freeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:./freeRTOS/tasks.c **** 		}
4157:./freeRTOS/tasks.c **** 	}
4158:./freeRTOS/tasks.c **** 
4159:./freeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4161:./freeRTOS/tasks.c **** 
4162:./freeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:./freeRTOS/tasks.c **** {
4164:./freeRTOS/tasks.c **** TickType_t uxReturn;
4165:./freeRTOS/tasks.c **** 
4166:./freeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:./freeRTOS/tasks.c **** 
4168:./freeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:./freeRTOS/tasks.c **** 	queues and semaphores. */
4170:./freeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:./freeRTOS/tasks.c **** 
4172:./freeRTOS/tasks.c **** 	return uxReturn;
4173:./freeRTOS/tasks.c **** }
4174:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4175:./freeRTOS/tasks.c **** 
4176:./freeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
ARM GAS  /tmp/cckkLGmm.s 			page 88


4177:./freeRTOS/tasks.c **** 
4178:./freeRTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:./freeRTOS/tasks.c **** 	{
4180:./freeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:./freeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:./freeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:./freeRTOS/tasks.c **** 		{
4184:./freeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:./freeRTOS/tasks.c **** 		}
4186:./freeRTOS/tasks.c **** 
4187:./freeRTOS/tasks.c **** 		return pxCurrentTCB;
4188:./freeRTOS/tasks.c **** 	}
4189:./freeRTOS/tasks.c **** 
4190:./freeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4191:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4192:./freeRTOS/tasks.c **** 
4193:./freeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:./freeRTOS/tasks.c **** 
4195:./freeRTOS/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:./freeRTOS/tasks.c **** 	{
4197:./freeRTOS/tasks.c **** 	uint32_t ulReturn;
4198:./freeRTOS/tasks.c **** 
4199:./freeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4200:./freeRTOS/tasks.c **** 		{
4201:./freeRTOS/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:./freeRTOS/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:./freeRTOS/tasks.c **** 			{
4204:./freeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:./freeRTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:./freeRTOS/tasks.c **** 
4207:./freeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:./freeRTOS/tasks.c **** 				{
4209:./freeRTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:./freeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:./freeRTOS/tasks.c **** 
4212:./freeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:./freeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4214:./freeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4215:./freeRTOS/tasks.c **** 					application code should ever do. */
4216:./freeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
4217:./freeRTOS/tasks.c **** 				}
4218:./freeRTOS/tasks.c **** 				else
4219:./freeRTOS/tasks.c **** 				{
4220:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:./freeRTOS/tasks.c **** 				}
4222:./freeRTOS/tasks.c **** 			}
4223:./freeRTOS/tasks.c **** 			else
4224:./freeRTOS/tasks.c **** 			{
4225:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:./freeRTOS/tasks.c **** 			}
4227:./freeRTOS/tasks.c **** 		}
4228:./freeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4229:./freeRTOS/tasks.c **** 
4230:./freeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4231:./freeRTOS/tasks.c **** 		{
4232:./freeRTOS/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:./freeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
ARM GAS  /tmp/cckkLGmm.s 			page 89


4234:./freeRTOS/tasks.c **** 
4235:./freeRTOS/tasks.c **** 			if( ulReturn != 0UL )
4236:./freeRTOS/tasks.c **** 			{
4237:./freeRTOS/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:./freeRTOS/tasks.c **** 				{
4239:./freeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:./freeRTOS/tasks.c **** 				}
4241:./freeRTOS/tasks.c **** 				else
4242:./freeRTOS/tasks.c **** 				{
4243:./freeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:./freeRTOS/tasks.c **** 				}
4245:./freeRTOS/tasks.c **** 			}
4246:./freeRTOS/tasks.c **** 			else
4247:./freeRTOS/tasks.c **** 			{
4248:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:./freeRTOS/tasks.c **** 			}
4250:./freeRTOS/tasks.c **** 
4251:./freeRTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:./freeRTOS/tasks.c **** 		}
4253:./freeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4254:./freeRTOS/tasks.c **** 
4255:./freeRTOS/tasks.c **** 		return ulReturn;
4256:./freeRTOS/tasks.c **** 	}
4257:./freeRTOS/tasks.c **** 
4258:./freeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4260:./freeRTOS/tasks.c **** 
4261:./freeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:./freeRTOS/tasks.c **** 
4263:./freeRTOS/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:./freeRTOS/tasks.c **** 	{
4265:./freeRTOS/tasks.c **** 	BaseType_t xReturn;
4266:./freeRTOS/tasks.c **** 
4267:./freeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4268:./freeRTOS/tasks.c **** 		{
4269:./freeRTOS/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:./freeRTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:./freeRTOS/tasks.c **** 			{
4272:./freeRTOS/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:./freeRTOS/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:./freeRTOS/tasks.c **** 				clear the value to zero. */
4275:./freeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:./freeRTOS/tasks.c **** 
4277:./freeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:./freeRTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:./freeRTOS/tasks.c **** 
4280:./freeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:./freeRTOS/tasks.c **** 				{
4282:./freeRTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:./freeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:./freeRTOS/tasks.c **** 
4285:./freeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:./freeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4287:./freeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4288:./freeRTOS/tasks.c **** 					application code should ever do. */
4289:./freeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
4290:./freeRTOS/tasks.c **** 				}
ARM GAS  /tmp/cckkLGmm.s 			page 90


4291:./freeRTOS/tasks.c **** 				else
4292:./freeRTOS/tasks.c **** 				{
4293:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:./freeRTOS/tasks.c **** 				}
4295:./freeRTOS/tasks.c **** 			}
4296:./freeRTOS/tasks.c **** 			else
4297:./freeRTOS/tasks.c **** 			{
4298:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:./freeRTOS/tasks.c **** 			}
4300:./freeRTOS/tasks.c **** 		}
4301:./freeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4302:./freeRTOS/tasks.c **** 
4303:./freeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4304:./freeRTOS/tasks.c **** 		{
4305:./freeRTOS/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:./freeRTOS/tasks.c **** 
4307:./freeRTOS/tasks.c **** 			if( pulNotificationValue != NULL )
4308:./freeRTOS/tasks.c **** 			{
4309:./freeRTOS/tasks.c **** 				/* Output the current notification value, which may or may not
4310:./freeRTOS/tasks.c **** 				have changed. */
4311:./freeRTOS/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:./freeRTOS/tasks.c **** 			}
4313:./freeRTOS/tasks.c **** 
4314:./freeRTOS/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:./freeRTOS/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:./freeRTOS/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:./freeRTOS/tasks.c **** 			unblocked because of a timeout. */
4318:./freeRTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:./freeRTOS/tasks.c **** 			{
4320:./freeRTOS/tasks.c **** 				/* A notification was not received. */
4321:./freeRTOS/tasks.c **** 				xReturn = pdFALSE;
4322:./freeRTOS/tasks.c **** 			}
4323:./freeRTOS/tasks.c **** 			else
4324:./freeRTOS/tasks.c **** 			{
4325:./freeRTOS/tasks.c **** 				/* A notification was already pending or a notification was
4326:./freeRTOS/tasks.c **** 				received while the task was waiting. */
4327:./freeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:./freeRTOS/tasks.c **** 				xReturn = pdTRUE;
4329:./freeRTOS/tasks.c **** 			}
4330:./freeRTOS/tasks.c **** 
4331:./freeRTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:./freeRTOS/tasks.c **** 		}
4333:./freeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4334:./freeRTOS/tasks.c **** 
4335:./freeRTOS/tasks.c **** 		return xReturn;
4336:./freeRTOS/tasks.c **** 	}
4337:./freeRTOS/tasks.c **** 
4338:./freeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4340:./freeRTOS/tasks.c **** 
4341:./freeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:./freeRTOS/tasks.c **** 
4343:./freeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:./freeRTOS/tasks.c **** 	{
4345:./freeRTOS/tasks.c **** 	TCB_t * pxTCB;
4346:./freeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:./freeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
ARM GAS  /tmp/cckkLGmm.s 			page 91


4348:./freeRTOS/tasks.c **** 
4349:./freeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4350:./freeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:./freeRTOS/tasks.c **** 
4352:./freeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4353:./freeRTOS/tasks.c **** 		{
4354:./freeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:./freeRTOS/tasks.c **** 			{
4356:./freeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:./freeRTOS/tasks.c **** 			}
4358:./freeRTOS/tasks.c **** 
4359:./freeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:./freeRTOS/tasks.c **** 
4361:./freeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:./freeRTOS/tasks.c **** 
4363:./freeRTOS/tasks.c **** 			switch( eAction )
4364:./freeRTOS/tasks.c **** 			{
4365:./freeRTOS/tasks.c **** 				case eSetBits	:
4366:./freeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:./freeRTOS/tasks.c **** 					break;
4368:./freeRTOS/tasks.c **** 
4369:./freeRTOS/tasks.c **** 				case eIncrement	:
4370:./freeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:./freeRTOS/tasks.c **** 					break;
4372:./freeRTOS/tasks.c **** 
4373:./freeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4374:./freeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:./freeRTOS/tasks.c **** 					break;
4376:./freeRTOS/tasks.c **** 
4377:./freeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:./freeRTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:./freeRTOS/tasks.c **** 					{
4380:./freeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:./freeRTOS/tasks.c **** 					}
4382:./freeRTOS/tasks.c **** 					else
4383:./freeRTOS/tasks.c **** 					{
4384:./freeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4385:./freeRTOS/tasks.c **** 						xReturn = pdFAIL;
4386:./freeRTOS/tasks.c **** 					}
4387:./freeRTOS/tasks.c **** 					break;
4388:./freeRTOS/tasks.c **** 
4389:./freeRTOS/tasks.c **** 				case eNoAction:
4390:./freeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4391:./freeRTOS/tasks.c **** 					updated. */
4392:./freeRTOS/tasks.c **** 					break;
4393:./freeRTOS/tasks.c **** 			}
4394:./freeRTOS/tasks.c **** 
4395:./freeRTOS/tasks.c **** 			traceTASK_NOTIFY();
4396:./freeRTOS/tasks.c **** 
4397:./freeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:./freeRTOS/tasks.c **** 			notification then unblock it now. */
4399:./freeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:./freeRTOS/tasks.c **** 			{
4401:./freeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:./freeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:./freeRTOS/tasks.c **** 
4404:./freeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
ARM GAS  /tmp/cckkLGmm.s 			page 92


4405:./freeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:./freeRTOS/tasks.c **** 
4407:./freeRTOS/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:./freeRTOS/tasks.c **** 				{
4409:./freeRTOS/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:./freeRTOS/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:./freeRTOS/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:./freeRTOS/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:./freeRTOS/tasks.c **** 					because it will automatically get reset to a new value when
4414:./freeRTOS/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:./freeRTOS/tasks.c **** 					tickless idling is used it might be more important to enter
4416:./freeRTOS/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:./freeRTOS/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:./freeRTOS/tasks.c **** 					earliest possible time. */
4419:./freeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:./freeRTOS/tasks.c **** 				}
4421:./freeRTOS/tasks.c **** 				#endif
4422:./freeRTOS/tasks.c **** 
4423:./freeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:./freeRTOS/tasks.c **** 				{
4425:./freeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4426:./freeRTOS/tasks.c **** 					executing task so a yield is required. */
4427:./freeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:./freeRTOS/tasks.c **** 				}
4429:./freeRTOS/tasks.c **** 				else
4430:./freeRTOS/tasks.c **** 				{
4431:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:./freeRTOS/tasks.c **** 				}
4433:./freeRTOS/tasks.c **** 			}
4434:./freeRTOS/tasks.c **** 			else
4435:./freeRTOS/tasks.c **** 			{
4436:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:./freeRTOS/tasks.c **** 			}
4438:./freeRTOS/tasks.c **** 		}
4439:./freeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4440:./freeRTOS/tasks.c **** 
4441:./freeRTOS/tasks.c **** 		return xReturn;
4442:./freeRTOS/tasks.c **** 	}
4443:./freeRTOS/tasks.c **** 
4444:./freeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4446:./freeRTOS/tasks.c **** 
4447:./freeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:./freeRTOS/tasks.c **** 
4449:./freeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:./freeRTOS/tasks.c **** 	{
4451:./freeRTOS/tasks.c **** 	TCB_t * pxTCB;
4452:./freeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:./freeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:./freeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:./freeRTOS/tasks.c **** 
4456:./freeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4457:./freeRTOS/tasks.c **** 
4458:./freeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:./freeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:./freeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:./freeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
ARM GAS  /tmp/cckkLGmm.s 			page 93


4462:./freeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:./freeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:./freeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:./freeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:./freeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:./freeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:./freeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:./freeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:./freeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:./freeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:./freeRTOS/tasks.c **** 		provided on the following link:
4473:./freeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:./freeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:./freeRTOS/tasks.c **** 
4476:./freeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:./freeRTOS/tasks.c **** 
4478:./freeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:./freeRTOS/tasks.c **** 		{
4480:./freeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:./freeRTOS/tasks.c **** 			{
4482:./freeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:./freeRTOS/tasks.c **** 			}
4484:./freeRTOS/tasks.c **** 
4485:./freeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:./freeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:./freeRTOS/tasks.c **** 
4488:./freeRTOS/tasks.c **** 			switch( eAction )
4489:./freeRTOS/tasks.c **** 			{
4490:./freeRTOS/tasks.c **** 				case eSetBits	:
4491:./freeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:./freeRTOS/tasks.c **** 					break;
4493:./freeRTOS/tasks.c **** 
4494:./freeRTOS/tasks.c **** 				case eIncrement	:
4495:./freeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:./freeRTOS/tasks.c **** 					break;
4497:./freeRTOS/tasks.c **** 
4498:./freeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4499:./freeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:./freeRTOS/tasks.c **** 					break;
4501:./freeRTOS/tasks.c **** 
4502:./freeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:./freeRTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:./freeRTOS/tasks.c **** 					{
4505:./freeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:./freeRTOS/tasks.c **** 					}
4507:./freeRTOS/tasks.c **** 					else
4508:./freeRTOS/tasks.c **** 					{
4509:./freeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4510:./freeRTOS/tasks.c **** 						xReturn = pdFAIL;
4511:./freeRTOS/tasks.c **** 					}
4512:./freeRTOS/tasks.c **** 					break;
4513:./freeRTOS/tasks.c **** 
4514:./freeRTOS/tasks.c **** 				case eNoAction :
4515:./freeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4516:./freeRTOS/tasks.c **** 					updated. */
4517:./freeRTOS/tasks.c **** 					break;
4518:./freeRTOS/tasks.c **** 			}
ARM GAS  /tmp/cckkLGmm.s 			page 94


4519:./freeRTOS/tasks.c **** 
4520:./freeRTOS/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:./freeRTOS/tasks.c **** 
4522:./freeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:./freeRTOS/tasks.c **** 			notification then unblock it now. */
4524:./freeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:./freeRTOS/tasks.c **** 			{
4526:./freeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4527:./freeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:./freeRTOS/tasks.c **** 
4529:./freeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:./freeRTOS/tasks.c **** 				{
4531:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:./freeRTOS/tasks.c **** 				}
4534:./freeRTOS/tasks.c **** 				else
4535:./freeRTOS/tasks.c **** 				{
4536:./freeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:./freeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:./freeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:./freeRTOS/tasks.c **** 				}
4540:./freeRTOS/tasks.c **** 
4541:./freeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:./freeRTOS/tasks.c **** 				{
4543:./freeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4544:./freeRTOS/tasks.c **** 					executing task so a yield is required. */
4545:./freeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:./freeRTOS/tasks.c **** 					{
4547:./freeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:./freeRTOS/tasks.c **** 					}
4549:./freeRTOS/tasks.c **** 					else
4550:./freeRTOS/tasks.c **** 					{
4551:./freeRTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:./freeRTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:./freeRTOS/tasks.c **** 						safe FreeRTOS function. */
4554:./freeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
4555:./freeRTOS/tasks.c **** 					}
4556:./freeRTOS/tasks.c **** 				}
4557:./freeRTOS/tasks.c **** 				else
4558:./freeRTOS/tasks.c **** 				{
4559:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:./freeRTOS/tasks.c **** 				}
4561:./freeRTOS/tasks.c **** 			}
4562:./freeRTOS/tasks.c **** 		}
4563:./freeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:./freeRTOS/tasks.c **** 
4565:./freeRTOS/tasks.c **** 		return xReturn;
4566:./freeRTOS/tasks.c **** 	}
4567:./freeRTOS/tasks.c **** 
4568:./freeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4570:./freeRTOS/tasks.c **** 
4571:./freeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:./freeRTOS/tasks.c **** 
4573:./freeRTOS/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:./freeRTOS/tasks.c **** 	{
4575:./freeRTOS/tasks.c **** 	TCB_t * pxTCB;
ARM GAS  /tmp/cckkLGmm.s 			page 95


4576:./freeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:./freeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:./freeRTOS/tasks.c **** 
4579:./freeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4580:./freeRTOS/tasks.c **** 
4581:./freeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:./freeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:./freeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:./freeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:./freeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:./freeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:./freeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:./freeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:./freeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:./freeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:./freeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:./freeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:./freeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:./freeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:./freeRTOS/tasks.c **** 		provided on the following link:
4596:./freeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:./freeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:./freeRTOS/tasks.c **** 
4599:./freeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:./freeRTOS/tasks.c **** 
4601:./freeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:./freeRTOS/tasks.c **** 		{
4603:./freeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:./freeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:./freeRTOS/tasks.c **** 
4606:./freeRTOS/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:./freeRTOS/tasks.c **** 			semaphore. */
4608:./freeRTOS/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:./freeRTOS/tasks.c **** 
4610:./freeRTOS/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:./freeRTOS/tasks.c **** 
4612:./freeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:./freeRTOS/tasks.c **** 			notification then unblock it now. */
4614:./freeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:./freeRTOS/tasks.c **** 			{
4616:./freeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4617:./freeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:./freeRTOS/tasks.c **** 
4619:./freeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:./freeRTOS/tasks.c **** 				{
4621:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:./freeRTOS/tasks.c **** 				}
4624:./freeRTOS/tasks.c **** 				else
4625:./freeRTOS/tasks.c **** 				{
4626:./freeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:./freeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:./freeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:./freeRTOS/tasks.c **** 				}
4630:./freeRTOS/tasks.c **** 
4631:./freeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:./freeRTOS/tasks.c **** 				{
ARM GAS  /tmp/cckkLGmm.s 			page 96


4633:./freeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4634:./freeRTOS/tasks.c **** 					executing task so a yield is required. */
4635:./freeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:./freeRTOS/tasks.c **** 					{
4637:./freeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:./freeRTOS/tasks.c **** 					}
4639:./freeRTOS/tasks.c **** 					else
4640:./freeRTOS/tasks.c **** 					{
4641:./freeRTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:./freeRTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:./freeRTOS/tasks.c **** 						safe FreeRTOS function. */
4644:./freeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
4645:./freeRTOS/tasks.c **** 					}
4646:./freeRTOS/tasks.c **** 				}
4647:./freeRTOS/tasks.c **** 				else
4648:./freeRTOS/tasks.c **** 				{
4649:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:./freeRTOS/tasks.c **** 				}
4651:./freeRTOS/tasks.c **** 			}
4652:./freeRTOS/tasks.c **** 		}
4653:./freeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:./freeRTOS/tasks.c **** 	}
4655:./freeRTOS/tasks.c **** 
4656:./freeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:./freeRTOS/tasks.c **** 
4658:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4659:./freeRTOS/tasks.c **** 
4660:./freeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:./freeRTOS/tasks.c **** 
4662:./freeRTOS/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:./freeRTOS/tasks.c **** 	{
4664:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
4665:./freeRTOS/tasks.c **** 	BaseType_t xReturn;
4666:./freeRTOS/tasks.c **** 
4667:./freeRTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:./freeRTOS/tasks.c **** 		its notification state cleared. */
4669:./freeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:./freeRTOS/tasks.c **** 
4671:./freeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4672:./freeRTOS/tasks.c **** 		{
4673:./freeRTOS/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:./freeRTOS/tasks.c **** 			{
4675:./freeRTOS/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:./freeRTOS/tasks.c **** 				xReturn = pdPASS;
4677:./freeRTOS/tasks.c **** 			}
4678:./freeRTOS/tasks.c **** 			else
4679:./freeRTOS/tasks.c **** 			{
4680:./freeRTOS/tasks.c **** 				xReturn = pdFAIL;
4681:./freeRTOS/tasks.c **** 			}
4682:./freeRTOS/tasks.c **** 		}
4683:./freeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4684:./freeRTOS/tasks.c **** 
4685:./freeRTOS/tasks.c **** 		return xReturn;
4686:./freeRTOS/tasks.c **** 	}
4687:./freeRTOS/tasks.c **** 
4688:./freeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cckkLGmm.s 			page 97


4690:./freeRTOS/tasks.c **** 
4691:./freeRTOS/tasks.c **** 
4692:./freeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:./freeRTOS/tasks.c **** {
 650              		.loc 1 4693 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654              		.loc 1 4693 1 is_stmt 0 view .LVU193
 655 0000 70B5     		push	{r4, r5, r6, lr}
 656              	.LCFI4:
 657              		.cfi_def_cfa_offset 16
 658              		.cfi_offset 4, -16
 659              		.cfi_offset 5, -12
 660              		.cfi_offset 6, -8
 661              		.cfi_offset 14, -4
 662 0002 0446     		mov	r4, r0
 663 0004 0D46     		mov	r5, r1
4694:./freeRTOS/tasks.c **** TickType_t xTimeToWake;
 664              		.loc 1 4694 1 is_stmt 1 view .LVU194
4695:./freeRTOS/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 665              		.loc 1 4695 1 view .LVU195
 666              		.loc 1 4695 18 is_stmt 0 view .LVU196
 667 0006 1D4B     		ldr	r3, .L49
 668 0008 1E68     		ldr	r6, [r3]
 669              	.LVL52:
4696:./freeRTOS/tasks.c **** 
4697:./freeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:./freeRTOS/tasks.c **** 	{
4699:./freeRTOS/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:./freeRTOS/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:./freeRTOS/tasks.c **** 		when the task leaves the Blocked state. */
4702:./freeRTOS/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:./freeRTOS/tasks.c **** 	}
4704:./freeRTOS/tasks.c **** 	#endif
4705:./freeRTOS/tasks.c **** 
4706:./freeRTOS/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:./freeRTOS/tasks.c **** 	as the same list item is used for both lists. */
4708:./freeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 670              		.loc 1 4708 2 is_stmt 1 view .LVU197
 671              		.loc 1 4708 35 is_stmt 0 view .LVU198
 672 000a 1D4B     		ldr	r3, .L49+4
 673 000c 1868     		ldr	r0, [r3]
 674              	.LVL53:
 675              		.loc 1 4708 6 view .LVU199
 676 000e 0430     		adds	r0, r0, #4
 677 0010 FFF7FEFF 		bl	uxListRemove
 678              	.LVL54:
 679              		.loc 1 4708 4 view .LVU200
 680 0014 50B9     		cbnz	r0, .L43
4709:./freeRTOS/tasks.c **** 	{
4710:./freeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:./freeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:./freeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 681              		.loc 1 4712 3 is_stmt 1 view .LVU201
 682 0016 1A4B     		ldr	r3, .L49+4
 683 0018 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cckkLGmm.s 			page 98


 684 001a DA6A     		ldr	r2, [r3, #44]
 685 001c 0123     		movs	r3, #1
 686 001e 03FA02F2 		lsl	r2, r3, r2
 687 0022 1849     		ldr	r1, .L49+8
 688 0024 0B68     		ldr	r3, [r1]
 689 0026 23EA0203 		bic	r3, r3, r2
 690 002a 0B60     		str	r3, [r1]
 691              	.L43:
4713:./freeRTOS/tasks.c **** 	}
4714:./freeRTOS/tasks.c **** 	else
4715:./freeRTOS/tasks.c **** 	{
4716:./freeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 692              		.loc 1 4716 27 view .LVU202
4717:./freeRTOS/tasks.c **** 	}
4718:./freeRTOS/tasks.c **** 
4719:./freeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:./freeRTOS/tasks.c **** 	{
4721:./freeRTOS/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 693              		.loc 1 4721 3 view .LVU203
 694              		.loc 1 4721 5 is_stmt 0 view .LVU204
 695 002c B4F1FF3F 		cmp	r4, #-1
 696 0030 0DD0     		beq	.L48
 697              	.L44:
4722:./freeRTOS/tasks.c **** 		{
4723:./freeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:./freeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:./freeRTOS/tasks.c **** 			indefinitely. */
4726:./freeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4727:./freeRTOS/tasks.c **** 		}
4728:./freeRTOS/tasks.c **** 		else
4729:./freeRTOS/tasks.c **** 		{
4730:./freeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:./freeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:./freeRTOS/tasks.c **** 			kernel will manage it correctly. */
4733:./freeRTOS/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 698              		.loc 1 4733 4 is_stmt 1 view .LVU205
 699              		.loc 1 4733 16 is_stmt 0 view .LVU206
 700 0032 3444     		add	r4, r4, r6
 701              	.LVL55:
4734:./freeRTOS/tasks.c **** 
4735:./freeRTOS/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:./freeRTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 702              		.loc 1 4736 4 is_stmt 1 view .LVU207
 703 0034 124B     		ldr	r3, .L49+4
 704 0036 1B68     		ldr	r3, [r3]
 705 0038 5C60     		str	r4, [r3, #4]
4737:./freeRTOS/tasks.c **** 
4738:./freeRTOS/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 706              		.loc 1 4738 4 view .LVU208
 707              		.loc 1 4738 6 is_stmt 0 view .LVU209
 708 003a A642     		cmp	r6, r4
 709 003c 10D9     		bls	.L46
4739:./freeRTOS/tasks.c **** 			{
4740:./freeRTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:./freeRTOS/tasks.c **** 				list. */
4742:./freeRTOS/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 710              		.loc 1 4742 5 is_stmt 1 view .LVU210
ARM GAS  /tmp/cckkLGmm.s 			page 99


 711 003e 124B     		ldr	r3, .L49+12
 712 0040 1868     		ldr	r0, [r3]
 713              		.loc 1 4742 60 is_stmt 0 view .LVU211
 714 0042 0F4B     		ldr	r3, .L49+4
 715 0044 1968     		ldr	r1, [r3]
 716              		.loc 1 4742 5 view .LVU212
 717 0046 0431     		adds	r1, r1, #4
 718 0048 FFF7FEFF 		bl	vListInsert
 719              	.LVL56:
 720              	.L42:
4743:./freeRTOS/tasks.c **** 			}
4744:./freeRTOS/tasks.c **** 			else
4745:./freeRTOS/tasks.c **** 			{
4746:./freeRTOS/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:./freeRTOS/tasks.c **** 				is used. */
4748:./freeRTOS/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4749:./freeRTOS/tasks.c **** 
4750:./freeRTOS/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:./freeRTOS/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:./freeRTOS/tasks.c **** 				needs to be updated too. */
4753:./freeRTOS/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
4754:./freeRTOS/tasks.c **** 				{
4755:./freeRTOS/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
4756:./freeRTOS/tasks.c **** 				}
4757:./freeRTOS/tasks.c **** 				else
4758:./freeRTOS/tasks.c **** 				{
4759:./freeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:./freeRTOS/tasks.c **** 				}
4761:./freeRTOS/tasks.c **** 			}
4762:./freeRTOS/tasks.c **** 		}
4763:./freeRTOS/tasks.c **** 	}
4764:./freeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:./freeRTOS/tasks.c **** 	{
4766:./freeRTOS/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:./freeRTOS/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:./freeRTOS/tasks.c **** 		will manage it correctly. */
4769:./freeRTOS/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:./freeRTOS/tasks.c **** 
4771:./freeRTOS/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:./freeRTOS/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:./freeRTOS/tasks.c **** 
4774:./freeRTOS/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:./freeRTOS/tasks.c **** 		{
4776:./freeRTOS/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:./freeRTOS/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:./freeRTOS/tasks.c **** 		}
4779:./freeRTOS/tasks.c **** 		else
4780:./freeRTOS/tasks.c **** 		{
4781:./freeRTOS/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:./freeRTOS/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:./freeRTOS/tasks.c **** 
4784:./freeRTOS/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:./freeRTOS/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:./freeRTOS/tasks.c **** 			too. */
4787:./freeRTOS/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:./freeRTOS/tasks.c **** 			{
4789:./freeRTOS/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
ARM GAS  /tmp/cckkLGmm.s 			page 100


4790:./freeRTOS/tasks.c **** 			}
4791:./freeRTOS/tasks.c **** 			else
4792:./freeRTOS/tasks.c **** 			{
4793:./freeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:./freeRTOS/tasks.c **** 			}
4795:./freeRTOS/tasks.c **** 		}
4796:./freeRTOS/tasks.c **** 
4797:./freeRTOS/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:./freeRTOS/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:./freeRTOS/tasks.c **** 	}
4800:./freeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:./freeRTOS/tasks.c **** }
 721              		.loc 1 4801 1 view .LVU213
 722 004c 70BD     		pop	{r4, r5, r6, pc}
 723              	.LVL57:
 724              	.L48:
4721:./freeRTOS/tasks.c **** 		{
 725              		.loc 1 4721 41 discriminator 1 view .LVU214
 726 004e 002D     		cmp	r5, #0
 727 0050 EFD0     		beq	.L44
4726:./freeRTOS/tasks.c **** 		}
 728              		.loc 1 4726 4 is_stmt 1 view .LVU215
4726:./freeRTOS/tasks.c **** 		}
 729              		.loc 1 4726 56 is_stmt 0 view .LVU216
 730 0052 0B4B     		ldr	r3, .L49+4
 731 0054 1968     		ldr	r1, [r3]
4726:./freeRTOS/tasks.c **** 		}
 732              		.loc 1 4726 4 view .LVU217
 733 0056 0431     		adds	r1, r1, #4
 734 0058 0C48     		ldr	r0, .L49+16
 735 005a FFF7FEFF 		bl	vListInsertEnd
 736              	.LVL58:
 737 005e F5E7     		b	.L42
 738              	.LVL59:
 739              	.L46:
4748:./freeRTOS/tasks.c **** 
 740              		.loc 1 4748 5 is_stmt 1 view .LVU218
 741 0060 0B4B     		ldr	r3, .L49+20
 742 0062 1868     		ldr	r0, [r3]
4748:./freeRTOS/tasks.c **** 
 743              		.loc 1 4748 52 is_stmt 0 view .LVU219
 744 0064 064B     		ldr	r3, .L49+4
 745 0066 1968     		ldr	r1, [r3]
4748:./freeRTOS/tasks.c **** 
 746              		.loc 1 4748 5 view .LVU220
 747 0068 0431     		adds	r1, r1, #4
 748 006a FFF7FEFF 		bl	vListInsert
 749              	.LVL60:
4753:./freeRTOS/tasks.c **** 				{
 750              		.loc 1 4753 5 is_stmt 1 view .LVU221
4753:./freeRTOS/tasks.c **** 				{
 751              		.loc 1 4753 21 is_stmt 0 view .LVU222
 752 006e 094B     		ldr	r3, .L49+24
 753 0070 1B68     		ldr	r3, [r3]
4753:./freeRTOS/tasks.c **** 				{
 754              		.loc 1 4753 7 view .LVU223
 755 0072 A342     		cmp	r3, r4
ARM GAS  /tmp/cckkLGmm.s 			page 101


 756 0074 EAD9     		bls	.L42
4755:./freeRTOS/tasks.c **** 				}
 757              		.loc 1 4755 6 is_stmt 1 view .LVU224
4755:./freeRTOS/tasks.c **** 				}
 758              		.loc 1 4755 27 is_stmt 0 view .LVU225
 759 0076 074B     		ldr	r3, .L49+24
 760 0078 1C60     		str	r4, [r3]
4759:./freeRTOS/tasks.c **** 				}
 761              		.loc 1 4759 30 is_stmt 1 view .LVU226
 762              		.loc 1 4801 1 is_stmt 0 view .LVU227
 763 007a E7E7     		b	.L42
 764              	.L50:
 765              		.align	2
 766              	.L49:
 767 007c 00000000 		.word	.LANCHOR14
 768 0080 00000000 		.word	.LANCHOR10
 769 0084 00000000 		.word	.LANCHOR13
 770 0088 00000000 		.word	.LANCHOR8
 771 008c 00000000 		.word	.LANCHOR0
 772 0090 00000000 		.word	.LANCHOR2
 773 0094 00000000 		.word	.LANCHOR3
 774              		.cfi_endproc
 775              	.LFE53:
 777              		.section	.text.xTaskCreate,"ax",%progbits
 778              		.align	1
 779              		.global	xTaskCreate
 780              		.syntax unified
 781              		.thumb
 782              		.thumb_func
 783              		.fpu fpv4-sp-d16
 785              	xTaskCreate:
 786              	.LVL61:
 787              	.LFB5:
 682:./freeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 788              		.loc 1 682 2 is_stmt 1 view -0
 789              		.cfi_startproc
 790              		@ args = 8, pretend = 0, frame = 0
 791              		@ frame_needed = 0, uses_anonymous_args = 0
 682:./freeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 792              		.loc 1 682 2 is_stmt 0 view .LVU229
 793 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 794              	.LCFI5:
 795              		.cfi_def_cfa_offset 28
 796              		.cfi_offset 4, -28
 797              		.cfi_offset 5, -24
 798              		.cfi_offset 6, -20
 799              		.cfi_offset 7, -16
 800              		.cfi_offset 8, -12
 801              		.cfi_offset 9, -8
 802              		.cfi_offset 14, -4
 803 0004 85B0     		sub	sp, sp, #20
 804              	.LCFI6:
 805              		.cfi_def_cfa_offset 48
 806 0006 0746     		mov	r7, r0
 807 0008 8846     		mov	r8, r1
 808 000a 1446     		mov	r4, r2
 809 000c 1E46     		mov	r6, r3
ARM GAS  /tmp/cckkLGmm.s 			page 102


 683:./freeRTOS/tasks.c **** 	BaseType_t xReturn;
 810              		.loc 1 683 2 is_stmt 1 view .LVU230
 684:./freeRTOS/tasks.c **** 
 811              		.loc 1 684 2 view .LVU231
 812              	.LBB26:
 713:./freeRTOS/tasks.c **** 
 813              		.loc 1 713 3 view .LVU232
 716:./freeRTOS/tasks.c **** 
 814              		.loc 1 716 4 view .LVU233
 716:./freeRTOS/tasks.c **** 
 815              		.loc 1 716 32 is_stmt 0 view .LVU234
 816 000e 9000     		lsls	r0, r2, #2
 817              	.LVL62:
 716:./freeRTOS/tasks.c **** 
 818              		.loc 1 716 32 view .LVU235
 819 0010 FFF7FEFF 		bl	pvPortMalloc
 820              	.LVL63:
 718:./freeRTOS/tasks.c **** 			{
 821              		.loc 1 718 4 is_stmt 1 view .LVU236
 718:./freeRTOS/tasks.c **** 			{
 822              		.loc 1 718 6 is_stmt 0 view .LVU237
 823 0014 F0B1     		cbz	r0, .L55
 824 0016 8146     		mov	r9, r0
 721:./freeRTOS/tasks.c **** 
 825              		.loc 1 721 5 is_stmt 1 view .LVU238
 721:./freeRTOS/tasks.c **** 
 826              		.loc 1 721 28 is_stmt 0 view .LVU239
 827 0018 5420     		movs	r0, #84
 828              	.LVL64:
 721:./freeRTOS/tasks.c **** 
 829              		.loc 1 721 28 view .LVU240
 830 001a FFF7FEFF 		bl	pvPortMalloc
 831              	.LVL65:
 723:./freeRTOS/tasks.c **** 				{
 832              		.loc 1 723 5 is_stmt 1 view .LVU241
 723:./freeRTOS/tasks.c **** 				{
 833              		.loc 1 723 7 is_stmt 0 view .LVU242
 834 001e 0546     		mov	r5, r0
 835 0020 A0B1     		cbz	r0, .L53
 726:./freeRTOS/tasks.c **** 				}
 836              		.loc 1 726 6 is_stmt 1 view .LVU243
 726:./freeRTOS/tasks.c **** 				}
 837              		.loc 1 726 24 is_stmt 0 view .LVU244
 838 0022 C0F83090 		str	r9, [r0, #48]
 839              	.LVL66:
 840              	.L54:
 726:./freeRTOS/tasks.c **** 				}
 841              		.loc 1 726 24 view .LVU245
 842              	.LBE26:
 742:./freeRTOS/tasks.c **** 		{
 843              		.loc 1 742 3 is_stmt 1 view .LVU246
 742:./freeRTOS/tasks.c **** 		{
 844              		.loc 1 742 5 is_stmt 0 view .LVU247
 845 0026 D5B1     		cbz	r5, .L56
 752:./freeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 846              		.loc 1 752 4 is_stmt 1 view .LVU248
 847 0028 0023     		movs	r3, #0
ARM GAS  /tmp/cckkLGmm.s 			page 103


 848 002a 0393     		str	r3, [sp, #12]
 849 002c 0295     		str	r5, [sp, #8]
 850 002e 0D9B     		ldr	r3, [sp, #52]
 851 0030 0193     		str	r3, [sp, #4]
 852 0032 0C9B     		ldr	r3, [sp, #48]
 853 0034 0093     		str	r3, [sp]
 854 0036 3346     		mov	r3, r6
 855 0038 2246     		mov	r2, r4
 856 003a 4146     		mov	r1, r8
 857 003c 3846     		mov	r0, r7
 858 003e FFF7FEFF 		bl	prvInitialiseNewTask
 859              	.LVL67:
 753:./freeRTOS/tasks.c **** 			xReturn = pdPASS;
 860              		.loc 1 753 4 view .LVU249
 861 0042 2846     		mov	r0, r5
 862 0044 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 863              	.LVL68:
 754:./freeRTOS/tasks.c **** 		}
 864              		.loc 1 754 4 view .LVU250
 754:./freeRTOS/tasks.c **** 		}
 865              		.loc 1 754 12 is_stmt 0 view .LVU251
 866 0048 0120     		movs	r0, #1
 867 004a 05E0     		b	.L51
 868              	.LVL69:
 869              	.L53:
 870              	.LBB27:
 732:./freeRTOS/tasks.c **** 				}
 871              		.loc 1 732 6 is_stmt 1 view .LVU252
 872 004c 4846     		mov	r0, r9
 873              	.LVL70:
 732:./freeRTOS/tasks.c **** 				}
 874              		.loc 1 732 6 is_stmt 0 view .LVU253
 875 004e FFF7FEFF 		bl	vPortFree
 876              	.LVL71:
 877 0052 E8E7     		b	.L54
 878              	.LVL72:
 879              	.L55:
 732:./freeRTOS/tasks.c **** 				}
 880              		.loc 1 732 6 view .LVU254
 881              	.LBE27:
 758:./freeRTOS/tasks.c **** 		}
 882              		.loc 1 758 12 view .LVU255
 883 0054 4FF0FF30 		mov	r0, #-1
 884              	.LVL73:
 885              	.L51:
 762:./freeRTOS/tasks.c **** 
 886              		.loc 1 762 2 view .LVU256
 887 0058 05B0     		add	sp, sp, #20
 888              	.LCFI7:
 889              		.cfi_remember_state
 890              		.cfi_def_cfa_offset 28
 891              		@ sp needed
 892 005a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 893              	.LVL74:
 894              	.L56:
 895              	.LCFI8:
 896              		.cfi_restore_state
ARM GAS  /tmp/cckkLGmm.s 			page 104


 758:./freeRTOS/tasks.c **** 		}
 897              		.loc 1 758 12 view .LVU257
 898 005e 4FF0FF30 		mov	r0, #-1
 899              	.LVL75:
 761:./freeRTOS/tasks.c **** 	}
 900              		.loc 1 761 3 is_stmt 1 view .LVU258
 761:./freeRTOS/tasks.c **** 	}
 901              		.loc 1 761 10 is_stmt 0 view .LVU259
 902 0062 F9E7     		b	.L51
 903              		.cfi_endproc
 904              	.LFE5:
 906              		.section	.text.vTaskDelete,"ax",%progbits
 907              		.align	1
 908              		.global	vTaskDelete
 909              		.syntax unified
 910              		.thumb
 911              		.thumb_func
 912              		.fpu fpv4-sp-d16
 914              	vTaskDelete:
 915              	.LVL76:
 916              	.LFB8:
1049:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
 917              		.loc 1 1049 2 is_stmt 1 view -0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 0
 920              		@ frame_needed = 0, uses_anonymous_args = 0
1049:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
 921              		.loc 1 1049 2 is_stmt 0 view .LVU261
 922 0000 38B5     		push	{r3, r4, r5, lr}
 923              	.LCFI9:
 924              		.cfi_def_cfa_offset 16
 925              		.cfi_offset 3, -16
 926              		.cfi_offset 4, -12
 927              		.cfi_offset 5, -8
 928              		.cfi_offset 14, -4
 929 0002 0446     		mov	r4, r0
1050:./freeRTOS/tasks.c **** 
 930              		.loc 1 1050 2 is_stmt 1 view .LVU262
1052:./freeRTOS/tasks.c **** 		{
 931              		.loc 1 1052 3 view .LVU263
 932 0004 FFF7FEFF 		bl	vPortEnterCritical
 933              	.LVL77:
1056:./freeRTOS/tasks.c **** 
 934              		.loc 1 1056 4 view .LVU264
1056:./freeRTOS/tasks.c **** 
 935              		.loc 1 1056 12 is_stmt 0 view .LVU265
 936 0008 002C     		cmp	r4, #0
 937 000a 33D0     		beq	.L66
 938              	.LVL78:
 939              	.L59:
1059:./freeRTOS/tasks.c **** 			{
 940              		.loc 1 1059 4 is_stmt 1 discriminator 4 view .LVU266
1059:./freeRTOS/tasks.c **** 			{
 941              		.loc 1 1059 8 is_stmt 0 discriminator 4 view .LVU267
 942 000c 251D     		adds	r5, r4, #4
 943 000e 2846     		mov	r0, r5
 944 0010 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/cckkLGmm.s 			page 105


 945              	.LVL79:
1059:./freeRTOS/tasks.c **** 			{
 946              		.loc 1 1059 6 discriminator 4 view .LVU268
 947 0014 68B9     		cbnz	r0, .L60
1061:./freeRTOS/tasks.c **** 			}
 948              		.loc 1 1061 5 is_stmt 1 view .LVU269
 949 0016 E36A     		ldr	r3, [r4, #44]
 950 0018 03EB8301 		add	r1, r3, r3, lsl #2
 951 001c 214A     		ldr	r2, .L69
 952 001e 52F82120 		ldr	r2, [r2, r1, lsl #2]
 953 0022 32B9     		cbnz	r2, .L60
1061:./freeRTOS/tasks.c **** 			}
 954              		.loc 1 1061 5 discriminator 1 view .LVU270
 955 0024 0122     		movs	r2, #1
 956 0026 9A40     		lsls	r2, r2, r3
 957 0028 1F49     		ldr	r1, .L69+4
 958 002a 0B68     		ldr	r3, [r1]
 959 002c 23EA0203 		bic	r3, r3, r2
 960 0030 0B60     		str	r3, [r1]
 961              	.L60:
1065:./freeRTOS/tasks.c **** 			}
 962              		.loc 1 1065 29 view .LVU271
1069:./freeRTOS/tasks.c **** 			{
 963              		.loc 1 1069 4 view .LVU272
1069:./freeRTOS/tasks.c **** 			{
 964              		.loc 1 1069 8 is_stmt 0 view .LVU273
 965 0032 A36A     		ldr	r3, [r4, #40]
1069:./freeRTOS/tasks.c **** 			{
 966              		.loc 1 1069 6 view .LVU274
 967 0034 1BB1     		cbz	r3, .L61
1071:./freeRTOS/tasks.c **** 			}
 968              		.loc 1 1071 5 is_stmt 1 view .LVU275
1071:./freeRTOS/tasks.c **** 			}
 969              		.loc 1 1071 14 is_stmt 0 view .LVU276
 970 0036 04F11800 		add	r0, r4, #24
 971 003a FFF7FEFF 		bl	uxListRemove
 972              	.LVL80:
 973              	.L61:
1075:./freeRTOS/tasks.c **** 			}
 974              		.loc 1 1075 29 is_stmt 1 view .LVU277
1082:./freeRTOS/tasks.c **** 
 975              		.loc 1 1082 4 view .LVU278
1082:./freeRTOS/tasks.c **** 
 976              		.loc 1 1082 16 is_stmt 0 view .LVU279
 977 003e 1B4A     		ldr	r2, .L69+8
 978 0040 1368     		ldr	r3, [r2]
 979 0042 0133     		adds	r3, r3, #1
 980 0044 1360     		str	r3, [r2]
1084:./freeRTOS/tasks.c **** 			{
 981              		.loc 1 1084 4 is_stmt 1 view .LVU280
1084:./freeRTOS/tasks.c **** 			{
 982              		.loc 1 1084 14 is_stmt 0 view .LVU281
 983 0046 1A4B     		ldr	r3, .L69+12
 984 0048 1B68     		ldr	r3, [r3]
1084:./freeRTOS/tasks.c **** 			{
 985              		.loc 1 1084 6 view .LVU282
 986 004a A342     		cmp	r3, r4
ARM GAS  /tmp/cckkLGmm.s 			page 106


 987 004c 15D0     		beq	.L67
1107:./freeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 988              		.loc 1 1107 5 is_stmt 1 view .LVU283
 989 004e 194A     		ldr	r2, .L69+16
 990 0050 1368     		ldr	r3, [r2]
 991 0052 013B     		subs	r3, r3, #1
 992 0054 1360     		str	r3, [r2]
1108:./freeRTOS/tasks.c **** 
 993              		.loc 1 1108 5 view .LVU284
 994 0056 2046     		mov	r0, r4
 995 0058 FFF7FEFF 		bl	prvDeleteTCB
 996              	.LVL81:
1112:./freeRTOS/tasks.c **** 			}
 997              		.loc 1 1112 5 view .LVU285
 998 005c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 999              	.LVL82:
 1000              	.L63:
1115:./freeRTOS/tasks.c **** 		}
 1001              		.loc 1 1115 29 view .LVU286
1117:./freeRTOS/tasks.c **** 
 1002              		.loc 1 1117 3 view .LVU287
 1003 0060 FFF7FEFF 		bl	vPortExitCritical
 1004              	.LVL83:
1121:./freeRTOS/tasks.c **** 		{
 1005              		.loc 1 1121 3 view .LVU288
1121:./freeRTOS/tasks.c **** 		{
 1006              		.loc 1 1121 25 is_stmt 0 view .LVU289
 1007 0064 144B     		ldr	r3, .L69+20
 1008 0066 1B68     		ldr	r3, [r3]
1121:./freeRTOS/tasks.c **** 		{
 1009              		.loc 1 1121 5 view .LVU290
 1010 0068 1BB1     		cbz	r3, .L58
1123:./freeRTOS/tasks.c **** 			{
 1011              		.loc 1 1123 4 is_stmt 1 view .LVU291
1123:./freeRTOS/tasks.c **** 			{
 1012              		.loc 1 1123 14 is_stmt 0 view .LVU292
 1013 006a 114B     		ldr	r3, .L69+12
 1014 006c 1B68     		ldr	r3, [r3]
1123:./freeRTOS/tasks.c **** 			{
 1015              		.loc 1 1123 6 view .LVU293
 1016 006e A342     		cmp	r3, r4
 1017 0070 0CD0     		beq	.L68
 1018              	.L58:
1133:./freeRTOS/tasks.c **** 
 1019              		.loc 1 1133 2 view .LVU294
 1020 0072 38BD     		pop	{r3, r4, r5, pc}
 1021              	.LVL84:
 1022              	.L66:
1056:./freeRTOS/tasks.c **** 
 1023              		.loc 1 1056 12 discriminator 1 view .LVU295
 1024 0074 0E4B     		ldr	r3, .L69+12
 1025 0076 1C68     		ldr	r4, [r3]
 1026              	.LVL85:
1056:./freeRTOS/tasks.c **** 
 1027              		.loc 1 1056 12 discriminator 1 view .LVU296
 1028 0078 C8E7     		b	.L59
 1029              	.LVL86:
ARM GAS  /tmp/cckkLGmm.s 			page 107


 1030              	.L67:
1091:./freeRTOS/tasks.c **** 
 1031              		.loc 1 1091 5 is_stmt 1 view .LVU297
 1032 007a 2946     		mov	r1, r5
 1033 007c 0F48     		ldr	r0, .L69+24
 1034 007e FFF7FEFF 		bl	vListInsertEnd
 1035              	.LVL87:
1096:./freeRTOS/tasks.c **** 
 1036              		.loc 1 1096 5 view .LVU298
 1037 0082 0F4A     		ldr	r2, .L69+28
 1038 0084 1368     		ldr	r3, [r2]
 1039 0086 0133     		adds	r3, r3, #1
 1040 0088 1360     		str	r3, [r2]
1103:./freeRTOS/tasks.c **** 			}
 1041              		.loc 1 1103 54 view .LVU299
 1042 008a E9E7     		b	.L63
 1043              	.L68:
1125:./freeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1044              		.loc 1 1125 46 view .LVU300
1126:./freeRTOS/tasks.c **** 			}
 1045              		.loc 1 1126 5 view .LVU301
 1046 008c 4FF0E023 		mov	r3, #-536813568
 1047 0090 4FF08052 		mov	r2, #268435456
 1048 0094 C3F8042D 		str	r2, [r3, #3332]
1126:./freeRTOS/tasks.c **** 			}
 1049              		.loc 1 1126 5 view .LVU302
 1050              		.syntax unified
 1051              	@ 1126 "./freeRTOS/tasks.c" 1
 1052 0098 BFF34F8F 		dsb
 1053              	@ 0 "" 2
1126:./freeRTOS/tasks.c **** 			}
 1054              		.loc 1 1126 5 view .LVU303
 1055              	@ 1126 "./freeRTOS/tasks.c" 1
 1056 009c BFF36F8F 		isb
 1057              	@ 0 "" 2
1126:./freeRTOS/tasks.c **** 			}
 1058              		.loc 1 1126 27 view .LVU304
1130:./freeRTOS/tasks.c **** 			}
 1059              		.loc 1 1130 29 view .LVU305
1133:./freeRTOS/tasks.c **** 
 1060              		.loc 1 1133 2 is_stmt 0 view .LVU306
 1061              		.thumb
 1062              		.syntax unified
 1063 00a0 E7E7     		b	.L58
 1064              	.L70:
 1065 00a2 00BF     		.align	2
 1066              	.L69:
 1067 00a4 00000000 		.word	.LANCHOR4
 1068 00a8 00000000 		.word	.LANCHOR13
 1069 00ac 00000000 		.word	.LANCHOR12
 1070 00b0 00000000 		.word	.LANCHOR10
 1071 00b4 00000000 		.word	.LANCHOR9
 1072 00b8 00000000 		.word	.LANCHOR11
 1073 00bc 00000000 		.word	.LANCHOR7
 1074 00c0 00000000 		.word	.LANCHOR15
 1075              		.cfi_endproc
 1076              	.LFE8:
ARM GAS  /tmp/cckkLGmm.s 			page 108


 1078              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1079              		.align	1
 1080              		.global	uxTaskPriorityGet
 1081              		.syntax unified
 1082              		.thumb
 1083              		.thumb_func
 1084              		.fpu fpv4-sp-d16
 1086              	uxTaskPriorityGet:
 1087              	.LVL88:
 1088              	.LFB11:
1341:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1089              		.loc 1 1341 2 is_stmt 1 view -0
 1090              		.cfi_startproc
 1091              		@ args = 0, pretend = 0, frame = 0
 1092              		@ frame_needed = 0, uses_anonymous_args = 0
1341:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1093              		.loc 1 1341 2 is_stmt 0 view .LVU308
 1094 0000 10B5     		push	{r4, lr}
 1095              	.LCFI10:
 1096              		.cfi_def_cfa_offset 8
 1097              		.cfi_offset 4, -8
 1098              		.cfi_offset 14, -4
 1099 0002 0446     		mov	r4, r0
1342:./freeRTOS/tasks.c **** 	UBaseType_t uxReturn;
 1100              		.loc 1 1342 2 is_stmt 1 view .LVU309
1343:./freeRTOS/tasks.c **** 
 1101              		.loc 1 1343 2 view .LVU310
1345:./freeRTOS/tasks.c **** 		{
 1102              		.loc 1 1345 3 view .LVU311
 1103 0004 FFF7FEFF 		bl	vPortEnterCritical
 1104              	.LVL89:
1349:./freeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1105              		.loc 1 1349 4 view .LVU312
1349:./freeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1106              		.loc 1 1349 12 is_stmt 0 view .LVU313
 1107 0008 24B1     		cbz	r4, .L74
 1108              	.LVL90:
 1109              	.L72:
1350:./freeRTOS/tasks.c **** 		}
 1110              		.loc 1 1350 4 is_stmt 1 discriminator 4 view .LVU314
1350:./freeRTOS/tasks.c **** 		}
 1111              		.loc 1 1350 13 is_stmt 0 discriminator 4 view .LVU315
 1112 000a E46A     		ldr	r4, [r4, #44]
 1113              	.LVL91:
1352:./freeRTOS/tasks.c **** 
 1114              		.loc 1 1352 3 is_stmt 1 discriminator 4 view .LVU316
 1115 000c FFF7FEFF 		bl	vPortExitCritical
 1116              	.LVL92:
1354:./freeRTOS/tasks.c **** 	}
 1117              		.loc 1 1354 3 discriminator 4 view .LVU317
1355:./freeRTOS/tasks.c **** 
 1118              		.loc 1 1355 2 is_stmt 0 discriminator 4 view .LVU318
 1119 0010 2046     		mov	r0, r4
 1120 0012 10BD     		pop	{r4, pc}
 1121              	.LVL93:
 1122              	.L74:
1349:./freeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
ARM GAS  /tmp/cckkLGmm.s 			page 109


 1123              		.loc 1 1349 12 discriminator 1 view .LVU319
 1124 0014 014B     		ldr	r3, .L75
 1125 0016 1C68     		ldr	r4, [r3]
 1126              	.LVL94:
1349:./freeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1127              		.loc 1 1349 12 discriminator 1 view .LVU320
 1128 0018 F7E7     		b	.L72
 1129              	.L76:
 1130 001a 00BF     		.align	2
 1131              	.L75:
 1132 001c 00000000 		.word	.LANCHOR10
 1133              		.cfi_endproc
 1134              	.LFE11:
 1136              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1137              		.align	1
 1138              		.global	uxTaskPriorityGetFromISR
 1139              		.syntax unified
 1140              		.thumb
 1141              		.thumb_func
 1142              		.fpu fpv4-sp-d16
 1144              	uxTaskPriorityGetFromISR:
 1145              	.LVL95:
 1146              	.LFB12:
1363:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1147              		.loc 1 1363 2 is_stmt 1 view -0
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 0
 1150              		@ frame_needed = 0, uses_anonymous_args = 0
 1151              		@ link register save eliminated.
1364:./freeRTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
 1152              		.loc 1 1364 2 view .LVU322
1365:./freeRTOS/tasks.c **** 
 1153              		.loc 1 1365 2 view .LVU323
1383:./freeRTOS/tasks.c **** 
 1154              		.loc 1 1383 45 view .LVU324
1385:./freeRTOS/tasks.c **** 		{
 1155              		.loc 1 1385 3 view .LVU325
 1156              	.LBB28:
 1157              	.LBI28:
 1158              		.file 2 "freeRTOS/GCC/portmacro.h"
   1:freeRTOS/GCC/portmacro.h **** /*
   2:freeRTOS/GCC/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:freeRTOS/GCC/portmacro.h ****     All rights reserved
   4:freeRTOS/GCC/portmacro.h **** 
   5:freeRTOS/GCC/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:freeRTOS/GCC/portmacro.h **** 
   7:freeRTOS/GCC/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:freeRTOS/GCC/portmacro.h **** 
   9:freeRTOS/GCC/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:freeRTOS/GCC/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:freeRTOS/GCC/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:freeRTOS/GCC/portmacro.h **** 
  13:freeRTOS/GCC/portmacro.h ****     ***************************************************************************
  14:freeRTOS/GCC/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:freeRTOS/GCC/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:freeRTOS/GCC/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:freeRTOS/GCC/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
ARM GAS  /tmp/cckkLGmm.s 			page 110


  18:freeRTOS/GCC/portmacro.h ****     ***************************************************************************
  19:freeRTOS/GCC/portmacro.h **** 
  20:freeRTOS/GCC/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:freeRTOS/GCC/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:freeRTOS/GCC/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:freeRTOS/GCC/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:freeRTOS/GCC/portmacro.h **** 
  25:freeRTOS/GCC/portmacro.h ****     ***************************************************************************
  26:freeRTOS/GCC/portmacro.h ****      *                                                                       *
  27:freeRTOS/GCC/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:freeRTOS/GCC/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:freeRTOS/GCC/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:freeRTOS/GCC/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:freeRTOS/GCC/portmacro.h ****      *                                                                       *
  32:freeRTOS/GCC/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:freeRTOS/GCC/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:freeRTOS/GCC/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:freeRTOS/GCC/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:freeRTOS/GCC/portmacro.h ****      *                                                                       *
  37:freeRTOS/GCC/portmacro.h ****     ***************************************************************************
  38:freeRTOS/GCC/portmacro.h **** 
  39:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:freeRTOS/GCC/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:freeRTOS/GCC/portmacro.h ****     defined configASSERT()?
  42:freeRTOS/GCC/portmacro.h **** 
  43:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:freeRTOS/GCC/portmacro.h ****     embedded software for free we request you assist our global community by
  45:freeRTOS/GCC/portmacro.h ****     participating in the support forum.
  46:freeRTOS/GCC/portmacro.h **** 
  47:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:freeRTOS/GCC/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:freeRTOS/GCC/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:freeRTOS/GCC/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:freeRTOS/GCC/portmacro.h **** 
  52:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:freeRTOS/GCC/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:freeRTOS/GCC/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:freeRTOS/GCC/portmacro.h **** 
  56:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:freeRTOS/GCC/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:freeRTOS/GCC/portmacro.h **** 
  59:freeRTOS/GCC/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:freeRTOS/GCC/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:freeRTOS/GCC/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:freeRTOS/GCC/portmacro.h **** 
  63:freeRTOS/GCC/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:freeRTOS/GCC/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:freeRTOS/GCC/portmacro.h ****     mission critical applications that require provable dependability.
  66:freeRTOS/GCC/portmacro.h **** 
  67:freeRTOS/GCC/portmacro.h ****     1 tab == 4 spaces!
  68:freeRTOS/GCC/portmacro.h **** */
  69:freeRTOS/GCC/portmacro.h **** 
  70:freeRTOS/GCC/portmacro.h **** 
  71:freeRTOS/GCC/portmacro.h **** #ifndef PORTMACRO_H
  72:freeRTOS/GCC/portmacro.h **** #define PORTMACRO_H
  73:freeRTOS/GCC/portmacro.h **** 
  74:freeRTOS/GCC/portmacro.h **** #ifdef __cplusplus
ARM GAS  /tmp/cckkLGmm.s 			page 111


  75:freeRTOS/GCC/portmacro.h **** extern "C" {
  76:freeRTOS/GCC/portmacro.h **** #endif
  77:freeRTOS/GCC/portmacro.h **** 
  78:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------
  79:freeRTOS/GCC/portmacro.h ****  * Port specific definitions.
  80:freeRTOS/GCC/portmacro.h ****  *
  81:freeRTOS/GCC/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:freeRTOS/GCC/portmacro.h ****  * given hardware and compiler.
  83:freeRTOS/GCC/portmacro.h ****  *
  84:freeRTOS/GCC/portmacro.h ****  * These settings should not be altered.
  85:freeRTOS/GCC/portmacro.h ****  *-----------------------------------------------------------
  86:freeRTOS/GCC/portmacro.h ****  */
  87:freeRTOS/GCC/portmacro.h **** 
  88:freeRTOS/GCC/portmacro.h **** /* Type definitions. */
  89:freeRTOS/GCC/portmacro.h **** #define portCHAR		char
  90:freeRTOS/GCC/portmacro.h **** #define portFLOAT		float
  91:freeRTOS/GCC/portmacro.h **** #define portDOUBLE		double
  92:freeRTOS/GCC/portmacro.h **** #define portLONG		long
  93:freeRTOS/GCC/portmacro.h **** #define portSHORT		short
  94:freeRTOS/GCC/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:freeRTOS/GCC/portmacro.h **** #define portBASE_TYPE	long
  96:freeRTOS/GCC/portmacro.h **** 
  97:freeRTOS/GCC/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:freeRTOS/GCC/portmacro.h **** typedef long BaseType_t;
  99:freeRTOS/GCC/portmacro.h **** typedef unsigned long UBaseType_t;
 100:freeRTOS/GCC/portmacro.h **** 
 101:freeRTOS/GCC/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:freeRTOS/GCC/portmacro.h **** 	typedef uint16_t TickType_t;
 103:freeRTOS/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:freeRTOS/GCC/portmacro.h **** #else
 105:freeRTOS/GCC/portmacro.h **** 	typedef uint32_t TickType_t;
 106:freeRTOS/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:freeRTOS/GCC/portmacro.h **** 
 108:freeRTOS/GCC/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:freeRTOS/GCC/portmacro.h **** 	not need to be guarded with a critical section. */
 110:freeRTOS/GCC/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:freeRTOS/GCC/portmacro.h **** #endif
 112:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 113:freeRTOS/GCC/portmacro.h **** 
 114:freeRTOS/GCC/portmacro.h **** /* Architecture specifics. */
 115:freeRTOS/GCC/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:freeRTOS/GCC/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:freeRTOS/GCC/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 119:freeRTOS/GCC/portmacro.h **** 
 120:freeRTOS/GCC/portmacro.h **** /* Scheduler utilities. */
 121:freeRTOS/GCC/portmacro.h **** #define portYIELD() 															\
 122:freeRTOS/GCC/portmacro.h **** {																				\
 123:freeRTOS/GCC/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:freeRTOS/GCC/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:freeRTOS/GCC/portmacro.h **** 																				\
 126:freeRTOS/GCC/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:freeRTOS/GCC/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:freeRTOS/GCC/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:freeRTOS/GCC/portmacro.h **** 	__asm volatile( "isb" );													\
 130:freeRTOS/GCC/portmacro.h **** }
 131:freeRTOS/GCC/portmacro.h **** 
ARM GAS  /tmp/cckkLGmm.s 			page 112


 132:freeRTOS/GCC/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:freeRTOS/GCC/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:freeRTOS/GCC/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:freeRTOS/GCC/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 137:freeRTOS/GCC/portmacro.h **** 
 138:freeRTOS/GCC/portmacro.h **** /* Critical section management. */
 139:freeRTOS/GCC/portmacro.h **** extern void vPortEnterCritical( void );
 140:freeRTOS/GCC/portmacro.h **** extern void vPortExitCritical( void );
 141:freeRTOS/GCC/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:freeRTOS/GCC/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:freeRTOS/GCC/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:freeRTOS/GCC/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:freeRTOS/GCC/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:freeRTOS/GCC/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:freeRTOS/GCC/portmacro.h **** 
 148:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 149:freeRTOS/GCC/portmacro.h **** 
 150:freeRTOS/GCC/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:freeRTOS/GCC/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:freeRTOS/GCC/portmacro.h **** (which build with all the ports) will build. */
 153:freeRTOS/GCC/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:freeRTOS/GCC/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 156:freeRTOS/GCC/portmacro.h **** 
 157:freeRTOS/GCC/portmacro.h **** /* Tickless idle/low power functionality. */
 158:freeRTOS/GCC/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:freeRTOS/GCC/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:freeRTOS/GCC/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:freeRTOS/GCC/portmacro.h **** #endif
 162:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 163:freeRTOS/GCC/portmacro.h **** 
 164:freeRTOS/GCC/portmacro.h **** /* Architecture specific optimisations. */
 165:freeRTOS/GCC/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:freeRTOS/GCC/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:freeRTOS/GCC/portmacro.h **** #endif
 168:freeRTOS/GCC/portmacro.h **** 
 169:freeRTOS/GCC/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:freeRTOS/GCC/portmacro.h **** 
 171:freeRTOS/GCC/portmacro.h **** 	/* Generic helper function. */
 172:freeRTOS/GCC/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:freeRTOS/GCC/portmacro.h **** 	{
 174:freeRTOS/GCC/portmacro.h **** 	uint8_t ucReturn;
 175:freeRTOS/GCC/portmacro.h **** 
 176:freeRTOS/GCC/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:freeRTOS/GCC/portmacro.h **** 		return ucReturn;
 178:freeRTOS/GCC/portmacro.h **** 	}
 179:freeRTOS/GCC/portmacro.h **** 
 180:freeRTOS/GCC/portmacro.h **** 	/* Check the configuration. */
 181:freeRTOS/GCC/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:freeRTOS/GCC/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:freeRTOS/GCC/portmacro.h **** 	#endif
 184:freeRTOS/GCC/portmacro.h **** 
 185:freeRTOS/GCC/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:freeRTOS/GCC/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:freeRTOS/GCC/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:freeRTOS/GCC/portmacro.h **** 
ARM GAS  /tmp/cckkLGmm.s 			page 113


 189:freeRTOS/GCC/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:freeRTOS/GCC/portmacro.h **** 
 191:freeRTOS/GCC/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:freeRTOS/GCC/portmacro.h **** 
 193:freeRTOS/GCC/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:freeRTOS/GCC/portmacro.h **** 
 195:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 196:freeRTOS/GCC/portmacro.h **** 
 197:freeRTOS/GCC/portmacro.h **** #ifdef configASSERT
 198:freeRTOS/GCC/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:freeRTOS/GCC/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:freeRTOS/GCC/portmacro.h **** #endif
 201:freeRTOS/GCC/portmacro.h **** 
 202:freeRTOS/GCC/portmacro.h **** /* portNOP() is not required by this port. */
 203:freeRTOS/GCC/portmacro.h **** #define portNOP()
 204:freeRTOS/GCC/portmacro.h **** 
 205:freeRTOS/GCC/portmacro.h **** #define portINLINE	__inline
 206:freeRTOS/GCC/portmacro.h **** 
 207:freeRTOS/GCC/portmacro.h **** #ifndef portFORCE_INLINE
 208:freeRTOS/GCC/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:freeRTOS/GCC/portmacro.h **** #endif
 210:freeRTOS/GCC/portmacro.h **** 
 211:freeRTOS/GCC/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:freeRTOS/GCC/portmacro.h **** {
 213:freeRTOS/GCC/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:freeRTOS/GCC/portmacro.h **** BaseType_t xReturn;
 215:freeRTOS/GCC/portmacro.h **** 
 216:freeRTOS/GCC/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:freeRTOS/GCC/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:freeRTOS/GCC/portmacro.h **** 
 219:freeRTOS/GCC/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:freeRTOS/GCC/portmacro.h **** 	{
 221:freeRTOS/GCC/portmacro.h **** 		xReturn = pdFALSE;
 222:freeRTOS/GCC/portmacro.h **** 	}
 223:freeRTOS/GCC/portmacro.h **** 	else
 224:freeRTOS/GCC/portmacro.h **** 	{
 225:freeRTOS/GCC/portmacro.h **** 		xReturn = pdTRUE;
 226:freeRTOS/GCC/portmacro.h **** 	}
 227:freeRTOS/GCC/portmacro.h **** 
 228:freeRTOS/GCC/portmacro.h **** 	return xReturn;
 229:freeRTOS/GCC/portmacro.h **** }
 230:freeRTOS/GCC/portmacro.h **** 
 231:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 232:freeRTOS/GCC/portmacro.h **** 
 233:freeRTOS/GCC/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:freeRTOS/GCC/portmacro.h **** {
 235:freeRTOS/GCC/portmacro.h **** uint32_t ulNewBASEPRI;
 236:freeRTOS/GCC/portmacro.h **** 
 237:freeRTOS/GCC/portmacro.h **** 	__asm volatile
 238:freeRTOS/GCC/portmacro.h **** 	(
 239:freeRTOS/GCC/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:freeRTOS/GCC/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:freeRTOS/GCC/portmacro.h **** 		"	isb														\n" \
 242:freeRTOS/GCC/portmacro.h **** 		"	dsb														\n" \
 243:freeRTOS/GCC/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:freeRTOS/GCC/portmacro.h **** 	);
 245:freeRTOS/GCC/portmacro.h **** }
ARM GAS  /tmp/cckkLGmm.s 			page 114


 246:freeRTOS/GCC/portmacro.h **** 
 247:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 248:freeRTOS/GCC/portmacro.h **** 
 249:freeRTOS/GCC/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1159              		.loc 2 249 34 view .LVU326
 1160              	.LBB29:
 250:freeRTOS/GCC/portmacro.h **** {
 251:freeRTOS/GCC/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1161              		.loc 2 251 1 view .LVU327
 252:freeRTOS/GCC/portmacro.h **** 
 253:freeRTOS/GCC/portmacro.h **** 	__asm volatile
 1162              		.loc 2 253 2 view .LVU328
 1163              		.syntax unified
 1164              	@ 253 "freeRTOS/GCC/portmacro.h" 1
 1165 0000 EFF31183 			mrs r3, basepri											
 1166 0004 4FF0BF02 		mov r2, #191												
 1167 0008 82F31188 		msr basepri, r2											
 1168 000c BFF36F8F 		isb														
 1169 0010 BFF34F8F 		dsb														
 1170              	
 1171              	@ 0 "" 2
 1172              	.LVL96:
 254:freeRTOS/GCC/portmacro.h **** 	(
 255:freeRTOS/GCC/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:freeRTOS/GCC/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:freeRTOS/GCC/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:freeRTOS/GCC/portmacro.h **** 		"	isb														\n" \
 259:freeRTOS/GCC/portmacro.h **** 		"	dsb														\n" \
 260:freeRTOS/GCC/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:freeRTOS/GCC/portmacro.h **** 	);
 262:freeRTOS/GCC/portmacro.h **** 
 263:freeRTOS/GCC/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:freeRTOS/GCC/portmacro.h **** 	warnings. */
 265:freeRTOS/GCC/portmacro.h **** 	return ulOriginalBASEPRI;
 1173              		.loc 2 265 2 view .LVU329
 1174              		.loc 2 265 2 is_stmt 0 view .LVU330
 1175              		.thumb
 1176              		.syntax unified
 1177              	.LBE29:
 1178              	.LBE28:
1389:./freeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1179              		.loc 1 1389 4 is_stmt 1 view .LVU331
1389:./freeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1180              		.loc 1 1389 12 is_stmt 0 view .LVU332
 1181 0014 18B1     		cbz	r0, .L79
 1182              	.LVL97:
 1183              	.L78:
1390:./freeRTOS/tasks.c **** 		}
 1184              		.loc 1 1390 4 is_stmt 1 discriminator 4 view .LVU333
1390:./freeRTOS/tasks.c **** 		}
 1185              		.loc 1 1390 13 is_stmt 0 discriminator 4 view .LVU334
 1186 0016 C06A     		ldr	r0, [r0, #44]
 1187              	.LVL98:
1392:./freeRTOS/tasks.c **** 
 1188              		.loc 1 1392 3 is_stmt 1 discriminator 4 view .LVU335
 1189              	.LBB30:
 1190              	.LBI30:
ARM GAS  /tmp/cckkLGmm.s 			page 115


 266:freeRTOS/GCC/portmacro.h **** }
 267:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 268:freeRTOS/GCC/portmacro.h **** 
 269:freeRTOS/GCC/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1191              		.loc 2 269 30 discriminator 4 view .LVU336
 1192              	.LBB31:
 270:freeRTOS/GCC/portmacro.h **** {
 271:freeRTOS/GCC/portmacro.h **** 	__asm volatile
 1193              		.loc 2 271 2 discriminator 4 view .LVU337
 1194              		.syntax unified
 1195              	@ 271 "freeRTOS/GCC/portmacro.h" 1
 1196 0018 83F31188 			msr basepri, r3	
 1197              	@ 0 "" 2
 1198              	.LVL99:
 1199              		.loc 2 271 2 is_stmt 0 discriminator 4 view .LVU338
 1200              		.thumb
 1201              		.syntax unified
 1202              	.LBE31:
 1203              	.LBE30:
1394:./freeRTOS/tasks.c **** 	}
 1204              		.loc 1 1394 3 is_stmt 1 discriminator 4 view .LVU339
1395:./freeRTOS/tasks.c **** 
 1205              		.loc 1 1395 2 is_stmt 0 discriminator 4 view .LVU340
 1206 001c 7047     		bx	lr
 1207              	.LVL100:
 1208              	.L79:
1389:./freeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1209              		.loc 1 1389 12 discriminator 1 view .LVU341
 1210 001e 014A     		ldr	r2, .L80
 1211 0020 1068     		ldr	r0, [r2]
 1212              	.LVL101:
1389:./freeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1213              		.loc 1 1389 12 discriminator 1 view .LVU342
 1214 0022 F8E7     		b	.L78
 1215              	.L81:
 1216              		.align	2
 1217              	.L80:
 1218 0024 00000000 		.word	.LANCHOR10
 1219              		.cfi_endproc
 1220              	.LFE12:
 1222              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1223              		.align	1
 1224              		.global	vTaskPrioritySet
 1225              		.syntax unified
 1226              		.thumb
 1227              		.thumb_func
 1228              		.fpu fpv4-sp-d16
 1230              	vTaskPrioritySet:
 1231              	.LVL102:
 1232              	.LFB13:
1403:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1233              		.loc 1 1403 2 is_stmt 1 view -0
 1234              		.cfi_startproc
 1235              		@ args = 0, pretend = 0, frame = 0
 1236              		@ frame_needed = 0, uses_anonymous_args = 0
1403:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1237              		.loc 1 1403 2 is_stmt 0 view .LVU344
ARM GAS  /tmp/cckkLGmm.s 			page 116


 1238 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1239              	.LCFI11:
 1240              		.cfi_def_cfa_offset 24
 1241              		.cfi_offset 3, -24
 1242              		.cfi_offset 4, -20
 1243              		.cfi_offset 5, -16
 1244              		.cfi_offset 6, -12
 1245              		.cfi_offset 7, -8
 1246              		.cfi_offset 14, -4
 1247 0002 0446     		mov	r4, r0
 1248 0004 0D46     		mov	r5, r1
1404:./freeRTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1249              		.loc 1 1404 2 is_stmt 1 view .LVU345
1405:./freeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1250              		.loc 1 1405 2 view .LVU346
1406:./freeRTOS/tasks.c **** 
 1251              		.loc 1 1406 2 view .LVU347
 1252              	.LVL103:
1408:./freeRTOS/tasks.c **** 
 1253              		.loc 1 1408 59 view .LVU348
1411:./freeRTOS/tasks.c **** 		{
 1254              		.loc 1 1411 3 view .LVU349
1411:./freeRTOS/tasks.c **** 		{
 1255              		.loc 1 1411 5 is_stmt 0 view .LVU350
 1256 0006 0929     		cmp	r1, #9
 1257 0008 00D9     		bls	.L83
1413:./freeRTOS/tasks.c **** 		}
 1258              		.loc 1 1413 18 view .LVU351
 1259 000a 0925     		movs	r5, #9
 1260              	.L83:
 1261              	.LVL104:
1417:./freeRTOS/tasks.c **** 		}
 1262              		.loc 1 1417 28 is_stmt 1 view .LVU352
1420:./freeRTOS/tasks.c **** 		{
 1263              		.loc 1 1420 3 view .LVU353
 1264 000c FFF7FEFF 		bl	vPortEnterCritical
 1265              	.LVL105:
1424:./freeRTOS/tasks.c **** 
 1266              		.loc 1 1424 4 view .LVU354
1424:./freeRTOS/tasks.c **** 
 1267              		.loc 1 1424 12 is_stmt 0 view .LVU355
 1268 0010 74B1     		cbz	r4, .L97
 1269              	.LVL106:
 1270              	.L84:
1426:./freeRTOS/tasks.c **** 
 1271              		.loc 1 1426 50 is_stmt 1 discriminator 4 view .LVU356
1430:./freeRTOS/tasks.c **** 			}
 1272              		.loc 1 1430 5 discriminator 4 view .LVU357
1430:./freeRTOS/tasks.c **** 			}
 1273              		.loc 1 1430 27 is_stmt 0 discriminator 4 view .LVU358
 1274 0012 636C     		ldr	r3, [r4, #68]
 1275              	.LVL107:
1438:./freeRTOS/tasks.c **** 			{
 1276              		.loc 1 1438 4 is_stmt 1 discriminator 4 view .LVU359
1438:./freeRTOS/tasks.c **** 			{
 1277              		.loc 1 1438 6 is_stmt 0 discriminator 4 view .LVU360
 1278 0014 9D42     		cmp	r5, r3
ARM GAS  /tmp/cckkLGmm.s 			page 117


 1279 0016 30D0     		beq	.L85
1442:./freeRTOS/tasks.c **** 				{
 1280              		.loc 1 1442 5 is_stmt 1 view .LVU361
1442:./freeRTOS/tasks.c **** 				{
 1281              		.loc 1 1442 7 is_stmt 0 view .LVU362
 1282 0018 0DD9     		bls	.L86
1444:./freeRTOS/tasks.c **** 					{
 1283              		.loc 1 1444 6 is_stmt 1 view .LVU363
1444:./freeRTOS/tasks.c **** 					{
 1284              		.loc 1 1444 16 is_stmt 0 view .LVU364
 1285 001a 2B4A     		ldr	r2, .L100
 1286 001c 1268     		ldr	r2, [r2]
1444:./freeRTOS/tasks.c **** 					{
 1287              		.loc 1 1444 8 view .LVU365
 1288 001e A242     		cmp	r2, r4
 1289 0020 2ED0     		beq	.L93
1449:./freeRTOS/tasks.c **** 						{
 1290              		.loc 1 1449 7 is_stmt 1 view .LVU366
1449:./freeRTOS/tasks.c **** 						{
 1291              		.loc 1 1449 40 is_stmt 0 view .LVU367
 1292 0022 294A     		ldr	r2, .L100
 1293 0024 1268     		ldr	r2, [r2]
 1294 0026 D26A     		ldr	r2, [r2, #44]
1449:./freeRTOS/tasks.c **** 						{
 1295              		.loc 1 1449 9 view .LVU368
 1296 0028 AA42     		cmp	r2, r5
 1297 002a 2BD9     		bls	.L94
1406:./freeRTOS/tasks.c **** 
 1298              		.loc 1 1406 13 view .LVU369
 1299 002c 0027     		movs	r7, #0
 1300 002e 07E0     		b	.L87
 1301              	.LVL108:
 1302              	.L97:
1424:./freeRTOS/tasks.c **** 
 1303              		.loc 1 1424 12 discriminator 1 view .LVU370
 1304 0030 254B     		ldr	r3, .L100
 1305 0032 1C68     		ldr	r4, [r3]
 1306              	.LVL109:
1424:./freeRTOS/tasks.c **** 
 1307              		.loc 1 1424 12 discriminator 1 view .LVU371
 1308 0034 EDE7     		b	.L84
 1309              	.LVL110:
 1310              	.L86:
1465:./freeRTOS/tasks.c **** 				{
 1311              		.loc 1 1465 10 is_stmt 1 view .LVU372
1465:./freeRTOS/tasks.c **** 				{
 1312              		.loc 1 1465 20 is_stmt 0 view .LVU373
 1313 0036 244A     		ldr	r2, .L100
 1314 0038 1268     		ldr	r2, [r2]
1465:./freeRTOS/tasks.c **** 				{
 1315              		.loc 1 1465 12 view .LVU374
 1316 003a A242     		cmp	r2, r4
 1317 003c 24D0     		beq	.L95
1406:./freeRTOS/tasks.c **** 
 1318              		.loc 1 1406 13 view .LVU375
 1319 003e 0027     		movs	r7, #0
 1320              	.L87:
ARM GAS  /tmp/cckkLGmm.s 			page 118


 1321              	.LVL111:
1477:./freeRTOS/tasks.c **** 
 1322              		.loc 1 1477 5 is_stmt 1 view .LVU376
1482:./freeRTOS/tasks.c **** 
 1323              		.loc 1 1482 5 view .LVU377
1482:./freeRTOS/tasks.c **** 
 1324              		.loc 1 1482 27 is_stmt 0 view .LVU378
 1325 0040 E66A     		ldr	r6, [r4, #44]
 1326              	.LVL112:
1488:./freeRTOS/tasks.c **** 					{
 1327              		.loc 1 1488 6 is_stmt 1 view .LVU379
1488:./freeRTOS/tasks.c **** 					{
 1328              		.loc 1 1488 8 is_stmt 0 view .LVU380
 1329 0042 B342     		cmp	r3, r6
 1330 0044 22D0     		beq	.L98
 1331              	.L88:
1494:./freeRTOS/tasks.c **** 					}
 1332              		.loc 1 1494 31 is_stmt 1 view .LVU381
1498:./freeRTOS/tasks.c **** 				}
 1333              		.loc 1 1498 6 view .LVU382
1498:./freeRTOS/tasks.c **** 				}
 1334              		.loc 1 1498 28 is_stmt 0 view .LVU383
 1335 0046 6564     		str	r5, [r4, #68]
1508:./freeRTOS/tasks.c **** 				{
 1336              		.loc 1 1508 5 is_stmt 1 view .LVU384
1508:./freeRTOS/tasks.c **** 				{
 1337              		.loc 1 1508 11 is_stmt 0 view .LVU385
 1338 0048 A369     		ldr	r3, [r4, #24]
 1339              	.LVL113:
1508:./freeRTOS/tasks.c **** 				{
 1340              		.loc 1 1508 7 view .LVU386
 1341 004a 002B     		cmp	r3, #0
 1342 004c 02DB     		blt	.L89
1510:./freeRTOS/tasks.c **** 				}
 1343              		.loc 1 1510 6 is_stmt 1 view .LVU387
 1344 004e C5F10A05 		rsb	r5, r5, #10
 1345              	.LVL114:
1510:./freeRTOS/tasks.c **** 				}
 1346              		.loc 1 1510 6 is_stmt 0 view .LVU388
 1347 0052 A561     		str	r5, [r4, #24]
 1348              	.L89:
1514:./freeRTOS/tasks.c **** 				}
 1349              		.loc 1 1514 30 is_stmt 1 view .LVU389
1521:./freeRTOS/tasks.c **** 				{
 1350              		.loc 1 1521 5 view .LVU390
1521:./freeRTOS/tasks.c **** 				{
 1351              		.loc 1 1521 9 is_stmt 0 view .LVU391
 1352 0054 6169     		ldr	r1, [r4, #20]
 1353 0056 06EB8603 		add	r3, r6, r6, lsl #2
 1354 005a 1C4A     		ldr	r2, .L100+4
 1355 005c 02EB8303 		add	r3, r2, r3, lsl #2
1521:./freeRTOS/tasks.c **** 				{
 1356              		.loc 1 1521 112 view .LVU392
 1357 0060 9942     		cmp	r1, r3
 1358 0062 15D0     		beq	.L99
 1359              	.LVL115:
 1360              	.L90:
ARM GAS  /tmp/cckkLGmm.s 			page 119


1541:./freeRTOS/tasks.c **** 				}
 1361              		.loc 1 1541 30 is_stmt 1 view .LVU393
1544:./freeRTOS/tasks.c **** 				{
 1362              		.loc 1 1544 5 view .LVU394
1544:./freeRTOS/tasks.c **** 				{
 1363              		.loc 1 1544 7 is_stmt 0 view .LVU395
 1364 0064 4FB1     		cbz	r7, .L85
1546:./freeRTOS/tasks.c **** 				}
 1365              		.loc 1 1546 6 is_stmt 1 view .LVU396
 1366 0066 4FF0E023 		mov	r3, #-536813568
 1367 006a 4FF08052 		mov	r2, #268435456
 1368 006e C3F8042D 		str	r2, [r3, #3332]
1546:./freeRTOS/tasks.c **** 				}
 1369              		.loc 1 1546 6 view .LVU397
 1370              		.syntax unified
 1371              	@ 1546 "./freeRTOS/tasks.c" 1
 1372 0072 BFF34F8F 		dsb
 1373              	@ 0 "" 2
1546:./freeRTOS/tasks.c **** 				}
 1374              		.loc 1 1546 6 view .LVU398
 1375              	@ 1546 "./freeRTOS/tasks.c" 1
 1376 0076 BFF36F8F 		isb
 1377              	@ 0 "" 2
1546:./freeRTOS/tasks.c **** 				}
 1378              		.loc 1 1546 37 view .LVU399
 1379              	.LVL116:
 1380              		.thumb
 1381              		.syntax unified
 1382              	.L85:
1550:./freeRTOS/tasks.c **** 				}
 1383              		.loc 1 1550 30 view .LVU400
1555:./freeRTOS/tasks.c **** 			}
 1384              		.loc 1 1555 5 view .LVU401
1558:./freeRTOS/tasks.c **** 	}
 1385              		.loc 1 1558 3 view .LVU402
 1386 007a FFF7FEFF 		bl	vPortExitCritical
 1387              	.LVL117:
1559:./freeRTOS/tasks.c **** 
 1388              		.loc 1 1559 2 is_stmt 0 view .LVU403
 1389 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1390              	.LVL118:
 1391              	.L93:
1406:./freeRTOS/tasks.c **** 
 1392              		.loc 1 1406 13 view .LVU404
 1393 0080 0027     		movs	r7, #0
 1394 0082 DDE7     		b	.L87
 1395              	.L94:
1451:./freeRTOS/tasks.c **** 						}
 1396              		.loc 1 1451 23 view .LVU405
 1397 0084 0127     		movs	r7, #1
 1398 0086 DBE7     		b	.L87
 1399              	.L95:
1470:./freeRTOS/tasks.c **** 				}
 1400              		.loc 1 1470 21 view .LVU406
 1401 0088 0127     		movs	r7, #1
 1402 008a D9E7     		b	.L87
 1403              	.LVL119:
ARM GAS  /tmp/cckkLGmm.s 			page 120


 1404              	.L98:
1490:./freeRTOS/tasks.c **** 					}
 1405              		.loc 1 1490 7 is_stmt 1 view .LVU407
1490:./freeRTOS/tasks.c **** 					}
 1406              		.loc 1 1490 25 is_stmt 0 view .LVU408
 1407 008c E562     		str	r5, [r4, #44]
 1408 008e DAE7     		b	.L88
 1409              	.LVL120:
 1410              	.L99:
1526:./freeRTOS/tasks.c **** 					{
 1411              		.loc 1 1526 6 is_stmt 1 view .LVU409
1526:./freeRTOS/tasks.c **** 					{
 1412              		.loc 1 1526 10 is_stmt 0 view .LVU410
 1413 0090 251D     		adds	r5, r4, #4
 1414 0092 2846     		mov	r0, r5
 1415 0094 FFF7FEFF 		bl	uxListRemove
 1416              	.LVL121:
1526:./freeRTOS/tasks.c **** 					{
 1417              		.loc 1 1526 8 view .LVU411
 1418 0098 30B9     		cbnz	r0, .L91
1531:./freeRTOS/tasks.c **** 					}
 1419              		.loc 1 1531 7 is_stmt 1 view .LVU412
 1420 009a 0123     		movs	r3, #1
 1421 009c B340     		lsls	r3, r3, r6
 1422 009e 0C4A     		ldr	r2, .L100+8
 1423 00a0 1668     		ldr	r6, [r2]
 1424              	.LVL122:
1531:./freeRTOS/tasks.c **** 					}
 1425              		.loc 1 1531 7 is_stmt 0 view .LVU413
 1426 00a2 26EA0306 		bic	r6, r6, r3
 1427 00a6 1660     		str	r6, [r2]
 1428              	.L91:
1535:./freeRTOS/tasks.c **** 					}
 1429              		.loc 1 1535 31 is_stmt 1 view .LVU414
1537:./freeRTOS/tasks.c **** 				}
 1430              		.loc 1 1537 6 view .LVU415
1537:./freeRTOS/tasks.c **** 				}
 1431              		.loc 1 1537 6 view .LVU416
 1432 00a8 E06A     		ldr	r0, [r4, #44]
 1433 00aa 0123     		movs	r3, #1
 1434 00ac 8340     		lsls	r3, r3, r0
 1435 00ae 084A     		ldr	r2, .L100+8
 1436 00b0 1168     		ldr	r1, [r2]
 1437 00b2 0B43     		orrs	r3, r3, r1
 1438 00b4 1360     		str	r3, [r2]
1537:./freeRTOS/tasks.c **** 				}
 1439              		.loc 1 1537 6 view .LVU417
 1440 00b6 00EB8000 		add	r0, r0, r0, lsl #2
 1441 00ba 2946     		mov	r1, r5
 1442 00bc 034B     		ldr	r3, .L100+4
 1443 00be 03EB8000 		add	r0, r3, r0, lsl #2
 1444 00c2 FFF7FEFF 		bl	vListInsertEnd
 1445              	.LVL123:
1537:./freeRTOS/tasks.c **** 				}
 1446              		.loc 1 1537 36 view .LVU418
 1447 00c6 CDE7     		b	.L90
 1448              	.L101:
ARM GAS  /tmp/cckkLGmm.s 			page 121


 1449              		.align	2
 1450              	.L100:
 1451 00c8 00000000 		.word	.LANCHOR10
 1452 00cc 00000000 		.word	.LANCHOR4
 1453 00d0 00000000 		.word	.LANCHOR13
 1454              		.cfi_endproc
 1455              	.LFE13:
 1457              		.section	.text.vTaskResume,"ax",%progbits
 1458              		.align	1
 1459              		.global	vTaskResume
 1460              		.syntax unified
 1461              		.thumb
 1462              		.thumb_func
 1463              		.fpu fpv4-sp-d16
 1465              	vTaskResume:
 1466              	.LVL124:
 1467              	.LFB16:
1703:./freeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1468              		.loc 1 1703 2 view -0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 0
 1471              		@ frame_needed = 0, uses_anonymous_args = 0
1704:./freeRTOS/tasks.c **** 
 1472              		.loc 1 1704 2 view .LVU420
1707:./freeRTOS/tasks.c **** 
 1473              		.loc 1 1707 32 view .LVU421
1711:./freeRTOS/tasks.c **** 		{
 1474              		.loc 1 1711 3 view .LVU422
1711:./freeRTOS/tasks.c **** 		{
 1475              		.loc 1 1711 5 is_stmt 0 view .LVU423
 1476 0000 90B3     		cbz	r0, .L106
1703:./freeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1477              		.loc 1 1703 2 discriminator 1 view .LVU424
 1478 0002 38B5     		push	{r3, r4, r5, lr}
 1479              	.LCFI12:
 1480              		.cfi_def_cfa_offset 16
 1481              		.cfi_offset 3, -16
 1482              		.cfi_offset 4, -12
 1483              		.cfi_offset 5, -8
 1484              		.cfi_offset 14, -4
 1485 0004 0446     		mov	r4, r0
1711:./freeRTOS/tasks.c **** 		{
 1486              		.loc 1 1711 36 discriminator 1 view .LVU425
 1487 0006 194B     		ldr	r3, .L110
 1488 0008 1B68     		ldr	r3, [r3]
1711:./freeRTOS/tasks.c **** 		{
 1489              		.loc 1 1711 25 discriminator 1 view .LVU426
 1490 000a 8342     		cmp	r3, r0
 1491 000c 07D0     		beq	.L102
1713:./freeRTOS/tasks.c **** 			{
 1492              		.loc 1 1713 4 is_stmt 1 view .LVU427
 1493 000e FFF7FEFF 		bl	vPortEnterCritical
 1494              	.LVL125:
1715:./freeRTOS/tasks.c **** 				{
 1495              		.loc 1 1715 5 view .LVU428
1715:./freeRTOS/tasks.c **** 				{
 1496              		.loc 1 1715 9 is_stmt 0 view .LVU429
ARM GAS  /tmp/cckkLGmm.s 			page 122


 1497 0012 2046     		mov	r0, r4
 1498 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1499              	.LVL126:
1715:./freeRTOS/tasks.c **** 				{
 1500              		.loc 1 1715 7 view .LVU430
 1501 0018 10B9     		cbnz	r0, .L109
 1502              	.L104:
1739:./freeRTOS/tasks.c **** 				}
 1503              		.loc 1 1739 30 is_stmt 1 view .LVU431
1742:./freeRTOS/tasks.c **** 		}
 1504              		.loc 1 1742 4 view .LVU432
 1505 001a FFF7FEFF 		bl	vPortExitCritical
 1506              	.LVL127:
1746:./freeRTOS/tasks.c **** 		}
 1507              		.loc 1 1746 28 view .LVU433
 1508              	.L102:
1748:./freeRTOS/tasks.c **** 
 1509              		.loc 1 1748 2 is_stmt 0 view .LVU434
 1510 001e 38BD     		pop	{r3, r4, r5, pc}
 1511              	.LVL128:
 1512              	.L109:
1717:./freeRTOS/tasks.c **** 
 1513              		.loc 1 1717 31 is_stmt 1 view .LVU435
1721:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1514              		.loc 1 1721 6 view .LVU436
1721:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1515              		.loc 1 1721 15 is_stmt 0 view .LVU437
 1516 0020 251D     		adds	r5, r4, #4
 1517 0022 2846     		mov	r0, r5
 1518 0024 FFF7FEFF 		bl	uxListRemove
 1519              	.LVL129:
1722:./freeRTOS/tasks.c **** 
 1520              		.loc 1 1722 6 is_stmt 1 view .LVU438
1722:./freeRTOS/tasks.c **** 
 1521              		.loc 1 1722 6 view .LVU439
 1522 0028 E06A     		ldr	r0, [r4, #44]
 1523 002a 0123     		movs	r3, #1
 1524 002c 8340     		lsls	r3, r3, r0
 1525 002e 104A     		ldr	r2, .L110+4
 1526 0030 1168     		ldr	r1, [r2]
 1527 0032 0B43     		orrs	r3, r3, r1
 1528 0034 1360     		str	r3, [r2]
1722:./freeRTOS/tasks.c **** 
 1529              		.loc 1 1722 6 view .LVU440
 1530 0036 00EB8000 		add	r0, r0, r0, lsl #2
 1531 003a 2946     		mov	r1, r5
 1532 003c 0D4B     		ldr	r3, .L110+8
 1533 003e 03EB8000 		add	r0, r3, r0, lsl #2
 1534 0042 FFF7FEFF 		bl	vListInsertEnd
 1535              	.LVL130:
1722:./freeRTOS/tasks.c **** 
 1536              		.loc 1 1722 36 view .LVU441
1725:./freeRTOS/tasks.c **** 					{
 1537              		.loc 1 1725 6 view .LVU442
1725:./freeRTOS/tasks.c **** 					{
 1538              		.loc 1 1725 15 is_stmt 0 view .LVU443
 1539 0046 E26A     		ldr	r2, [r4, #44]
ARM GAS  /tmp/cckkLGmm.s 			page 123


1725:./freeRTOS/tasks.c **** 					{
 1540              		.loc 1 1725 43 view .LVU444
 1541 0048 084B     		ldr	r3, .L110
 1542 004a 1B68     		ldr	r3, [r3]
 1543 004c DB6A     		ldr	r3, [r3, #44]
1725:./freeRTOS/tasks.c **** 					{
 1544              		.loc 1 1725 8 view .LVU445
 1545 004e 9A42     		cmp	r2, r3
 1546 0050 E3D3     		bcc	.L104
1730:./freeRTOS/tasks.c **** 					}
 1547              		.loc 1 1730 7 is_stmt 1 view .LVU446
 1548 0052 4FF0E023 		mov	r3, #-536813568
 1549 0056 4FF08052 		mov	r2, #268435456
 1550 005a C3F8042D 		str	r2, [r3, #3332]
1730:./freeRTOS/tasks.c **** 					}
 1551              		.loc 1 1730 7 view .LVU447
 1552              		.syntax unified
 1553              	@ 1730 "./freeRTOS/tasks.c" 1
 1554 005e BFF34F8F 		dsb
 1555              	@ 0 "" 2
1730:./freeRTOS/tasks.c **** 					}
 1556              		.loc 1 1730 7 view .LVU448
 1557              	@ 1730 "./freeRTOS/tasks.c" 1
 1558 0062 BFF36F8F 		isb
 1559              	@ 0 "" 2
1730:./freeRTOS/tasks.c **** 					}
 1560              		.loc 1 1730 38 view .LVU449
 1561              		.thumb
 1562              		.syntax unified
 1563 0066 D8E7     		b	.L104
 1564              	.LVL131:
 1565              	.L106:
 1566              	.LCFI13:
 1567              		.cfi_def_cfa_offset 0
 1568              		.cfi_restore 3
 1569              		.cfi_restore 4
 1570              		.cfi_restore 5
 1571              		.cfi_restore 14
1730:./freeRTOS/tasks.c **** 					}
 1572              		.loc 1 1730 38 is_stmt 0 view .LVU450
 1573 0068 7047     		bx	lr
 1574              	.L111:
 1575 006a 00BF     		.align	2
 1576              	.L110:
 1577 006c 00000000 		.word	.LANCHOR10
 1578 0070 00000000 		.word	.LANCHOR13
 1579 0074 00000000 		.word	.LANCHOR4
 1580              		.cfi_endproc
 1581              	.LFE16:
 1583              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1584              		.align	1
 1585              		.global	xTaskResumeFromISR
 1586              		.syntax unified
 1587              		.thumb
 1588              		.thumb_func
 1589              		.fpu fpv4-sp-d16
 1591              	xTaskResumeFromISR:
ARM GAS  /tmp/cckkLGmm.s 			page 124


 1592              	.LVL132:
 1593              	.LFB17:
1757:./freeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1594              		.loc 1 1757 2 is_stmt 1 view -0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 0
 1597              		@ frame_needed = 0, uses_anonymous_args = 0
1757:./freeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1598              		.loc 1 1757 2 is_stmt 0 view .LVU452
 1599 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1600              	.LCFI14:
 1601              		.cfi_def_cfa_offset 24
 1602              		.cfi_offset 3, -24
 1603              		.cfi_offset 4, -20
 1604              		.cfi_offset 5, -16
 1605              		.cfi_offset 6, -12
 1606              		.cfi_offset 7, -8
 1607              		.cfi_offset 14, -4
 1608 0002 0446     		mov	r4, r0
1758:./freeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1609              		.loc 1 1758 2 is_stmt 1 view .LVU453
 1610              	.LVL133:
1759:./freeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 1611              		.loc 1 1759 2 view .LVU454
1760:./freeRTOS/tasks.c **** 
 1612              		.loc 1 1760 2 view .LVU455
1762:./freeRTOS/tasks.c **** 
 1613              		.loc 1 1762 32 view .LVU456
1780:./freeRTOS/tasks.c **** 
 1614              		.loc 1 1780 45 view .LVU457
1782:./freeRTOS/tasks.c **** 		{
 1615              		.loc 1 1782 3 view .LVU458
 1616              	.LBB32:
 1617              	.LBI32:
 249:freeRTOS/GCC/portmacro.h **** {
 1618              		.loc 2 249 34 view .LVU459
 1619              	.LBB33:
 251:freeRTOS/GCC/portmacro.h **** 
 1620              		.loc 2 251 1 view .LVU460
 253:freeRTOS/GCC/portmacro.h **** 	(
 1621              		.loc 2 253 2 view .LVU461
 1622              		.syntax unified
 1623              	@ 253 "freeRTOS/GCC/portmacro.h" 1
 1624 0004 EFF31186 			mrs r6, basepri											
 1625 0008 4FF0BF03 		mov r3, #191												
 1626 000c 83F31188 		msr basepri, r3											
 1627 0010 BFF36F8F 		isb														
 1628 0014 BFF34F8F 		dsb														
 1629              	
 1630              	@ 0 "" 2
 1631              	.LVL134:
 265:freeRTOS/GCC/portmacro.h **** }
 1632              		.loc 2 265 2 view .LVU462
 265:freeRTOS/GCC/portmacro.h **** }
 1633              		.loc 2 265 2 is_stmt 0 view .LVU463
 1634              		.thumb
 1635              		.syntax unified
ARM GAS  /tmp/cckkLGmm.s 			page 125


 1636              	.LBE33:
 1637              	.LBE32:
1784:./freeRTOS/tasks.c **** 			{
 1638              		.loc 1 1784 4 is_stmt 1 view .LVU464
1784:./freeRTOS/tasks.c **** 			{
 1639              		.loc 1 1784 8 is_stmt 0 view .LVU465
 1640 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1641              	.LVL135:
1784:./freeRTOS/tasks.c **** 			{
 1642              		.loc 1 1784 6 view .LVU466
 1643 001c 0546     		mov	r5, r0
 1644 001e E0B1     		cbz	r0, .L113
1786:./freeRTOS/tasks.c **** 
 1645              		.loc 1 1786 39 is_stmt 1 view .LVU467
1789:./freeRTOS/tasks.c **** 				{
 1646              		.loc 1 1789 5 view .LVU468
1789:./freeRTOS/tasks.c **** 				{
 1647              		.loc 1 1789 30 is_stmt 0 view .LVU469
 1648 0020 144B     		ldr	r3, .L118
 1649 0022 1B68     		ldr	r3, [r3]
1789:./freeRTOS/tasks.c **** 				{
 1650              		.loc 1 1789 7 view .LVU470
 1651 0024 FBB9     		cbnz	r3, .L114
1793:./freeRTOS/tasks.c **** 					{
 1652              		.loc 1 1793 6 is_stmt 1 view .LVU471
1793:./freeRTOS/tasks.c **** 					{
 1653              		.loc 1 1793 15 is_stmt 0 view .LVU472
 1654 0026 E26A     		ldr	r2, [r4, #44]
1793:./freeRTOS/tasks.c **** 					{
 1655              		.loc 1 1793 43 view .LVU473
 1656 0028 134B     		ldr	r3, .L118+4
 1657 002a 1B68     		ldr	r3, [r3]
 1658 002c DB6A     		ldr	r3, [r3, #44]
1793:./freeRTOS/tasks.c **** 					{
 1659              		.loc 1 1793 8 view .LVU474
 1660 002e 9A42     		cmp	r2, r3
 1661 0030 17D2     		bcs	.L116
1758:./freeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1662              		.loc 1 1758 13 view .LVU475
 1663 0032 0025     		movs	r5, #0
 1664              	.L115:
 1665              	.LVL136:
1799:./freeRTOS/tasks.c **** 					}
 1666              		.loc 1 1799 31 is_stmt 1 view .LVU476
1802:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1667              		.loc 1 1802 6 view .LVU477
1802:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1668              		.loc 1 1802 15 is_stmt 0 view .LVU478
 1669 0034 271D     		adds	r7, r4, #4
 1670 0036 3846     		mov	r0, r7
 1671 0038 FFF7FEFF 		bl	uxListRemove
 1672              	.LVL137:
1803:./freeRTOS/tasks.c **** 				}
 1673              		.loc 1 1803 6 is_stmt 1 view .LVU479
1803:./freeRTOS/tasks.c **** 				}
 1674              		.loc 1 1803 6 view .LVU480
 1675 003c E06A     		ldr	r0, [r4, #44]
ARM GAS  /tmp/cckkLGmm.s 			page 126


 1676 003e 0123     		movs	r3, #1
 1677 0040 8340     		lsls	r3, r3, r0
 1678 0042 0E4A     		ldr	r2, .L118+8
 1679 0044 1168     		ldr	r1, [r2]
 1680 0046 0B43     		orrs	r3, r3, r1
 1681 0048 1360     		str	r3, [r2]
1803:./freeRTOS/tasks.c **** 				}
 1682              		.loc 1 1803 6 view .LVU481
 1683 004a 00EB8000 		add	r0, r0, r0, lsl #2
 1684 004e 3946     		mov	r1, r7
 1685 0050 0B4B     		ldr	r3, .L118+12
 1686 0052 03EB8000 		add	r0, r3, r0, lsl #2
 1687 0056 FFF7FEFF 		bl	vListInsertEnd
 1688              	.LVL138:
1803:./freeRTOS/tasks.c **** 				}
 1689              		.loc 1 1803 36 view .LVU482
 1690              	.L113:
1815:./freeRTOS/tasks.c **** 			}
 1691              		.loc 1 1815 29 view .LVU483
1818:./freeRTOS/tasks.c **** 
 1692              		.loc 1 1818 3 view .LVU484
 1693              	.LBB34:
 1694              	.LBI34:
 269:freeRTOS/GCC/portmacro.h **** {
 1695              		.loc 2 269 30 view .LVU485
 1696              	.LBB35:
 1697              		.loc 2 271 2 view .LVU486
 1698              		.syntax unified
 1699              	@ 271 "freeRTOS/GCC/portmacro.h" 1
 1700 005a 86F31188 			msr basepri, r6	
 1701              	@ 0 "" 2
 1702              	.LVL139:
 1703              		.loc 2 271 2 is_stmt 0 view .LVU487
 1704              		.thumb
 1705              		.syntax unified
 1706              	.LBE35:
 1707              	.LBE34:
1820:./freeRTOS/tasks.c **** 	}
 1708              		.loc 1 1820 3 is_stmt 1 view .LVU488
1821:./freeRTOS/tasks.c **** 
 1709              		.loc 1 1821 2 is_stmt 0 view .LVU489
 1710 005e 2846     		mov	r0, r5
 1711 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1712              	.LVL140:
 1713              	.L116:
1795:./freeRTOS/tasks.c **** 					}
 1714              		.loc 1 1795 22 view .LVU490
 1715 0062 0125     		movs	r5, #1
 1716 0064 E6E7     		b	.L115
 1717              	.L114:
1810:./freeRTOS/tasks.c **** 				}
 1718              		.loc 1 1810 6 is_stmt 1 view .LVU491
 1719 0066 04F11801 		add	r1, r4, #24
 1720 006a 0648     		ldr	r0, .L118+16
 1721 006c FFF7FEFF 		bl	vListInsertEnd
 1722              	.LVL141:
1758:./freeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
ARM GAS  /tmp/cckkLGmm.s 			page 127


 1723              		.loc 1 1758 13 is_stmt 0 view .LVU492
 1724 0070 0025     		movs	r5, #0
 1725 0072 F2E7     		b	.L113
 1726              	.L119:
 1727              		.align	2
 1728              	.L118:
 1729 0074 00000000 		.word	.LANCHOR16
 1730 0078 00000000 		.word	.LANCHOR10
 1731 007c 00000000 		.word	.LANCHOR13
 1732 0080 00000000 		.word	.LANCHOR4
 1733 0084 00000000 		.word	.LANCHOR1
 1734              		.cfi_endproc
 1735              	.LFE17:
 1737              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 1738              		.align	2
 1739              	.LC0:
 1740 0000 49444C45 		.ascii	"IDLE\000"
 1740      00
 1741              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1742              		.align	1
 1743              		.global	vTaskStartScheduler
 1744              		.syntax unified
 1745              		.thumb
 1746              		.thumb_func
 1747              		.fpu fpv4-sp-d16
 1749              	vTaskStartScheduler:
 1750              	.LFB18:
1827:./freeRTOS/tasks.c **** BaseType_t xReturn;
 1751              		.loc 1 1827 1 is_stmt 1 view -0
 1752              		.cfi_startproc
 1753              		@ args = 0, pretend = 0, frame = 0
 1754              		@ frame_needed = 0, uses_anonymous_args = 0
 1755 0000 00B5     		push	{lr}
 1756              	.LCFI15:
 1757              		.cfi_def_cfa_offset 4
 1758              		.cfi_offset 14, -4
 1759 0002 83B0     		sub	sp, sp, #12
 1760              	.LCFI16:
 1761              		.cfi_def_cfa_offset 16
1828:./freeRTOS/tasks.c **** 
 1762              		.loc 1 1828 1 view .LVU494
1860:./freeRTOS/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1763              		.loc 1 1860 3 view .LVU495
1860:./freeRTOS/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1764              		.loc 1 1860 13 is_stmt 0 view .LVU496
 1765 0004 114B     		ldr	r3, .L124
 1766 0006 0193     		str	r3, [sp, #4]
 1767 0008 0023     		movs	r3, #0
 1768 000a 0093     		str	r3, [sp]
 1769 000c 2022     		movs	r2, #32
 1770 000e 1049     		ldr	r1, .L124+4
 1771 0010 1048     		ldr	r0, .L124+8
 1772 0012 FFF7FEFF 		bl	xTaskCreate
 1773              	.LVL142:
1881:./freeRTOS/tasks.c **** 	{
 1774              		.loc 1 1881 2 is_stmt 1 view .LVU497
1881:./freeRTOS/tasks.c **** 	{
ARM GAS  /tmp/cckkLGmm.s 			page 128


 1775              		.loc 1 1881 4 is_stmt 0 view .LVU498
 1776 0016 0128     		cmp	r0, #1
 1777 0018 02D0     		beq	.L123
 1778              	.LVL143:
 1779              	.L120:
1930:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1780              		.loc 1 1930 1 view .LVU499
 1781 001a 03B0     		add	sp, sp, #12
 1782              	.LCFI17:
 1783              		.cfi_remember_state
 1784              		.cfi_def_cfa_offset 4
 1785              		@ sp needed
 1786 001c 5DF804FB 		ldr	pc, [sp], #4
 1787              	.LVL144:
 1788              	.L123:
 1789              	.LCFI18:
 1790              		.cfi_restore_state
1888:./freeRTOS/tasks.c **** 
 1791              		.loc 1 1888 3 is_stmt 1 view .LVU500
 1792              	.LBB36:
 1793              	.LBI36:
 233:freeRTOS/GCC/portmacro.h **** {
 1794              		.loc 2 233 30 view .LVU501
 1795              	.LBB37:
 235:freeRTOS/GCC/portmacro.h **** 
 1796              		.loc 2 235 1 view .LVU502
 237:freeRTOS/GCC/portmacro.h **** 	(
 1797              		.loc 2 237 2 view .LVU503
 1798              		.syntax unified
 1799              	@ 237 "freeRTOS/GCC/portmacro.h" 1
 1800 0020 4FF0BF03 			mov r3, #191												
 1801 0024 83F31188 		msr basepri, r3											
 1802 0028 BFF36F8F 		isb														
 1803 002c BFF34F8F 		dsb														
 1804              	
 1805              	@ 0 "" 2
 1806              		.thumb
 1807              		.syntax unified
 1808              	.LBE37:
 1809              	.LBE36:
1898:./freeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1810              		.loc 1 1898 3 view .LVU504
1898:./freeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1811              		.loc 1 1898 24 is_stmt 0 view .LVU505
 1812 0030 094B     		ldr	r3, .L124+12
 1813 0032 4FF0FF32 		mov	r2, #-1
 1814 0036 1A60     		str	r2, [r3]
1899:./freeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1815              		.loc 1 1899 3 is_stmt 1 view .LVU506
1899:./freeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1816              		.loc 1 1899 21 is_stmt 0 view .LVU507
 1817 0038 084B     		ldr	r3, .L124+16
 1818 003a 0122     		movs	r2, #1
 1819 003c 1A60     		str	r2, [r3]
1900:./freeRTOS/tasks.c **** 
 1820              		.loc 1 1900 3 is_stmt 1 view .LVU508
1900:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 129


 1821              		.loc 1 1900 14 is_stmt 0 view .LVU509
 1822 003e 084B     		ldr	r3, .L124+20
 1823 0040 0022     		movs	r2, #0
 1824 0042 1A60     		str	r2, [r3]
1905:./freeRTOS/tasks.c **** 
 1825              		.loc 1 1905 43 is_stmt 1 view .LVU510
1909:./freeRTOS/tasks.c **** 		{
 1826              		.loc 1 1909 3 view .LVU511
1909:./freeRTOS/tasks.c **** 		{
 1827              		.loc 1 1909 7 is_stmt 0 view .LVU512
 1828 0044 FFF7FEFF 		bl	xPortStartScheduler
 1829              	.LVL145:
1924:./freeRTOS/tasks.c **** 	}
 1830              		.loc 1 1924 67 is_stmt 1 view .LVU513
1929:./freeRTOS/tasks.c **** }
 1831              		.loc 1 1929 2 view .LVU514
1930:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1832              		.loc 1 1930 1 is_stmt 0 view .LVU515
 1833 0048 E7E7     		b	.L120
 1834              	.L125:
 1835 004a 00BF     		.align	2
 1836              	.L124:
 1837 004c 00000000 		.word	.LANCHOR17
 1838 0050 00000000 		.word	.LC0
 1839 0054 00000000 		.word	prvIdleTask
 1840 0058 00000000 		.word	.LANCHOR3
 1841 005c 00000000 		.word	.LANCHOR11
 1842 0060 00000000 		.word	.LANCHOR14
 1843              		.cfi_endproc
 1844              	.LFE18:
 1846              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1847              		.align	1
 1848              		.global	vTaskEndScheduler
 1849              		.syntax unified
 1850              		.thumb
 1851              		.thumb_func
 1852              		.fpu fpv4-sp-d16
 1854              	vTaskEndScheduler:
 1855              	.LFB19:
1934:./freeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1856              		.loc 1 1934 1 is_stmt 1 view -0
 1857              		.cfi_startproc
 1858              		@ args = 0, pretend = 0, frame = 0
 1859              		@ frame_needed = 0, uses_anonymous_args = 0
 1860 0000 08B5     		push	{r3, lr}
 1861              	.LCFI19:
 1862              		.cfi_def_cfa_offset 8
 1863              		.cfi_offset 3, -8
 1864              		.cfi_offset 14, -4
1938:./freeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1865              		.loc 1 1938 2 view .LVU517
 1866              	.LBB38:
 1867              	.LBI38:
 233:freeRTOS/GCC/portmacro.h **** {
 1868              		.loc 2 233 30 view .LVU518
 1869              	.LBB39:
 235:freeRTOS/GCC/portmacro.h **** 
ARM GAS  /tmp/cckkLGmm.s 			page 130


 1870              		.loc 2 235 1 view .LVU519
 237:freeRTOS/GCC/portmacro.h **** 	(
 1871              		.loc 2 237 2 view .LVU520
 1872              		.syntax unified
 1873              	@ 237 "freeRTOS/GCC/portmacro.h" 1
 1874 0002 4FF0BF03 			mov r3, #191												
 1875 0006 83F31188 		msr basepri, r3											
 1876 000a BFF36F8F 		isb														
 1877 000e BFF34F8F 		dsb														
 1878              	
 1879              	@ 0 "" 2
 1880              		.thumb
 1881              		.syntax unified
 1882              	.LBE39:
 1883              	.LBE38:
1939:./freeRTOS/tasks.c **** 	vPortEndScheduler();
 1884              		.loc 1 1939 2 view .LVU521
1939:./freeRTOS/tasks.c **** 	vPortEndScheduler();
 1885              		.loc 1 1939 20 is_stmt 0 view .LVU522
 1886 0012 034B     		ldr	r3, .L128
 1887 0014 0022     		movs	r2, #0
 1888 0016 1A60     		str	r2, [r3]
1940:./freeRTOS/tasks.c **** }
 1889              		.loc 1 1940 2 is_stmt 1 view .LVU523
 1890 0018 FFF7FEFF 		bl	vPortEndScheduler
 1891              	.LVL146:
1941:./freeRTOS/tasks.c **** /*----------------------------------------------------------*/
 1892              		.loc 1 1941 1 is_stmt 0 view .LVU524
 1893 001c 08BD     		pop	{r3, pc}
 1894              	.L129:
 1895 001e 00BF     		.align	2
 1896              	.L128:
 1897 0020 00000000 		.word	.LANCHOR11
 1898              		.cfi_endproc
 1899              	.LFE19:
 1901              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1902              		.align	1
 1903              		.global	vTaskSuspendAll
 1904              		.syntax unified
 1905              		.thumb
 1906              		.thumb_func
 1907              		.fpu fpv4-sp-d16
 1909              	vTaskSuspendAll:
 1910              	.LFB20:
1945:./freeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
 1911              		.loc 1 1945 1 is_stmt 1 view -0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 0
 1914              		@ frame_needed = 0, uses_anonymous_args = 0
 1915              		@ link register save eliminated.
1950:./freeRTOS/tasks.c **** }
 1916              		.loc 1 1950 2 view .LVU526
 1917 0000 024A     		ldr	r2, .L131
 1918 0002 1368     		ldr	r3, [r2]
 1919 0004 0133     		adds	r3, r3, #1
 1920 0006 1360     		str	r3, [r2]
1951:./freeRTOS/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  /tmp/cckkLGmm.s 			page 131


 1921              		.loc 1 1951 1 is_stmt 0 view .LVU527
 1922 0008 7047     		bx	lr
 1923              	.L132:
 1924 000a 00BF     		.align	2
 1925              	.L131:
 1926 000c 00000000 		.word	.LANCHOR16
 1927              		.cfi_endproc
 1928              	.LFE20:
 1930              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1931              		.align	1
 1932              		.global	xTaskGetTickCount
 1933              		.syntax unified
 1934              		.thumb
 1935              		.thumb_func
 1936              		.fpu fpv4-sp-d16
 1938              	xTaskGetTickCount:
 1939              	.LFB22:
2128:./freeRTOS/tasks.c **** TickType_t xTicks;
 1940              		.loc 1 2128 1 is_stmt 1 view -0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 0
 1943              		@ frame_needed = 0, uses_anonymous_args = 0
 1944              		@ link register save eliminated.
2129:./freeRTOS/tasks.c **** 
 1945              		.loc 1 2129 1 view .LVU529
2132:./freeRTOS/tasks.c **** 	{
 1946              		.loc 1 2132 32 view .LVU530
2134:./freeRTOS/tasks.c **** 	}
 1947              		.loc 1 2134 3 view .LVU531
2134:./freeRTOS/tasks.c **** 	}
 1948              		.loc 1 2134 10 is_stmt 0 view .LVU532
 1949 0000 014B     		ldr	r3, .L134
 1950 0002 1868     		ldr	r0, [r3]
 1951              	.LVL147:
2136:./freeRTOS/tasks.c **** 
 1952              		.loc 1 2136 31 is_stmt 1 view .LVU533
2138:./freeRTOS/tasks.c **** }
 1953              		.loc 1 2138 2 view .LVU534
2139:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1954              		.loc 1 2139 1 is_stmt 0 view .LVU535
 1955 0004 7047     		bx	lr
 1956              	.L135:
 1957 0006 00BF     		.align	2
 1958              	.L134:
 1959 0008 00000000 		.word	.LANCHOR14
 1960              		.cfi_endproc
 1961              	.LFE22:
 1963              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1964              		.align	1
 1965              		.global	xTaskGetTickCountFromISR
 1966              		.syntax unified
 1967              		.thumb
 1968              		.thumb_func
 1969              		.fpu fpv4-sp-d16
 1971              	xTaskGetTickCountFromISR:
 1972              	.LFB23:
2143:./freeRTOS/tasks.c **** TickType_t xReturn;
ARM GAS  /tmp/cckkLGmm.s 			page 132


 1973              		.loc 1 2143 1 is_stmt 1 view -0
 1974              		.cfi_startproc
 1975              		@ args = 0, pretend = 0, frame = 0
 1976              		@ frame_needed = 0, uses_anonymous_args = 0
 1977              		@ link register save eliminated.
2144:./freeRTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
 1978              		.loc 1 2144 1 view .LVU537
2145:./freeRTOS/tasks.c **** 
 1979              		.loc 1 2145 1 view .LVU538
2161:./freeRTOS/tasks.c **** 
 1980              		.loc 1 2161 44 view .LVU539
2163:./freeRTOS/tasks.c **** 	{
 1981              		.loc 1 2163 2 view .LVU540
 1982              	.LVL148:
2165:./freeRTOS/tasks.c **** 	}
 1983              		.loc 1 2165 3 view .LVU541
2165:./freeRTOS/tasks.c **** 	}
 1984              		.loc 1 2165 11 is_stmt 0 view .LVU542
 1985 0000 014B     		ldr	r3, .L137
 1986 0002 1868     		ldr	r0, [r3]
 1987              	.LVL149:
2167:./freeRTOS/tasks.c **** 
 1988              		.loc 1 2167 2 is_stmt 1 view .LVU543
2169:./freeRTOS/tasks.c **** }
 1989              		.loc 1 2169 2 view .LVU544
2170:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1990              		.loc 1 2170 1 is_stmt 0 view .LVU545
 1991 0004 7047     		bx	lr
 1992              	.L138:
 1993 0006 00BF     		.align	2
 1994              	.L137:
 1995 0008 00000000 		.word	.LANCHOR14
 1996              		.cfi_endproc
 1997              	.LFE23:
 1999              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2000              		.align	1
 2001              		.global	uxTaskGetNumberOfTasks
 2002              		.syntax unified
 2003              		.thumb
 2004              		.thumb_func
 2005              		.fpu fpv4-sp-d16
 2007              	uxTaskGetNumberOfTasks:
 2008              	.LFB24:
2174:./freeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
 2009              		.loc 1 2174 1 is_stmt 1 view -0
 2010              		.cfi_startproc
 2011              		@ args = 0, pretend = 0, frame = 0
 2012              		@ frame_needed = 0, uses_anonymous_args = 0
 2013              		@ link register save eliminated.
2177:./freeRTOS/tasks.c **** }
 2014              		.loc 1 2177 2 view .LVU547
2177:./freeRTOS/tasks.c **** }
 2015              		.loc 1 2177 9 is_stmt 0 view .LVU548
 2016 0000 014B     		ldr	r3, .L140
 2017 0002 1868     		ldr	r0, [r3]
2178:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2018              		.loc 1 2178 1 view .LVU549
ARM GAS  /tmp/cckkLGmm.s 			page 133


 2019 0004 7047     		bx	lr
 2020              	.L141:
 2021 0006 00BF     		.align	2
 2022              	.L140:
 2023 0008 00000000 		.word	.LANCHOR9
 2024              		.cfi_endproc
 2025              	.LFE24:
 2027              		.section	.text.pcTaskGetName,"ax",%progbits
 2028              		.align	1
 2029              		.global	pcTaskGetName
 2030              		.syntax unified
 2031              		.thumb
 2032              		.thumb_func
 2033              		.fpu fpv4-sp-d16
 2035              	pcTaskGetName:
 2036              	.LVL150:
 2037              	.LFB25:
2182:./freeRTOS/tasks.c **** TCB_t *pxTCB;
 2038              		.loc 1 2182 1 is_stmt 1 view -0
 2039              		.cfi_startproc
 2040              		@ args = 0, pretend = 0, frame = 0
 2041              		@ frame_needed = 0, uses_anonymous_args = 0
 2042              		@ link register save eliminated.
2183:./freeRTOS/tasks.c **** 
 2043              		.loc 1 2183 1 view .LVU551
2187:./freeRTOS/tasks.c **** 	configASSERT( pxTCB );
 2044              		.loc 1 2187 2 view .LVU552
2187:./freeRTOS/tasks.c **** 	configASSERT( pxTCB );
 2045              		.loc 1 2187 10 is_stmt 0 view .LVU553
 2046 0000 0346     		mov	r3, r0
 2047 0002 10B1     		cbz	r0, .L144
 2048              	.LVL151:
 2049              	.L143:
2188:./freeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2050              		.loc 1 2188 23 is_stmt 1 discriminator 4 view .LVU554
2189:./freeRTOS/tasks.c **** }
 2051              		.loc 1 2189 2 discriminator 4 view .LVU555
2190:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2052              		.loc 1 2190 1 is_stmt 0 discriminator 4 view .LVU556
 2053 0004 03F13400 		add	r0, r3, #52
 2054 0008 7047     		bx	lr
 2055              	.LVL152:
 2056              	.L144:
2187:./freeRTOS/tasks.c **** 	configASSERT( pxTCB );
 2057              		.loc 1 2187 10 discriminator 1 view .LVU557
 2058 000a 014B     		ldr	r3, .L145
 2059 000c 1B68     		ldr	r3, [r3]
 2060              	.LVL153:
2187:./freeRTOS/tasks.c **** 	configASSERT( pxTCB );
 2061              		.loc 1 2187 10 discriminator 1 view .LVU558
 2062 000e F9E7     		b	.L143
 2063              	.L146:
 2064              		.align	2
 2065              	.L145:
 2066 0010 00000000 		.word	.LANCHOR10
 2067              		.cfi_endproc
 2068              	.LFE25:
ARM GAS  /tmp/cckkLGmm.s 			page 134


 2070              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2071              		.align	1
 2072              		.global	xTaskIncrementTick
 2073              		.syntax unified
 2074              		.thumb
 2075              		.thumb_func
 2076              		.fpu fpv4-sp-d16
 2078              	xTaskIncrementTick:
 2079              	.LFB26:
2500:./freeRTOS/tasks.c **** TCB_t * pxTCB;
 2080              		.loc 1 2500 1 is_stmt 1 view -0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 0
 2083              		@ frame_needed = 0, uses_anonymous_args = 0
 2084 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2085              	.LCFI20:
 2086              		.cfi_def_cfa_offset 24
 2087              		.cfi_offset 3, -24
 2088              		.cfi_offset 4, -20
 2089              		.cfi_offset 5, -16
 2090              		.cfi_offset 6, -12
 2091              		.cfi_offset 7, -8
 2092              		.cfi_offset 14, -4
2501:./freeRTOS/tasks.c **** TickType_t xItemValue;
 2093              		.loc 1 2501 1 view .LVU560
2502:./freeRTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2094              		.loc 1 2502 1 view .LVU561
2503:./freeRTOS/tasks.c **** 
 2095              		.loc 1 2503 1 view .LVU562
 2096              	.LVL154:
2508:./freeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2097              		.loc 1 2508 40 view .LVU563
2509:./freeRTOS/tasks.c **** 	{
 2098              		.loc 1 2509 2 view .LVU564
2509:./freeRTOS/tasks.c **** 	{
 2099              		.loc 1 2509 27 is_stmt 0 view .LVU565
 2100 0002 344B     		ldr	r3, .L167
 2101 0004 1B68     		ldr	r3, [r3]
2509:./freeRTOS/tasks.c **** 	{
 2102              		.loc 1 2509 4 view .LVU566
 2103 0006 002B     		cmp	r3, #0
 2104 0008 58D1     		bne	.L148
 2105              	.LBB40:
2513:./freeRTOS/tasks.c **** 
 2106              		.loc 1 2513 3 is_stmt 1 view .LVU567
2513:./freeRTOS/tasks.c **** 
 2107              		.loc 1 2513 49 is_stmt 0 view .LVU568
 2108 000a 334B     		ldr	r3, .L167+4
 2109 000c 1E68     		ldr	r6, [r3]
2513:./freeRTOS/tasks.c **** 
 2110              		.loc 1 2513 20 view .LVU569
 2111 000e 0136     		adds	r6, r6, #1
 2112              	.LVL155:
2517:./freeRTOS/tasks.c **** 
 2113              		.loc 1 2517 3 is_stmt 1 view .LVU570
2517:./freeRTOS/tasks.c **** 
 2114              		.loc 1 2517 14 is_stmt 0 view .LVU571
ARM GAS  /tmp/cckkLGmm.s 			page 135


 2115 0010 1E60     		str	r6, [r3]
2519:./freeRTOS/tasks.c **** 		{
 2116              		.loc 1 2519 3 is_stmt 1 view .LVU572
2519:./freeRTOS/tasks.c **** 		{
 2117              		.loc 1 2519 5 is_stmt 0 view .LVU573
 2118 0012 86B1     		cbz	r6, .L164
 2119              	.L149:
2525:./freeRTOS/tasks.c **** 		}
 2120              		.loc 1 2525 28 is_stmt 1 view .LVU574
2532:./freeRTOS/tasks.c **** 		{
 2121              		.loc 1 2532 3 view .LVU575
2532:./freeRTOS/tasks.c **** 		{
 2122              		.loc 1 2532 23 is_stmt 0 view .LVU576
 2123 0014 314B     		ldr	r3, .L167+8
 2124 0016 1B68     		ldr	r3, [r3]
2532:./freeRTOS/tasks.c **** 		{
 2125              		.loc 1 2532 5 view .LVU577
 2126 0018 B342     		cmp	r3, r6
 2127 001a 45D9     		bls	.L159
 2128              	.LBE40:
2503:./freeRTOS/tasks.c **** 
 2129              		.loc 1 2503 12 view .LVU578
 2130 001c 0027     		movs	r7, #0
 2131              	.LVL156:
 2132              	.L151:
 2133              	.LBB42:
2615:./freeRTOS/tasks.c **** 			{
 2134              		.loc 1 2615 4 is_stmt 1 view .LVU579
2615:./freeRTOS/tasks.c **** 			{
 2135              		.loc 1 2615 8 is_stmt 0 view .LVU580
 2136 001e 304B     		ldr	r3, .L167+12
 2137 0020 1B68     		ldr	r3, [r3]
 2138 0022 DB6A     		ldr	r3, [r3, #44]
 2139 0024 03EB8303 		add	r3, r3, r3, lsl #2
 2140 0028 9A00     		lsls	r2, r3, #2
 2141 002a 2E4B     		ldr	r3, .L167+16
 2142 002c 9B58     		ldr	r3, [r3, r2]
2615:./freeRTOS/tasks.c **** 			{
 2143              		.loc 1 2615 6 view .LVU581
 2144 002e 012B     		cmp	r3, #1
 2145 0030 49D9     		bls	.L157
2617:./freeRTOS/tasks.c **** 			}
 2146              		.loc 1 2617 21 view .LVU582
 2147 0032 0127     		movs	r7, #1
 2148              	.LVL157:
2617:./freeRTOS/tasks.c **** 			}
 2149              		.loc 1 2617 21 view .LVU583
 2150 0034 47E0     		b	.L157
 2151              	.LVL158:
 2152              	.L164:
 2153              	.LBB41:
2521:./freeRTOS/tasks.c **** 		}
 2154              		.loc 1 2521 4 is_stmt 1 view .LVU584
2521:./freeRTOS/tasks.c **** 		}
 2155              		.loc 1 2521 4 view .LVU585
2521:./freeRTOS/tasks.c **** 		}
 2156              		.loc 1 2521 4 view .LVU586
ARM GAS  /tmp/cckkLGmm.s 			page 136


 2157 0036 2C4A     		ldr	r2, .L167+20
 2158 0038 1168     		ldr	r1, [r2]
 2159              	.LVL159:
2521:./freeRTOS/tasks.c **** 		}
 2160              		.loc 1 2521 4 view .LVU587
 2161 003a 2C4B     		ldr	r3, .L167+24
 2162 003c 1868     		ldr	r0, [r3]
 2163 003e 1060     		str	r0, [r2]
2521:./freeRTOS/tasks.c **** 		}
 2164              		.loc 1 2521 4 view .LVU588
 2165 0040 1960     		str	r1, [r3]
2521:./freeRTOS/tasks.c **** 		}
 2166              		.loc 1 2521 4 view .LVU589
 2167 0042 2B4A     		ldr	r2, .L167+28
 2168 0044 1368     		ldr	r3, [r2]
 2169 0046 0133     		adds	r3, r3, #1
 2170 0048 1360     		str	r3, [r2]
2521:./freeRTOS/tasks.c **** 		}
 2171              		.loc 1 2521 4 view .LVU590
 2172 004a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2173              	.LVL160:
2521:./freeRTOS/tasks.c **** 		}
 2174              		.loc 1 2521 4 is_stmt 0 view .LVU591
 2175              	.LBE41:
2521:./freeRTOS/tasks.c **** 		}
 2176              		.loc 1 2521 30 is_stmt 1 view .LVU592
 2177 004e E1E7     		b	.L149
 2178              	.LVL161:
 2179              	.L160:
2598:./freeRTOS/tasks.c **** 						}
 2180              		.loc 1 2598 24 is_stmt 0 view .LVU593
 2181 0050 0127     		movs	r7, #1
 2182              	.LVL162:
 2183              	.L150:
2534:./freeRTOS/tasks.c **** 			{
 2184              		.loc 1 2534 4 is_stmt 1 view .LVU594
2536:./freeRTOS/tasks.c **** 				{
 2185              		.loc 1 2536 5 view .LVU595
2536:./freeRTOS/tasks.c **** 				{
 2186              		.loc 1 2536 9 is_stmt 0 view .LVU596
 2187 0052 254B     		ldr	r3, .L167+20
 2188 0054 1B68     		ldr	r3, [r3]
 2189 0056 1B68     		ldr	r3, [r3]
2536:./freeRTOS/tasks.c **** 				{
 2190              		.loc 1 2536 48 view .LVU597
 2191 0058 43B3     		cbz	r3, .L165
2552:./freeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2192              		.loc 1 2552 6 is_stmt 1 view .LVU598
2552:./freeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2193              		.loc 1 2552 26 is_stmt 0 view .LVU599
 2194 005a 234B     		ldr	r3, .L167+20
 2195 005c 1B68     		ldr	r3, [r3]
 2196 005e DB68     		ldr	r3, [r3, #12]
2552:./freeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2197              		.loc 1 2552 12 view .LVU600
 2198 0060 DC68     		ldr	r4, [r3, #12]
 2199              	.LVL163:
ARM GAS  /tmp/cckkLGmm.s 			page 137


2553:./freeRTOS/tasks.c **** 
 2200              		.loc 1 2553 6 is_stmt 1 view .LVU601
2553:./freeRTOS/tasks.c **** 
 2201              		.loc 1 2553 17 is_stmt 0 view .LVU602
 2202 0062 6368     		ldr	r3, [r4, #4]
 2203              	.LVL164:
2555:./freeRTOS/tasks.c **** 					{
 2204              		.loc 1 2555 6 is_stmt 1 view .LVU603
2555:./freeRTOS/tasks.c **** 					{
 2205              		.loc 1 2555 8 is_stmt 0 view .LVU604
 2206 0064 9E42     		cmp	r6, r3
 2207 0066 26D3     		bcc	.L166
2567:./freeRTOS/tasks.c **** 					}
 2208              		.loc 1 2567 31 is_stmt 1 view .LVU605
2571:./freeRTOS/tasks.c **** 
 2209              		.loc 1 2571 6 view .LVU606
2571:./freeRTOS/tasks.c **** 
 2210              		.loc 1 2571 15 is_stmt 0 view .LVU607
 2211 0068 251D     		adds	r5, r4, #4
 2212 006a 2846     		mov	r0, r5
 2213 006c FFF7FEFF 		bl	uxListRemove
 2214              	.LVL165:
2575:./freeRTOS/tasks.c **** 					{
 2215              		.loc 1 2575 6 is_stmt 1 view .LVU608
2575:./freeRTOS/tasks.c **** 					{
 2216              		.loc 1 2575 10 is_stmt 0 view .LVU609
 2217 0070 A36A     		ldr	r3, [r4, #40]
2575:./freeRTOS/tasks.c **** 					{
 2218              		.loc 1 2575 8 view .LVU610
 2219 0072 1BB1     		cbz	r3, .L154
2577:./freeRTOS/tasks.c **** 					}
 2220              		.loc 1 2577 7 is_stmt 1 view .LVU611
2577:./freeRTOS/tasks.c **** 					}
 2221              		.loc 1 2577 16 is_stmt 0 view .LVU612
 2222 0074 04F11800 		add	r0, r4, #24
 2223 0078 FFF7FEFF 		bl	uxListRemove
 2224              	.LVL166:
 2225              	.L154:
2581:./freeRTOS/tasks.c **** 					}
 2226              		.loc 1 2581 31 is_stmt 1 view .LVU613
2586:./freeRTOS/tasks.c **** 
 2227              		.loc 1 2586 6 view .LVU614
2586:./freeRTOS/tasks.c **** 
 2228              		.loc 1 2586 6 view .LVU615
 2229 007c E36A     		ldr	r3, [r4, #44]
 2230 007e 0122     		movs	r2, #1
 2231 0080 9A40     		lsls	r2, r2, r3
 2232 0082 1C49     		ldr	r1, .L167+32
 2233 0084 0868     		ldr	r0, [r1]
 2234 0086 0243     		orrs	r2, r2, r0
 2235 0088 0A60     		str	r2, [r1]
2586:./freeRTOS/tasks.c **** 
 2236              		.loc 1 2586 6 view .LVU616
 2237 008a 03EB8303 		add	r3, r3, r3, lsl #2
 2238 008e 9A00     		lsls	r2, r3, #2
 2239 0090 2946     		mov	r1, r5
 2240 0092 1448     		ldr	r0, .L167+16
ARM GAS  /tmp/cckkLGmm.s 			page 138


 2241 0094 1044     		add	r0, r0, r2
 2242 0096 FFF7FEFF 		bl	vListInsertEnd
 2243              	.LVL167:
2586:./freeRTOS/tasks.c **** 
 2244              		.loc 1 2586 36 view .LVU617
2596:./freeRTOS/tasks.c **** 						{
 2245              		.loc 1 2596 7 view .LVU618
2596:./freeRTOS/tasks.c **** 						{
 2246              		.loc 1 2596 16 is_stmt 0 view .LVU619
 2247 009a E26A     		ldr	r2, [r4, #44]
2596:./freeRTOS/tasks.c **** 						{
 2248              		.loc 1 2596 44 view .LVU620
 2249 009c 104B     		ldr	r3, .L167+12
 2250 009e 1B68     		ldr	r3, [r3]
 2251 00a0 DB6A     		ldr	r3, [r3, #44]
2596:./freeRTOS/tasks.c **** 						{
 2252              		.loc 1 2596 9 view .LVU621
 2253 00a2 9A42     		cmp	r2, r3
 2254 00a4 D4D2     		bcs	.L160
 2255 00a6 D4E7     		b	.L150
 2256              	.LVL168:
 2257              	.L159:
2596:./freeRTOS/tasks.c **** 						{
 2258              		.loc 1 2596 9 view .LVU622
 2259              	.LBE42:
2503:./freeRTOS/tasks.c **** 
 2260              		.loc 1 2503 12 view .LVU623
 2261 00a8 0027     		movs	r7, #0
 2262 00aa D2E7     		b	.L150
 2263              	.LVL169:
 2264              	.L165:
 2265              	.LBB43:
2543:./freeRTOS/tasks.c **** 					break;
 2266              		.loc 1 2543 6 is_stmt 1 view .LVU624
2543:./freeRTOS/tasks.c **** 					break;
 2267              		.loc 1 2543 27 is_stmt 0 view .LVU625
 2268 00ac 0B4B     		ldr	r3, .L167+8
 2269 00ae 4FF0FF32 		mov	r2, #-1
 2270 00b2 1A60     		str	r2, [r3]
2544:./freeRTOS/tasks.c **** 				}
 2271              		.loc 1 2544 6 is_stmt 1 view .LVU626
 2272 00b4 B3E7     		b	.L151
 2273              	.LVL170:
 2274              	.L166:
2562:./freeRTOS/tasks.c **** 						break;
 2275              		.loc 1 2562 7 view .LVU627
2562:./freeRTOS/tasks.c **** 						break;
 2276              		.loc 1 2562 28 is_stmt 0 view .LVU628
 2277 00b6 094A     		ldr	r2, .L167+8
 2278 00b8 1360     		str	r3, [r2]
2563:./freeRTOS/tasks.c **** 					}
 2279              		.loc 1 2563 7 is_stmt 1 view .LVU629
 2280 00ba B0E7     		b	.L151
 2281              	.LVL171:
 2282              	.L148:
2563:./freeRTOS/tasks.c **** 					}
 2283              		.loc 1 2563 7 is_stmt 0 view .LVU630
ARM GAS  /tmp/cckkLGmm.s 			page 139


 2284              	.LBE43:
2643:./freeRTOS/tasks.c **** 
 2285              		.loc 1 2643 3 is_stmt 1 view .LVU631
 2286 00bc 0E4A     		ldr	r2, .L167+36
 2287 00be 1368     		ldr	r3, [r2]
 2288 00c0 0133     		adds	r3, r3, #1
 2289 00c2 1360     		str	r3, [r2]
2503:./freeRTOS/tasks.c **** 
 2290              		.loc 1 2503 12 is_stmt 0 view .LVU632
 2291 00c4 0027     		movs	r7, #0
 2292              	.LVL172:
 2293              	.L157:
2656:./freeRTOS/tasks.c **** 		{
 2294              		.loc 1 2656 3 is_stmt 1 view .LVU633
2656:./freeRTOS/tasks.c **** 		{
 2295              		.loc 1 2656 21 is_stmt 0 view .LVU634
 2296 00c6 0D4B     		ldr	r3, .L167+40
 2297 00c8 1B68     		ldr	r3, [r3]
2656:./freeRTOS/tasks.c **** 		{
 2298              		.loc 1 2656 5 view .LVU635
 2299 00ca 03B1     		cbz	r3, .L147
2658:./freeRTOS/tasks.c **** 		}
 2300              		.loc 1 2658 20 view .LVU636
 2301 00cc 0127     		movs	r7, #1
 2302              	.LVL173:
2662:./freeRTOS/tasks.c **** 		}
 2303              		.loc 1 2662 28 is_stmt 1 view .LVU637
2667:./freeRTOS/tasks.c **** }
 2304              		.loc 1 2667 2 view .LVU638
 2305              	.L147:
2668:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2306              		.loc 1 2668 1 is_stmt 0 view .LVU639
 2307 00ce 3846     		mov	r0, r7
 2308 00d0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2309              	.L168:
 2310 00d2 00BF     		.align	2
 2311              	.L167:
 2312 00d4 00000000 		.word	.LANCHOR16
 2313 00d8 00000000 		.word	.LANCHOR14
 2314 00dc 00000000 		.word	.LANCHOR3
 2315 00e0 00000000 		.word	.LANCHOR10
 2316 00e4 00000000 		.word	.LANCHOR4
 2317 00e8 00000000 		.word	.LANCHOR2
 2318 00ec 00000000 		.word	.LANCHOR8
 2319 00f0 00000000 		.word	.LANCHOR18
 2320 00f4 00000000 		.word	.LANCHOR13
 2321 00f8 00000000 		.word	.LANCHOR19
 2322 00fc 00000000 		.word	.LANCHOR20
 2323              		.cfi_endproc
 2324              	.LFE26:
 2326              		.section	.text.xTaskResumeAll,"ax",%progbits
 2327              		.align	1
 2328              		.global	xTaskResumeAll
 2329              		.syntax unified
 2330              		.thumb
 2331              		.thumb_func
 2332              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cckkLGmm.s 			page 140


 2334              	xTaskResumeAll:
 2335              	.LFB21:
2018:./freeRTOS/tasks.c **** TCB_t *pxTCB = NULL;
 2336              		.loc 1 2018 1 is_stmt 1 view -0
 2337              		.cfi_startproc
 2338              		@ args = 0, pretend = 0, frame = 0
 2339              		@ frame_needed = 0, uses_anonymous_args = 0
 2340 0000 38B5     		push	{r3, r4, r5, lr}
 2341              	.LCFI21:
 2342              		.cfi_def_cfa_offset 16
 2343              		.cfi_offset 3, -16
 2344              		.cfi_offset 4, -12
 2345              		.cfi_offset 5, -8
 2346              		.cfi_offset 14, -4
2019:./freeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2347              		.loc 1 2019 1 view .LVU641
 2348              	.LVL174:
2020:./freeRTOS/tasks.c **** 
 2349              		.loc 1 2020 1 view .LVU642
2024:./freeRTOS/tasks.c **** 
 2350              		.loc 1 2024 38 view .LVU643
2031:./freeRTOS/tasks.c **** 	{
 2351              		.loc 1 2031 2 view .LVU644
 2352 0002 FFF7FEFF 		bl	vPortEnterCritical
 2353              	.LVL175:
2033:./freeRTOS/tasks.c **** 
 2354              		.loc 1 2033 3 view .LVU645
 2355 0006 2E4B     		ldr	r3, .L183
 2356 0008 1A68     		ldr	r2, [r3]
 2357 000a 013A     		subs	r2, r2, #1
 2358 000c 1A60     		str	r2, [r3]
2035:./freeRTOS/tasks.c **** 		{
 2359              		.loc 1 2035 3 view .LVU646
2035:./freeRTOS/tasks.c **** 		{
 2360              		.loc 1 2035 28 is_stmt 0 view .LVU647
 2361 000e 1B68     		ldr	r3, [r3]
2035:./freeRTOS/tasks.c **** 		{
 2362              		.loc 1 2035 5 view .LVU648
 2363 0010 002B     		cmp	r3, #0
 2364 0012 4FD1     		bne	.L178
2037:./freeRTOS/tasks.c **** 			{
 2365              		.loc 1 2037 4 is_stmt 1 view .LVU649
2037:./freeRTOS/tasks.c **** 			{
 2366              		.loc 1 2037 31 is_stmt 0 view .LVU650
 2367 0014 2B4B     		ldr	r3, .L183+4
 2368 0016 1B68     		ldr	r3, [r3]
2037:./freeRTOS/tasks.c **** 			{
 2369              		.loc 1 2037 6 view .LVU651
 2370 0018 0BB9     		cbnz	r3, .L179
2020:./freeRTOS/tasks.c **** 
 2371              		.loc 1 2020 12 view .LVU652
 2372 001a 0024     		movs	r4, #0
 2373 001c 4BE0     		b	.L170
 2374              	.L179:
2019:./freeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2375              		.loc 1 2019 8 view .LVU653
 2376 001e 0024     		movs	r4, #0
ARM GAS  /tmp/cckkLGmm.s 			page 141


 2377              	.LVL176:
 2378              	.L171:
2056:./freeRTOS/tasks.c **** 					}
 2379              		.loc 1 2056 31 is_stmt 1 view .LVU654
2041:./freeRTOS/tasks.c **** 				{
 2380              		.loc 1 2041 10 view .LVU655
2041:./freeRTOS/tasks.c **** 				{
 2381              		.loc 1 2041 12 is_stmt 0 view .LVU656
 2382 0020 294B     		ldr	r3, .L183+8
 2383 0022 1B68     		ldr	r3, [r3]
2041:./freeRTOS/tasks.c **** 				{
 2384              		.loc 1 2041 10 view .LVU657
 2385 0024 1BB3     		cbz	r3, .L181
2043:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2386              		.loc 1 2043 6 is_stmt 1 view .LVU658
2043:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2387              		.loc 1 2043 26 is_stmt 0 view .LVU659
 2388 0026 284B     		ldr	r3, .L183+8
 2389 0028 DB68     		ldr	r3, [r3, #12]
2043:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2390              		.loc 1 2043 12 view .LVU660
 2391 002a DC68     		ldr	r4, [r3, #12]
 2392              	.LVL177:
2044:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2393              		.loc 1 2044 6 is_stmt 1 view .LVU661
2044:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2394              		.loc 1 2044 15 is_stmt 0 view .LVU662
 2395 002c 04F11800 		add	r0, r4, #24
 2396 0030 FFF7FEFF 		bl	uxListRemove
 2397              	.LVL178:
2045:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2398              		.loc 1 2045 6 is_stmt 1 view .LVU663
2045:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2399              		.loc 1 2045 15 is_stmt 0 view .LVU664
 2400 0034 251D     		adds	r5, r4, #4
 2401 0036 2846     		mov	r0, r5
 2402 0038 FFF7FEFF 		bl	uxListRemove
 2403              	.LVL179:
2046:./freeRTOS/tasks.c **** 
 2404              		.loc 1 2046 6 is_stmt 1 view .LVU665
2046:./freeRTOS/tasks.c **** 
 2405              		.loc 1 2046 6 view .LVU666
 2406 003c E06A     		ldr	r0, [r4, #44]
 2407 003e 0123     		movs	r3, #1
 2408 0040 8340     		lsls	r3, r3, r0
 2409 0042 224A     		ldr	r2, .L183+12
 2410 0044 1168     		ldr	r1, [r2]
 2411 0046 0B43     		orrs	r3, r3, r1
 2412 0048 1360     		str	r3, [r2]
2046:./freeRTOS/tasks.c **** 
 2413              		.loc 1 2046 6 view .LVU667
 2414 004a 00EB8000 		add	r0, r0, r0, lsl #2
 2415 004e 2946     		mov	r1, r5
 2416 0050 1F4B     		ldr	r3, .L183+16
 2417 0052 03EB8000 		add	r0, r3, r0, lsl #2
 2418 0056 FFF7FEFF 		bl	vListInsertEnd
 2419              	.LVL180:
ARM GAS  /tmp/cckkLGmm.s 			page 142


2046:./freeRTOS/tasks.c **** 
 2420              		.loc 1 2046 36 view .LVU668
2050:./freeRTOS/tasks.c **** 					{
 2421              		.loc 1 2050 6 view .LVU669
2050:./freeRTOS/tasks.c **** 					{
 2422              		.loc 1 2050 15 is_stmt 0 view .LVU670
 2423 005a E26A     		ldr	r2, [r4, #44]
2050:./freeRTOS/tasks.c **** 					{
 2424              		.loc 1 2050 43 view .LVU671
 2425 005c 1D4B     		ldr	r3, .L183+20
 2426 005e 1B68     		ldr	r3, [r3]
 2427 0060 DB6A     		ldr	r3, [r3, #44]
2050:./freeRTOS/tasks.c **** 					{
 2428              		.loc 1 2050 8 view .LVU672
 2429 0062 9A42     		cmp	r2, r3
 2430 0064 DCD3     		bcc	.L171
2052:./freeRTOS/tasks.c **** 					}
 2431              		.loc 1 2052 7 is_stmt 1 view .LVU673
2052:./freeRTOS/tasks.c **** 					}
 2432              		.loc 1 2052 21 is_stmt 0 view .LVU674
 2433 0066 1C4B     		ldr	r3, .L183+24
 2434 0068 0122     		movs	r2, #1
 2435 006a 1A60     		str	r2, [r3]
 2436 006c D8E7     		b	.L171
 2437              	.L181:
2060:./freeRTOS/tasks.c **** 				{
 2438              		.loc 1 2060 5 is_stmt 1 view .LVU675
2060:./freeRTOS/tasks.c **** 				{
 2439              		.loc 1 2060 7 is_stmt 0 view .LVU676
 2440 006e 0CB1     		cbz	r4, .L174
2068:./freeRTOS/tasks.c **** 				}
 2441              		.loc 1 2068 6 is_stmt 1 view .LVU677
 2442 0070 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2443              	.LVL181:
 2444              	.L174:
 2445              	.LBB44:
2076:./freeRTOS/tasks.c **** 
 2446              		.loc 1 2076 6 view .LVU678
2076:./freeRTOS/tasks.c **** 
 2447              		.loc 1 2076 18 is_stmt 0 view .LVU679
 2448 0074 194B     		ldr	r3, .L183+28
 2449 0076 1C68     		ldr	r4, [r3]
 2450              	.LVL182:
2078:./freeRTOS/tasks.c **** 					{
 2451              		.loc 1 2078 6 is_stmt 1 view .LVU680
2078:./freeRTOS/tasks.c **** 					{
 2452              		.loc 1 2078 8 is_stmt 0 view .LVU681
 2453 0078 84B9     		cbnz	r4, .L177
 2454              	.L175:
2097:./freeRTOS/tasks.c **** 					}
 2455              		.loc 1 2097 31 is_stmt 1 view .LVU682
 2456              	.LBE44:
2101:./freeRTOS/tasks.c **** 				{
 2457              		.loc 1 2101 5 view .LVU683
2101:./freeRTOS/tasks.c **** 				{
 2458              		.loc 1 2101 23 is_stmt 0 view .LVU684
 2459 007a 174B     		ldr	r3, .L183+24
ARM GAS  /tmp/cckkLGmm.s 			page 143


 2460 007c 1C68     		ldr	r4, [r3]
 2461              	.LVL183:
2101:./freeRTOS/tasks.c **** 				{
 2462              		.loc 1 2101 7 view .LVU685
 2463 007e D4B1     		cbz	r4, .L170
2105:./freeRTOS/tasks.c **** 					}
 2464              		.loc 1 2105 7 is_stmt 1 view .LVU686
 2465              	.LVL184:
2108:./freeRTOS/tasks.c **** 				}
 2466              		.loc 1 2108 6 view .LVU687
 2467 0080 4FF0E023 		mov	r3, #-536813568
 2468 0084 4FF08052 		mov	r2, #268435456
 2469 0088 C3F8042D 		str	r2, [r3, #3332]
2108:./freeRTOS/tasks.c **** 				}
 2470              		.loc 1 2108 6 view .LVU688
 2471              		.syntax unified
 2472              	@ 2108 "./freeRTOS/tasks.c" 1
 2473 008c BFF34F8F 		dsb
 2474              	@ 0 "" 2
2108:./freeRTOS/tasks.c **** 				}
 2475              		.loc 1 2108 6 view .LVU689
 2476              	@ 2108 "./freeRTOS/tasks.c" 1
 2477 0090 BFF36F8F 		isb
 2478              	@ 0 "" 2
2108:./freeRTOS/tasks.c **** 				}
 2479              		.loc 1 2108 37 view .LVU690
2105:./freeRTOS/tasks.c **** 					}
 2480              		.loc 1 2105 23 is_stmt 0 view .LVU691
 2481              		.thumb
 2482              		.syntax unified
 2483 0094 0124     		movs	r4, #1
 2484 0096 0EE0     		b	.L170
 2485              	.LVL185:
 2486              	.L176:
 2487              	.LBB45:
2088:./freeRTOS/tasks.c **** 							}
 2488              		.loc 1 2088 33 is_stmt 1 view .LVU692
2090:./freeRTOS/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2489              		.loc 1 2090 8 view .LVU693
2091:./freeRTOS/tasks.c **** 
 2490              		.loc 1 2091 14 view .LVU694
2091:./freeRTOS/tasks.c **** 
 2491              		.loc 1 2091 7 is_stmt 0 view .LVU695
 2492 0098 013C     		subs	r4, r4, #1
 2493              	.LVL186:
2091:./freeRTOS/tasks.c **** 
 2494              		.loc 1 2091 7 view .LVU696
 2495 009a 07D0     		beq	.L182
 2496              	.L177:
2080:./freeRTOS/tasks.c **** 						{
 2497              		.loc 1 2080 7 is_stmt 1 view .LVU697
2082:./freeRTOS/tasks.c **** 							{
 2498              		.loc 1 2082 8 view .LVU698
2082:./freeRTOS/tasks.c **** 							{
 2499              		.loc 1 2082 12 is_stmt 0 view .LVU699
 2500 009c FFF7FEFF 		bl	xTaskIncrementTick
 2501              	.LVL187:
ARM GAS  /tmp/cckkLGmm.s 			page 144


2082:./freeRTOS/tasks.c **** 							{
 2502              		.loc 1 2082 10 view .LVU700
 2503 00a0 0028     		cmp	r0, #0
 2504 00a2 F9D0     		beq	.L176
2084:./freeRTOS/tasks.c **** 							}
 2505              		.loc 1 2084 9 is_stmt 1 view .LVU701
2084:./freeRTOS/tasks.c **** 							}
 2506              		.loc 1 2084 23 is_stmt 0 view .LVU702
 2507 00a4 0C4B     		ldr	r3, .L183+24
 2508 00a6 0122     		movs	r2, #1
 2509 00a8 1A60     		str	r2, [r3]
 2510 00aa F5E7     		b	.L176
 2511              	.L182:
2093:./freeRTOS/tasks.c **** 					}
 2512              		.loc 1 2093 7 is_stmt 1 view .LVU703
2093:./freeRTOS/tasks.c **** 					}
 2513              		.loc 1 2093 21 is_stmt 0 view .LVU704
 2514 00ac 0B4B     		ldr	r3, .L183+28
 2515 00ae 0022     		movs	r2, #0
 2516 00b0 1A60     		str	r2, [r3]
 2517 00b2 E2E7     		b	.L175
 2518              	.LVL188:
 2519              	.L178:
2093:./freeRTOS/tasks.c **** 					}
 2520              		.loc 1 2093 21 view .LVU705
 2521              	.LBE45:
2020:./freeRTOS/tasks.c **** 
 2522              		.loc 1 2020 12 view .LVU706
 2523 00b4 0024     		movs	r4, #0
 2524              	.LVL189:
 2525              	.L170:
2118:./freeRTOS/tasks.c **** 		}
 2526              		.loc 1 2118 28 is_stmt 1 view .LVU707
2121:./freeRTOS/tasks.c **** 
 2527              		.loc 1 2121 2 view .LVU708
 2528 00b6 FFF7FEFF 		bl	vPortExitCritical
 2529              	.LVL190:
2123:./freeRTOS/tasks.c **** }
 2530              		.loc 1 2123 2 view .LVU709
2124:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2531              		.loc 1 2124 1 is_stmt 0 view .LVU710
 2532 00ba 2046     		mov	r0, r4
 2533 00bc 38BD     		pop	{r3, r4, r5, pc}
 2534              	.LVL191:
 2535              	.L184:
2124:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2536              		.loc 1 2124 1 view .LVU711
 2537 00be 00BF     		.align	2
 2538              	.L183:
 2539 00c0 00000000 		.word	.LANCHOR16
 2540 00c4 00000000 		.word	.LANCHOR9
 2541 00c8 00000000 		.word	.LANCHOR1
 2542 00cc 00000000 		.word	.LANCHOR13
 2543 00d0 00000000 		.word	.LANCHOR4
 2544 00d4 00000000 		.word	.LANCHOR10
 2545 00d8 00000000 		.word	.LANCHOR20
 2546 00dc 00000000 		.word	.LANCHOR19
ARM GAS  /tmp/cckkLGmm.s 			page 145


 2547              		.cfi_endproc
 2548              	.LFE21:
 2550              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2551              		.align	1
 2552              		.global	vTaskDelayUntil
 2553              		.syntax unified
 2554              		.thumb
 2555              		.thumb_func
 2556              		.fpu fpv4-sp-d16
 2558              	vTaskDelayUntil:
 2559              	.LVL192:
 2560              	.LFB9:
1141:./freeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 2561              		.loc 1 1141 2 is_stmt 1 view -0
 2562              		.cfi_startproc
 2563              		@ args = 0, pretend = 0, frame = 0
 2564              		@ frame_needed = 0, uses_anonymous_args = 0
1141:./freeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 2565              		.loc 1 1141 2 is_stmt 0 view .LVU713
 2566 0000 38B5     		push	{r3, r4, r5, lr}
 2567              	.LCFI22:
 2568              		.cfi_def_cfa_offset 16
 2569              		.cfi_offset 3, -16
 2570              		.cfi_offset 4, -12
 2571              		.cfi_offset 5, -8
 2572              		.cfi_offset 14, -4
 2573 0002 0546     		mov	r5, r0
 2574 0004 0C46     		mov	r4, r1
1142:./freeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2575              		.loc 1 1142 2 is_stmt 1 view .LVU714
1143:./freeRTOS/tasks.c **** 
 2576              		.loc 1 1143 2 view .LVU715
 2577              	.LVL193:
1145:./freeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2578              		.loc 1 1145 37 view .LVU716
1146:./freeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2579              		.loc 1 1146 42 view .LVU717
1147:./freeRTOS/tasks.c **** 
 2580              		.loc 1 1147 44 view .LVU718
1149:./freeRTOS/tasks.c **** 		{
 2581              		.loc 1 1149 3 view .LVU719
 2582 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2583              	.LVL194:
 2584              	.LBB46:
1153:./freeRTOS/tasks.c **** 
 2585              		.loc 1 1153 4 view .LVU720
1153:./freeRTOS/tasks.c **** 
 2586              		.loc 1 1153 21 is_stmt 0 view .LVU721
 2587 000a 144B     		ldr	r3, .L195
 2588 000c 1868     		ldr	r0, [r3]
 2589              	.LVL195:
1156:./freeRTOS/tasks.c **** 
 2590              		.loc 1 1156 4 is_stmt 1 view .LVU722
1156:./freeRTOS/tasks.c **** 
 2591              		.loc 1 1156 18 is_stmt 0 view .LVU723
 2592 000e 2A68     		ldr	r2, [r5]
1156:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 146


 2593              		.loc 1 1156 16 view .LVU724
 2594 0010 1444     		add	r4, r4, r2
 2595              	.LVL196:
1158:./freeRTOS/tasks.c **** 			{
 2596              		.loc 1 1158 4 is_stmt 1 view .LVU725
1158:./freeRTOS/tasks.c **** 			{
 2597              		.loc 1 1158 6 is_stmt 0 view .LVU726
 2598 0012 8242     		cmp	r2, r0
 2599 0014 09D9     		bls	.L186
1165:./freeRTOS/tasks.c **** 				{
 2600              		.loc 1 1165 5 is_stmt 1 view .LVU727
1165:./freeRTOS/tasks.c **** 				{
 2601              		.loc 1 1165 7 is_stmt 0 view .LVU728
 2602 0016 A242     		cmp	r2, r4
 2603 0018 01D8     		bhi	.L187
1190:./freeRTOS/tasks.c **** 
 2604              		.loc 1 1190 4 is_stmt 1 view .LVU729
1190:./freeRTOS/tasks.c **** 
 2605              		.loc 1 1190 24 is_stmt 0 view .LVU730
 2606 001a 2C60     		str	r4, [r5]
1192:./freeRTOS/tasks.c **** 			{
 2607              		.loc 1 1192 4 is_stmt 1 view .LVU731
 2608 001c 0EE0     		b	.L188
 2609              	.L187:
1165:./freeRTOS/tasks.c **** 				{
 2610              		.loc 1 1165 47 is_stmt 0 discriminator 1 view .LVU732
 2611 001e A042     		cmp	r0, r4
 2612 0020 01D3     		bcc	.L189
1190:./freeRTOS/tasks.c **** 
 2613              		.loc 1 1190 4 is_stmt 1 view .LVU733
1190:./freeRTOS/tasks.c **** 
 2614              		.loc 1 1190 24 is_stmt 0 view .LVU734
 2615 0022 2C60     		str	r4, [r5]
1192:./freeRTOS/tasks.c **** 			{
 2616              		.loc 1 1192 4 is_stmt 1 view .LVU735
 2617 0024 0AE0     		b	.L188
 2618              	.L189:
1167:./freeRTOS/tasks.c **** 				}
 2619              		.loc 1 1167 6 view .LVU736
 2620              	.LVL197:
1190:./freeRTOS/tasks.c **** 
 2621              		.loc 1 1190 4 view .LVU737
1190:./freeRTOS/tasks.c **** 
 2622              		.loc 1 1190 24 is_stmt 0 view .LVU738
 2623 0026 2C60     		str	r4, [r5]
1192:./freeRTOS/tasks.c **** 			{
 2624              		.loc 1 1192 4 is_stmt 1 view .LVU739
 2625 0028 04E0     		b	.L190
 2626              	.LVL198:
 2627              	.L186:
1179:./freeRTOS/tasks.c **** 				{
 2628              		.loc 1 1179 5 view .LVU740
1179:./freeRTOS/tasks.c **** 				{
 2629              		.loc 1 1179 7 is_stmt 0 view .LVU741
 2630 002a A242     		cmp	r2, r4
 2631 002c 01D8     		bhi	.L191
1179:./freeRTOS/tasks.c **** 				{
ARM GAS  /tmp/cckkLGmm.s 			page 147


 2632              		.loc 1 1179 47 discriminator 1 view .LVU742
 2633 002e A042     		cmp	r0, r4
 2634 0030 12D2     		bcs	.L192
 2635              	.L191:
1181:./freeRTOS/tasks.c **** 				}
 2636              		.loc 1 1181 6 is_stmt 1 view .LVU743
 2637              	.LVL199:
1190:./freeRTOS/tasks.c **** 
 2638              		.loc 1 1190 4 view .LVU744
1190:./freeRTOS/tasks.c **** 
 2639              		.loc 1 1190 24 is_stmt 0 view .LVU745
 2640 0032 2C60     		str	r4, [r5]
1192:./freeRTOS/tasks.c **** 			{
 2641              		.loc 1 1192 4 is_stmt 1 view .LVU746
 2642              	.L190:
1194:./freeRTOS/tasks.c **** 
 2643              		.loc 1 1194 41 view .LVU747
1198:./freeRTOS/tasks.c **** 			}
 2644              		.loc 1 1198 5 view .LVU748
 2645 0034 0021     		movs	r1, #0
 2646 0036 201A     		subs	r0, r4, r0
 2647              	.LVL200:
1198:./freeRTOS/tasks.c **** 			}
 2648              		.loc 1 1198 5 is_stmt 0 view .LVU749
 2649 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2650              	.LVL201:
 2651              	.L188:
1202:./freeRTOS/tasks.c **** 			}
 2652              		.loc 1 1202 29 is_stmt 1 view .LVU750
 2653              	.LBE46:
1205:./freeRTOS/tasks.c **** 
 2654              		.loc 1 1205 3 view .LVU751
1205:./freeRTOS/tasks.c **** 
 2655              		.loc 1 1205 21 is_stmt 0 view .LVU752
 2656 003c FFF7FEFF 		bl	xTaskResumeAll
 2657              	.LVL202:
1209:./freeRTOS/tasks.c **** 		{
 2658              		.loc 1 1209 3 is_stmt 1 view .LVU753
1209:./freeRTOS/tasks.c **** 		{
 2659              		.loc 1 1209 5 is_stmt 0 view .LVU754
 2660 0040 48B9     		cbnz	r0, .L185
1211:./freeRTOS/tasks.c **** 		}
 2661              		.loc 1 1211 4 is_stmt 1 view .LVU755
 2662 0042 4FF0E023 		mov	r3, #-536813568
 2663 0046 4FF08052 		mov	r2, #268435456
 2664 004a C3F8042D 		str	r2, [r3, #3332]
1211:./freeRTOS/tasks.c **** 		}
 2665              		.loc 1 1211 4 view .LVU756
 2666              		.syntax unified
 2667              	@ 1211 "./freeRTOS/tasks.c" 1
 2668 004e BFF34F8F 		dsb
 2669              	@ 0 "" 2
1211:./freeRTOS/tasks.c **** 		}
 2670              		.loc 1 1211 4 view .LVU757
 2671              	@ 1211 "./freeRTOS/tasks.c" 1
 2672 0052 BFF36F8F 		isb
 2673              	@ 0 "" 2
ARM GAS  /tmp/cckkLGmm.s 			page 148


1211:./freeRTOS/tasks.c **** 		}
 2674              		.loc 1 1211 26 view .LVU758
1215:./freeRTOS/tasks.c **** 		}
 2675              		.loc 1 1215 28 view .LVU759
 2676              		.thumb
 2677              		.syntax unified
 2678              	.L185:
1217:./freeRTOS/tasks.c **** 
 2679              		.loc 1 1217 2 is_stmt 0 view .LVU760
 2680 0056 38BD     		pop	{r3, r4, r5, pc}
 2681              	.LVL203:
 2682              	.L192:
 2683              	.LBB47:
1190:./freeRTOS/tasks.c **** 
 2684              		.loc 1 1190 4 is_stmt 1 view .LVU761
1190:./freeRTOS/tasks.c **** 
 2685              		.loc 1 1190 24 is_stmt 0 view .LVU762
 2686 0058 2C60     		str	r4, [r5]
1192:./freeRTOS/tasks.c **** 			{
 2687              		.loc 1 1192 4 is_stmt 1 view .LVU763
 2688 005a EFE7     		b	.L188
 2689              	.L196:
 2690              		.align	2
 2691              	.L195:
 2692 005c 00000000 		.word	.LANCHOR14
 2693              	.LBE47:
 2694              		.cfi_endproc
 2695              	.LFE9:
 2697              		.section	.text.vTaskDelay,"ax",%progbits
 2698              		.align	1
 2699              		.global	vTaskDelay
 2700              		.syntax unified
 2701              		.thumb
 2702              		.thumb_func
 2703              		.fpu fpv4-sp-d16
 2705              	vTaskDelay:
 2706              	.LVL204:
 2707              	.LFB10:
1225:./freeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2708              		.loc 1 1225 2 view -0
 2709              		.cfi_startproc
 2710              		@ args = 0, pretend = 0, frame = 0
 2711              		@ frame_needed = 0, uses_anonymous_args = 0
1225:./freeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2712              		.loc 1 1225 2 is_stmt 0 view .LVU765
 2713 0000 10B5     		push	{r4, lr}
 2714              	.LCFI23:
 2715              		.cfi_def_cfa_offset 8
 2716              		.cfi_offset 4, -8
 2717              		.cfi_offset 14, -4
1226:./freeRTOS/tasks.c **** 
 2718              		.loc 1 1226 2 is_stmt 1 view .LVU766
 2719              	.LVL205:
1229:./freeRTOS/tasks.c **** 		{
 2720              		.loc 1 1229 3 view .LVU767
1229:./freeRTOS/tasks.c **** 		{
 2721              		.loc 1 1229 5 is_stmt 0 view .LVU768
ARM GAS  /tmp/cckkLGmm.s 			page 149


 2722 0002 50B9     		cbnz	r0, .L201
 2723              	.LVL206:
 2724              	.L198:
1256:./freeRTOS/tasks.c **** 		}
 2725              		.loc 1 1256 4 is_stmt 1 view .LVU769
 2726 0004 4FF0E023 		mov	r3, #-536813568
 2727 0008 4FF08052 		mov	r2, #268435456
 2728 000c C3F8042D 		str	r2, [r3, #3332]
1256:./freeRTOS/tasks.c **** 		}
 2729              		.loc 1 1256 4 view .LVU770
 2730              		.syntax unified
 2731              	@ 1256 "./freeRTOS/tasks.c" 1
 2732 0010 BFF34F8F 		dsb
 2733              	@ 0 "" 2
1256:./freeRTOS/tasks.c **** 		}
 2734              		.loc 1 1256 4 view .LVU771
 2735              	@ 1256 "./freeRTOS/tasks.c" 1
 2736 0014 BFF36F8F 		isb
 2737              	@ 0 "" 2
1256:./freeRTOS/tasks.c **** 		}
 2738              		.loc 1 1256 26 view .LVU772
1260:./freeRTOS/tasks.c **** 		}
 2739              		.loc 1 1260 28 view .LVU773
 2740              		.thumb
 2741              		.syntax unified
 2742              	.L197:
1262:./freeRTOS/tasks.c **** 
 2743              		.loc 1 1262 2 is_stmt 0 view .LVU774
 2744 0018 10BD     		pop	{r4, pc}
 2745              	.LVL207:
 2746              	.L201:
1262:./freeRTOS/tasks.c **** 
 2747              		.loc 1 1262 2 view .LVU775
 2748 001a 0446     		mov	r4, r0
1231:./freeRTOS/tasks.c **** 			vTaskSuspendAll();
 2749              		.loc 1 1231 45 is_stmt 1 view .LVU776
1232:./freeRTOS/tasks.c **** 			{
 2750              		.loc 1 1232 4 view .LVU777
 2751 001c FFF7FEFF 		bl	vTaskSuspendAll
 2752              	.LVL208:
1234:./freeRTOS/tasks.c **** 
 2753              		.loc 1 1234 22 view .LVU778
1243:./freeRTOS/tasks.c **** 			}
 2754              		.loc 1 1243 5 view .LVU779
 2755 0020 0021     		movs	r1, #0
 2756 0022 2046     		mov	r0, r4
 2757 0024 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2758              	.LVL209:
1245:./freeRTOS/tasks.c **** 		}
 2759              		.loc 1 1245 4 view .LVU780
1245:./freeRTOS/tasks.c **** 		}
 2760              		.loc 1 1245 22 is_stmt 0 view .LVU781
 2761 0028 FFF7FEFF 		bl	xTaskResumeAll
 2762              	.LVL210:
1249:./freeRTOS/tasks.c **** 		}
 2763              		.loc 1 1249 28 is_stmt 1 view .LVU782
1254:./freeRTOS/tasks.c **** 		{
ARM GAS  /tmp/cckkLGmm.s 			page 150


 2764              		.loc 1 1254 3 view .LVU783
1254:./freeRTOS/tasks.c **** 		{
 2765              		.loc 1 1254 5 is_stmt 0 view .LVU784
 2766 002c 0028     		cmp	r0, #0
 2767 002e F3D1     		bne	.L197
1254:./freeRTOS/tasks.c **** 		{
 2768              		.loc 1 1254 5 view .LVU785
 2769 0030 E8E7     		b	.L198
 2770              		.cfi_endproc
 2771              	.LFE10:
 2773              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2774              		.align	1
 2775              		.syntax unified
 2776              		.thumb
 2777              		.thumb_func
 2778              		.fpu fpv4-sp-d16
 2780              	prvCheckTasksWaitingTermination:
 2781              	.LFB37:
3366:./freeRTOS/tasks.c **** 
 2782              		.loc 1 3366 1 is_stmt 1 view -0
 2783              		.cfi_startproc
 2784              		@ args = 0, pretend = 0, frame = 0
 2785              		@ frame_needed = 0, uses_anonymous_args = 0
 2786              	.LBB48:
3372:./freeRTOS/tasks.c **** 
 2787              		.loc 1 3372 3 view .LVU787
3376:./freeRTOS/tasks.c **** 		{
 2788              		.loc 1 3376 3 view .LVU788
3401:./freeRTOS/tasks.c **** 			}
 2789              		.loc 1 3401 29 view .LVU789
3376:./freeRTOS/tasks.c **** 		{
 2790              		.loc 1 3376 8 view .LVU790
3376:./freeRTOS/tasks.c **** 		{
 2791              		.loc 1 3376 39 is_stmt 0 view .LVU791
 2792 0000 134B     		ldr	r3, .L211
 2793 0002 1B68     		ldr	r3, [r3]
3376:./freeRTOS/tasks.c **** 		{
 2794              		.loc 1 3376 8 view .LVU792
 2795 0004 13B3     		cbz	r3, .L209
 2796              	.LBE48:
3366:./freeRTOS/tasks.c **** 
 2797              		.loc 1 3366 1 view .LVU793
 2798 0006 10B5     		push	{r4, lr}
 2799              	.LCFI24:
 2800              		.cfi_def_cfa_offset 8
 2801              		.cfi_offset 4, -8
 2802              		.cfi_offset 14, -4
 2803              	.L205:
 2804              	.LBB50:
3378:./freeRTOS/tasks.c **** 			{
 2805              		.loc 1 3378 4 is_stmt 1 view .LVU794
 2806 0008 FFF7FEFF 		bl	vTaskSuspendAll
 2807              	.LVL211:
3380:./freeRTOS/tasks.c **** 			}
 2808              		.loc 1 3380 5 view .LVU795
3380:./freeRTOS/tasks.c **** 			}
 2809              		.loc 1 3380 20 is_stmt 0 view .LVU796
ARM GAS  /tmp/cckkLGmm.s 			page 151


 2810 000c 114B     		ldr	r3, .L211+4
 2811 000e 1C68     		ldr	r4, [r3]
 2812              	.LVL212:
3382:./freeRTOS/tasks.c **** 
 2813              		.loc 1 3382 4 is_stmt 1 view .LVU797
3382:./freeRTOS/tasks.c **** 
 2814              		.loc 1 3382 13 is_stmt 0 view .LVU798
 2815 0010 FFF7FEFF 		bl	xTaskResumeAll
 2816              	.LVL213:
3384:./freeRTOS/tasks.c **** 			{
 2817              		.loc 1 3384 4 is_stmt 1 view .LVU799
3384:./freeRTOS/tasks.c **** 			{
 2818              		.loc 1 3384 6 is_stmt 0 view .LVU800
 2819 0014 24B9     		cbnz	r4, .L210
 2820              	.LVL214:
 2821              	.L204:
3401:./freeRTOS/tasks.c **** 			}
 2822              		.loc 1 3401 29 is_stmt 1 view .LVU801
3376:./freeRTOS/tasks.c **** 		{
 2823              		.loc 1 3376 8 view .LVU802
3376:./freeRTOS/tasks.c **** 		{
 2824              		.loc 1 3376 39 is_stmt 0 view .LVU803
 2825 0016 0E4B     		ldr	r3, .L211
 2826 0018 1B68     		ldr	r3, [r3]
3376:./freeRTOS/tasks.c **** 		{
 2827              		.loc 1 3376 8 view .LVU804
 2828 001a 002B     		cmp	r3, #0
 2829 001c F4D1     		bne	.L205
 2830              	.LBE50:
3406:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2831              		.loc 1 3406 1 view .LVU805
 2832 001e 10BD     		pop	{r4, pc}
 2833              	.LVL215:
 2834              	.L210:
 2835              	.LBB51:
 2836              	.LBB49:
3386:./freeRTOS/tasks.c **** 
 2837              		.loc 1 3386 5 is_stmt 1 view .LVU806
3388:./freeRTOS/tasks.c **** 				{
 2838              		.loc 1 3388 5 view .LVU807
 2839 0020 FFF7FEFF 		bl	vPortEnterCritical
 2840              	.LVL216:
3390:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2841              		.loc 1 3390 6 view .LVU808
3390:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2842              		.loc 1 3390 26 is_stmt 0 view .LVU809
 2843 0024 0B4B     		ldr	r3, .L211+4
 2844 0026 DB68     		ldr	r3, [r3, #12]
3390:./freeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2845              		.loc 1 3390 12 view .LVU810
 2846 0028 DC68     		ldr	r4, [r3, #12]
 2847              	.LVL217:
3391:./freeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 2848              		.loc 1 3391 6 is_stmt 1 view .LVU811
3391:./freeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 2849              		.loc 1 3391 15 is_stmt 0 view .LVU812
 2850 002a 201D     		adds	r0, r4, #4
ARM GAS  /tmp/cckkLGmm.s 			page 152


 2851 002c FFF7FEFF 		bl	uxListRemove
 2852              	.LVL218:
3392:./freeRTOS/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2853              		.loc 1 3392 6 is_stmt 1 view .LVU813
 2854 0030 094A     		ldr	r2, .L211+8
 2855 0032 1368     		ldr	r3, [r2]
 2856 0034 013B     		subs	r3, r3, #1
 2857 0036 1360     		str	r3, [r2]
3393:./freeRTOS/tasks.c **** 				}
 2858              		.loc 1 3393 6 view .LVU814
 2859 0038 054A     		ldr	r2, .L211
 2860 003a 1368     		ldr	r3, [r2]
 2861 003c 013B     		subs	r3, r3, #1
 2862 003e 1360     		str	r3, [r2]
3395:./freeRTOS/tasks.c **** 
 2863              		.loc 1 3395 5 view .LVU815
 2864 0040 FFF7FEFF 		bl	vPortExitCritical
 2865              	.LVL219:
3397:./freeRTOS/tasks.c **** 			}
 2866              		.loc 1 3397 5 view .LVU816
 2867 0044 2046     		mov	r0, r4
 2868 0046 FFF7FEFF 		bl	prvDeleteTCB
 2869              	.LVL220:
 2870              	.LBE49:
 2871 004a E4E7     		b	.L204
 2872              	.LVL221:
 2873              	.L209:
 2874              	.LCFI25:
 2875              		.cfi_def_cfa_offset 0
 2876              		.cfi_restore 4
 2877              		.cfi_restore 14
3397:./freeRTOS/tasks.c **** 			}
 2878              		.loc 1 3397 5 is_stmt 0 view .LVU817
 2879 004c 7047     		bx	lr
 2880              	.L212:
 2881 004e 00BF     		.align	2
 2882              	.L211:
 2883 0050 00000000 		.word	.LANCHOR15
 2884 0054 00000000 		.word	.LANCHOR7
 2885 0058 00000000 		.word	.LANCHOR9
 2886              	.LBE51:
 2887              		.cfi_endproc
 2888              	.LFE37:
 2890              		.section	.text.prvIdleTask,"ax",%progbits
 2891              		.align	1
 2892              		.syntax unified
 2893              		.thumb
 2894              		.thumb_func
 2895              		.fpu fpv4-sp-d16
 2897              	prvIdleTask:
 2898              	.LFB35:
3132:./freeRTOS/tasks.c **** 	/* Stop warnings. */
 2899              		.loc 1 3132 1 is_stmt 1 view -0
 2900              		.cfi_startproc
 2901              		@ Volatile: function does not return.
 2902              		@ args = 0, pretend = 0, frame = 0
 2903              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cckkLGmm.s 			page 153


 2904              	.LVL222:
3132:./freeRTOS/tasks.c **** 	/* Stop warnings. */
 2905              		.loc 1 3132 1 is_stmt 0 view .LVU819
 2906 0000 08B5     		push	{r3, lr}
 2907              	.LCFI26:
 2908              		.cfi_def_cfa_offset 8
 2909              		.cfi_offset 3, -8
 2910              		.cfi_offset 14, -4
 2911              	.LVL223:
 2912              	.L214:
3134:./freeRTOS/tasks.c **** 
 2913              		.loc 1 3134 2 is_stmt 1 view .LVU820
3139:./freeRTOS/tasks.c **** 	{
 2914              		.loc 1 3139 2 view .LVU821
3143:./freeRTOS/tasks.c **** 
 2915              		.loc 1 3143 3 view .LVU822
 2916 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2917              	.LVL224:
3166:./freeRTOS/tasks.c **** 			{
 2918              		.loc 1 3166 4 view .LVU823
3166:./freeRTOS/tasks.c **** 			{
 2919              		.loc 1 3166 8 is_stmt 0 view .LVU824
 2920 0006 074B     		ldr	r3, .L217
 2921 0008 1B68     		ldr	r3, [r3]
3166:./freeRTOS/tasks.c **** 			{
 2922              		.loc 1 3166 6 view .LVU825
 2923 000a 012B     		cmp	r3, #1
 2924 000c F9D9     		bls	.L214
3168:./freeRTOS/tasks.c **** 			}
 2925              		.loc 1 3168 5 is_stmt 1 view .LVU826
 2926 000e 4FF0E023 		mov	r3, #-536813568
 2927 0012 4FF08052 		mov	r2, #268435456
 2928 0016 C3F8042D 		str	r2, [r3, #3332]
3168:./freeRTOS/tasks.c **** 			}
 2929              		.loc 1 3168 5 view .LVU827
 2930              		.syntax unified
 2931              	@ 3168 "./freeRTOS/tasks.c" 1
 2932 001a BFF34F8F 		dsb
 2933              	@ 0 "" 2
3168:./freeRTOS/tasks.c **** 			}
 2934              		.loc 1 3168 5 view .LVU828
 2935              	@ 3168 "./freeRTOS/tasks.c" 1
 2936 001e BFF36F8F 		isb
 2937              	@ 0 "" 2
3168:./freeRTOS/tasks.c **** 			}
 2938              		.loc 1 3168 16 view .LVU829
 2939              		.thumb
 2940              		.syntax unified
 2941 0022 EEE7     		b	.L214
 2942              	.L218:
 2943              		.align	2
 2944              	.L217:
 2945 0024 00000000 		.word	.LANCHOR4
 2946              		.cfi_endproc
 2947              	.LFE35:
 2949              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2950              		.align	1
ARM GAS  /tmp/cckkLGmm.s 			page 154


 2951              		.global	vTaskSwitchContext
 2952              		.syntax unified
 2953              		.thumb
 2954              		.thumb_func
 2955              		.fpu fpv4-sp-d16
 2957              	vTaskSwitchContext:
 2958              	.LFB27:
2762:./freeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2959              		.loc 1 2762 1 view -0
 2960              		.cfi_startproc
 2961              		@ args = 0, pretend = 0, frame = 0
 2962              		@ frame_needed = 0, uses_anonymous_args = 0
 2963              		@ link register save eliminated.
2763:./freeRTOS/tasks.c **** 	{
 2964              		.loc 1 2763 2 view .LVU831
2763:./freeRTOS/tasks.c **** 	{
 2965              		.loc 1 2763 27 is_stmt 0 view .LVU832
 2966 0000 184B     		ldr	r3, .L224
 2967 0002 1B68     		ldr	r3, [r3]
2763:./freeRTOS/tasks.c **** 	{
 2968              		.loc 1 2763 4 view .LVU833
 2969 0004 1BB1     		cbz	r3, .L220
2767:./freeRTOS/tasks.c **** 	}
 2970              		.loc 1 2767 3 is_stmt 1 view .LVU834
2767:./freeRTOS/tasks.c **** 	}
 2971              		.loc 1 2767 17 is_stmt 0 view .LVU835
 2972 0006 184B     		ldr	r3, .L224+4
 2973 0008 0122     		movs	r2, #1
 2974 000a 1A60     		str	r2, [r3]
 2975 000c 7047     		bx	lr
 2976              	.L220:
2771:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2977              		.loc 1 2771 3 is_stmt 1 view .LVU836
2771:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2978              		.loc 1 2771 17 is_stmt 0 view .LVU837
 2979 000e 164B     		ldr	r3, .L224+4
 2980 0010 0022     		movs	r2, #0
 2981 0012 1A60     		str	r2, [r3]
2772:./freeRTOS/tasks.c **** 
 2982              		.loc 1 2772 27 is_stmt 1 view .LVU838
2802:./freeRTOS/tasks.c **** 
 2983              		.loc 1 2802 33 view .LVU839
 2984              	.LBB52:
2806:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2985              		.loc 1 2806 3 view .LVU840
2806:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2986              		.loc 1 2806 3 view .LVU841
 2987 0014 154B     		ldr	r3, .L224+8
 2988 0016 1B68     		ldr	r3, [r3]
 2989              	.LVL225:
 2990              	.LBB53:
 2991              	.LBI53:
 172:freeRTOS/GCC/portmacro.h **** 	{
 2992              		.loc 2 172 59 view .LVU842
 2993              	.LBB54:
 174:freeRTOS/GCC/portmacro.h **** 
 2994              		.loc 2 174 2 view .LVU843
ARM GAS  /tmp/cckkLGmm.s 			page 155


 176:freeRTOS/GCC/portmacro.h **** 		return ucReturn;
 2995              		.loc 2 176 3 view .LVU844
 2996              		.syntax unified
 2997              	@ 176 "freeRTOS/GCC/portmacro.h" 1
 2998 0018 B3FA83F3 		clz r3, r3
 2999              	@ 0 "" 2
 3000              	.LVL226:
 176:freeRTOS/GCC/portmacro.h **** 		return ucReturn;
 3001              		.loc 2 176 3 is_stmt 0 view .LVU845
 3002              		.thumb
 3003              		.syntax unified
 3004 001c DBB2     		uxtb	r3, r3
 3005              	.LVL227:
 177:freeRTOS/GCC/portmacro.h **** 	}
 3006              		.loc 2 177 3 is_stmt 1 view .LVU846
 177:freeRTOS/GCC/portmacro.h **** 	}
 3007              		.loc 2 177 3 is_stmt 0 view .LVU847
 3008              	.LBE54:
 3009              	.LBE53:
2806:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3010              		.loc 1 2806 3 view .LVU848
 3011 001e C3F11F03 		rsb	r3, r3, #31
 3012              	.LVL228:
2806:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3013              		.loc 1 2806 3 is_stmt 1 view .LVU849
 3014              	.LBB55:
2806:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3015              		.loc 1 2806 3 view .LVU850
2806:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3016              		.loc 1 2806 3 view .LVU851
 3017 0022 1349     		ldr	r1, .L224+12
 3018 0024 03EB8300 		add	r0, r3, r3, lsl #2
 3019 0028 8200     		lsls	r2, r0, #2
 3020 002a 0A44     		add	r2, r2, r1
 3021 002c 5068     		ldr	r0, [r2, #4]
 3022 002e 4068     		ldr	r0, [r0, #4]
 3023 0030 5060     		str	r0, [r2, #4]
2806:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3024              		.loc 1 2806 3 view .LVU852
 3025 0032 03EB830C 		add	ip, r3, r3, lsl #2
 3026 0036 4FEA8C02 		lsl	r2, ip, #2
 3027 003a 0832     		adds	r2, r2, #8
 3028 003c 1144     		add	r1, r1, r2
 3029 003e 8842     		cmp	r0, r1
 3030 0040 09D0     		beq	.L223
 3031              	.L222:
2806:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3032              		.loc 1 2806 3 discriminator 3 view .LVU853
 3033 0042 03EB8303 		add	r3, r3, r3, lsl #2
 3034              	.LVL229:
2806:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3035              		.loc 1 2806 3 is_stmt 0 discriminator 3 view .LVU854
 3036 0046 9A00     		lsls	r2, r3, #2
 3037 0048 094B     		ldr	r3, .L224+12
 3038 004a 1344     		add	r3, r3, r2
 3039 004c 5B68     		ldr	r3, [r3, #4]
 3040 004e DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/cckkLGmm.s 			page 156


 3041 0050 084B     		ldr	r3, .L224+16
 3042 0052 1A60     		str	r2, [r3]
 3043              	.LBE55:
2806:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3044              		.loc 1 2806 3 is_stmt 1 discriminator 3 view .LVU855
 3045              	.LBE52:
2806:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3046              		.loc 1 2806 37 discriminator 3 view .LVU856
2807:./freeRTOS/tasks.c **** 
 3047              		.loc 1 2807 26 discriminator 3 view .LVU857
2817:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3048              		.loc 1 2817 1 is_stmt 0 discriminator 3 view .LVU858
 3049 0054 7047     		bx	lr
 3050              	.LVL230:
 3051              	.L223:
 3052              	.LBB57:
 3053              	.LBB56:
2806:./freeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 3054              		.loc 1 2806 3 is_stmt 1 discriminator 1 view .LVU859
 3055 0056 4068     		ldr	r0, [r0, #4]
 3056 0058 6246     		mov	r2, ip
 3057 005a 9100     		lsls	r1, r2, #2
 3058 005c 044A     		ldr	r2, .L224+12
 3059 005e 0A44     		add	r2, r2, r1
 3060 0060 5060     		str	r0, [r2, #4]
 3061 0062 EEE7     		b	.L222
 3062              	.L225:
 3063              		.align	2
 3064              	.L224:
 3065 0064 00000000 		.word	.LANCHOR16
 3066 0068 00000000 		.word	.LANCHOR20
 3067 006c 00000000 		.word	.LANCHOR13
 3068 0070 00000000 		.word	.LANCHOR4
 3069 0074 00000000 		.word	.LANCHOR10
 3070              	.LBE56:
 3071              	.LBE57:
 3072              		.cfi_endproc
 3073              	.LFE27:
 3075              		.section	.text.vTaskSuspend,"ax",%progbits
 3076              		.align	1
 3077              		.global	vTaskSuspend
 3078              		.syntax unified
 3079              		.thumb
 3080              		.thumb_func
 3081              		.fpu fpv4-sp-d16
 3083              	vTaskSuspend:
 3084              	.LVL231:
 3085              	.LFB14:
1567:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
 3086              		.loc 1 1567 2 view -0
 3087              		.cfi_startproc
 3088              		@ args = 0, pretend = 0, frame = 0
 3089              		@ frame_needed = 0, uses_anonymous_args = 0
1567:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
 3090              		.loc 1 1567 2 is_stmt 0 view .LVU861
 3091 0000 38B5     		push	{r3, r4, r5, lr}
 3092              	.LCFI27:
ARM GAS  /tmp/cckkLGmm.s 			page 157


 3093              		.cfi_def_cfa_offset 16
 3094              		.cfi_offset 3, -16
 3095              		.cfi_offset 4, -12
 3096              		.cfi_offset 5, -8
 3097              		.cfi_offset 14, -4
 3098 0002 0446     		mov	r4, r0
1568:./freeRTOS/tasks.c **** 
 3099              		.loc 1 1568 2 is_stmt 1 view .LVU862
1570:./freeRTOS/tasks.c **** 		{
 3100              		.loc 1 1570 3 view .LVU863
 3101 0004 FFF7FEFF 		bl	vPortEnterCritical
 3102              	.LVL232:
1574:./freeRTOS/tasks.c **** 
 3103              		.loc 1 1574 4 view .LVU864
1574:./freeRTOS/tasks.c **** 
 3104              		.loc 1 1574 12 is_stmt 0 view .LVU865
 3105 0008 34B3     		cbz	r4, .L235
 3106              	.LVL233:
 3107              	.L227:
1576:./freeRTOS/tasks.c **** 
 3108              		.loc 1 1576 30 is_stmt 1 discriminator 4 view .LVU866
1580:./freeRTOS/tasks.c **** 			{
 3109              		.loc 1 1580 4 discriminator 4 view .LVU867
1580:./freeRTOS/tasks.c **** 			{
 3110              		.loc 1 1580 8 is_stmt 0 discriminator 4 view .LVU868
 3111 000a 251D     		adds	r5, r4, #4
 3112 000c 2846     		mov	r0, r5
 3113 000e FFF7FEFF 		bl	uxListRemove
 3114              	.LVL234:
1580:./freeRTOS/tasks.c **** 			{
 3115              		.loc 1 1580 6 discriminator 4 view .LVU869
 3116 0012 68B9     		cbnz	r0, .L228
1582:./freeRTOS/tasks.c **** 			}
 3117              		.loc 1 1582 5 is_stmt 1 view .LVU870
 3118 0014 E36A     		ldr	r3, [r4, #44]
 3119 0016 03EB8301 		add	r1, r3, r3, lsl #2
 3120 001a 224A     		ldr	r2, .L238
 3121 001c 52F82120 		ldr	r2, [r2, r1, lsl #2]
 3122 0020 32B9     		cbnz	r2, .L228
1582:./freeRTOS/tasks.c **** 			}
 3123              		.loc 1 1582 5 discriminator 1 view .LVU871
 3124 0022 0122     		movs	r2, #1
 3125 0024 9A40     		lsls	r2, r2, r3
 3126 0026 2049     		ldr	r1, .L238+4
 3127 0028 0B68     		ldr	r3, [r1]
 3128 002a 23EA0203 		bic	r3, r3, r2
 3129 002e 0B60     		str	r3, [r1]
 3130              	.L228:
1586:./freeRTOS/tasks.c **** 			}
 3131              		.loc 1 1586 29 view .LVU872
1590:./freeRTOS/tasks.c **** 			{
 3132              		.loc 1 1590 4 view .LVU873
1590:./freeRTOS/tasks.c **** 			{
 3133              		.loc 1 1590 8 is_stmt 0 view .LVU874
 3134 0030 A36A     		ldr	r3, [r4, #40]
1590:./freeRTOS/tasks.c **** 			{
 3135              		.loc 1 1590 6 view .LVU875
ARM GAS  /tmp/cckkLGmm.s 			page 158


 3136 0032 1BB1     		cbz	r3, .L229
1592:./freeRTOS/tasks.c **** 			}
 3137              		.loc 1 1592 5 is_stmt 1 view .LVU876
1592:./freeRTOS/tasks.c **** 			}
 3138              		.loc 1 1592 14 is_stmt 0 view .LVU877
 3139 0034 04F11800 		add	r0, r4, #24
 3140 0038 FFF7FEFF 		bl	uxListRemove
 3141              	.LVL235:
 3142              	.L229:
1596:./freeRTOS/tasks.c **** 			}
 3143              		.loc 1 1596 29 is_stmt 1 view .LVU878
1599:./freeRTOS/tasks.c **** 		}
 3144              		.loc 1 1599 4 view .LVU879
 3145 003c 2946     		mov	r1, r5
 3146 003e 1B48     		ldr	r0, .L238+8
 3147 0040 FFF7FEFF 		bl	vListInsertEnd
 3148              	.LVL236:
1601:./freeRTOS/tasks.c **** 
 3149              		.loc 1 1601 3 view .LVU880
 3150 0044 FFF7FEFF 		bl	vPortExitCritical
 3151              	.LVL237:
1603:./freeRTOS/tasks.c **** 		{
 3152              		.loc 1 1603 3 view .LVU881
1603:./freeRTOS/tasks.c **** 		{
 3153              		.loc 1 1603 25 is_stmt 0 view .LVU882
 3154 0048 194B     		ldr	r3, .L238+12
 3155 004a 1B68     		ldr	r3, [r3]
1603:./freeRTOS/tasks.c **** 		{
 3156              		.loc 1 1603 5 view .LVU883
 3157 004c 3BB9     		cbnz	r3, .L236
 3158              	.L230:
1615:./freeRTOS/tasks.c **** 		}
 3159              		.loc 1 1615 28 is_stmt 1 view .LVU884
1618:./freeRTOS/tasks.c **** 		{
 3160              		.loc 1 1618 3 view .LVU885
1618:./freeRTOS/tasks.c **** 		{
 3161              		.loc 1 1618 13 is_stmt 0 view .LVU886
 3162 004e 194B     		ldr	r3, .L238+16
 3163 0050 1B68     		ldr	r3, [r3]
1618:./freeRTOS/tasks.c **** 		{
 3164              		.loc 1 1618 5 view .LVU887
 3165 0052 A342     		cmp	r3, r4
 3166 0054 0AD0     		beq	.L237
 3167              	.L226:
1649:./freeRTOS/tasks.c **** 
 3168              		.loc 1 1649 2 view .LVU888
 3169 0056 38BD     		pop	{r3, r4, r5, pc}
 3170              	.LVL238:
 3171              	.L235:
1574:./freeRTOS/tasks.c **** 
 3172              		.loc 1 1574 12 discriminator 1 view .LVU889
 3173 0058 164B     		ldr	r3, .L238+16
 3174 005a 1C68     		ldr	r4, [r3]
 3175              	.LVL239:
1574:./freeRTOS/tasks.c **** 
 3176              		.loc 1 1574 12 discriminator 1 view .LVU890
 3177 005c D5E7     		b	.L227
ARM GAS  /tmp/cckkLGmm.s 			page 159


 3178              	.LVL240:
 3179              	.L236:
1607:./freeRTOS/tasks.c **** 			{
 3180              		.loc 1 1607 4 is_stmt 1 view .LVU891
 3181 005e FFF7FEFF 		bl	vPortEnterCritical
 3182              	.LVL241:
1609:./freeRTOS/tasks.c **** 			}
 3183              		.loc 1 1609 5 view .LVU892
 3184 0062 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3185              	.LVL242:
1611:./freeRTOS/tasks.c **** 		}
 3186              		.loc 1 1611 4 view .LVU893
 3187 0066 FFF7FEFF 		bl	vPortExitCritical
 3188              	.LVL243:
 3189 006a F0E7     		b	.L230
 3190              	.L237:
1620:./freeRTOS/tasks.c **** 			{
 3191              		.loc 1 1620 4 view .LVU894
1620:./freeRTOS/tasks.c **** 			{
 3192              		.loc 1 1620 26 is_stmt 0 view .LVU895
 3193 006c 104B     		ldr	r3, .L238+12
 3194 006e 1B68     		ldr	r3, [r3]
1620:./freeRTOS/tasks.c **** 			{
 3195              		.loc 1 1620 6 view .LVU896
 3196 0070 53B1     		cbz	r3, .L232
1623:./freeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 3197              		.loc 1 1623 46 is_stmt 1 view .LVU897
1624:./freeRTOS/tasks.c **** 			}
 3198              		.loc 1 1624 5 view .LVU898
 3199 0072 4FF0E023 		mov	r3, #-536813568
 3200 0076 4FF08052 		mov	r2, #268435456
 3201 007a C3F8042D 		str	r2, [r3, #3332]
1624:./freeRTOS/tasks.c **** 			}
 3202              		.loc 1 1624 5 view .LVU899
 3203              		.syntax unified
 3204              	@ 1624 "./freeRTOS/tasks.c" 1
 3205 007e BFF34F8F 		dsb
 3206              	@ 0 "" 2
1624:./freeRTOS/tasks.c **** 			}
 3207              		.loc 1 1624 5 view .LVU900
 3208              	@ 1624 "./freeRTOS/tasks.c" 1
 3209 0082 BFF36F8F 		isb
 3210              	@ 0 "" 2
1624:./freeRTOS/tasks.c **** 			}
 3211              		.loc 1 1624 27 view .LVU901
 3212              		.thumb
 3213              		.syntax unified
 3214 0086 E6E7     		b	.L226
 3215              	.L232:
1631:./freeRTOS/tasks.c **** 				{
 3216              		.loc 1 1631 5 view .LVU902
1631:./freeRTOS/tasks.c **** 				{
 3217              		.loc 1 1631 9 is_stmt 0 view .LVU903
 3218 0088 084B     		ldr	r3, .L238+8
 3219 008a 1A68     		ldr	r2, [r3]
1631:./freeRTOS/tasks.c **** 				{
 3220              		.loc 1 1631 56 view .LVU904
ARM GAS  /tmp/cckkLGmm.s 			page 160


 3221 008c 0A4B     		ldr	r3, .L238+20
 3222 008e 1B68     		ldr	r3, [r3]
1631:./freeRTOS/tasks.c **** 				{
 3223              		.loc 1 1631 7 view .LVU905
 3224 0090 9A42     		cmp	r2, r3
 3225 0092 03D1     		bne	.L233
1637:./freeRTOS/tasks.c **** 				}
 3226              		.loc 1 1637 6 is_stmt 1 view .LVU906
1637:./freeRTOS/tasks.c **** 				}
 3227              		.loc 1 1637 19 is_stmt 0 view .LVU907
 3228 0094 074B     		ldr	r3, .L238+16
 3229 0096 0022     		movs	r2, #0
 3230 0098 1A60     		str	r2, [r3]
 3231 009a DCE7     		b	.L226
 3232              	.L233:
1641:./freeRTOS/tasks.c **** 				}
 3233              		.loc 1 1641 6 is_stmt 1 view .LVU908
 3234 009c FFF7FEFF 		bl	vTaskSwitchContext
 3235              	.LVL244:
1647:./freeRTOS/tasks.c **** 		}
 3236              		.loc 1 1647 28 view .LVU909
1649:./freeRTOS/tasks.c **** 
 3237              		.loc 1 1649 2 is_stmt 0 view .LVU910
 3238 00a0 D9E7     		b	.L226
 3239              	.L239:
 3240 00a2 00BF     		.align	2
 3241              	.L238:
 3242 00a4 00000000 		.word	.LANCHOR4
 3243 00a8 00000000 		.word	.LANCHOR13
 3244 00ac 00000000 		.word	.LANCHOR0
 3245 00b0 00000000 		.word	.LANCHOR11
 3246 00b4 00000000 		.word	.LANCHOR10
 3247 00b8 00000000 		.word	.LANCHOR9
 3248              		.cfi_endproc
 3249              	.LFE14:
 3251              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3252              		.align	1
 3253              		.global	vTaskPlaceOnEventList
 3254              		.syntax unified
 3255              		.thumb
 3256              		.thumb_func
 3257              		.fpu fpv4-sp-d16
 3259              	vTaskPlaceOnEventList:
 3260              	.LVL245:
 3261              	.LFB28:
2821:./freeRTOS/tasks.c **** 	configASSERT( pxEventList );
 3262              		.loc 1 2821 1 is_stmt 1 view -0
 3263              		.cfi_startproc
 3264              		@ args = 0, pretend = 0, frame = 0
 3265              		@ frame_needed = 0, uses_anonymous_args = 0
2821:./freeRTOS/tasks.c **** 	configASSERT( pxEventList );
 3266              		.loc 1 2821 1 is_stmt 0 view .LVU912
 3267 0000 10B5     		push	{r4, lr}
 3268              	.LCFI28:
 3269              		.cfi_def_cfa_offset 8
 3270              		.cfi_offset 4, -8
 3271              		.cfi_offset 14, -4
ARM GAS  /tmp/cckkLGmm.s 			page 161


 3272 0002 0C46     		mov	r4, r1
2822:./freeRTOS/tasks.c **** 
 3273              		.loc 1 2822 29 is_stmt 1 view .LVU913
2831:./freeRTOS/tasks.c **** 
 3274              		.loc 1 2831 2 view .LVU914
2831:./freeRTOS/tasks.c **** 
 3275              		.loc 1 2831 43 is_stmt 0 view .LVU915
 3276 0004 044B     		ldr	r3, .L242
 3277 0006 1968     		ldr	r1, [r3]
 3278              	.LVL246:
2831:./freeRTOS/tasks.c **** 
 3279              		.loc 1 2831 2 view .LVU916
 3280 0008 1831     		adds	r1, r1, #24
 3281 000a FFF7FEFF 		bl	vListInsert
 3282              	.LVL247:
2833:./freeRTOS/tasks.c **** }
 3283              		.loc 1 2833 2 is_stmt 1 view .LVU917
 3284 000e 0121     		movs	r1, #1
 3285 0010 2046     		mov	r0, r4
 3286 0012 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3287              	.LVL248:
2834:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3288              		.loc 1 2834 1 is_stmt 0 view .LVU918
 3289 0016 10BD     		pop	{r4, pc}
 3290              	.LVL249:
 3291              	.L243:
2834:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3292              		.loc 1 2834 1 view .LVU919
 3293              		.align	2
 3294              	.L242:
 3295 0018 00000000 		.word	.LANCHOR10
 3296              		.cfi_endproc
 3297              	.LFE28:
 3299              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3300              		.align	1
 3301              		.global	vTaskPlaceOnUnorderedEventList
 3302              		.syntax unified
 3303              		.thumb
 3304              		.thumb_func
 3305              		.fpu fpv4-sp-d16
 3307              	vTaskPlaceOnUnorderedEventList:
 3308              	.LVL250:
 3309              	.LFB29:
2838:./freeRTOS/tasks.c **** 	configASSERT( pxEventList );
 3310              		.loc 1 2838 1 is_stmt 1 view -0
 3311              		.cfi_startproc
 3312              		@ args = 0, pretend = 0, frame = 0
 3313              		@ frame_needed = 0, uses_anonymous_args = 0
2838:./freeRTOS/tasks.c **** 	configASSERT( pxEventList );
 3314              		.loc 1 2838 1 is_stmt 0 view .LVU921
 3315 0000 10B5     		push	{r4, lr}
 3316              	.LCFI29:
 3317              		.cfi_def_cfa_offset 8
 3318              		.cfi_offset 4, -8
 3319              		.cfi_offset 14, -4
 3320 0002 1446     		mov	r4, r2
2839:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 162


 3321              		.loc 1 2839 29 is_stmt 1 view .LVU922
2843:./freeRTOS/tasks.c **** 
 3322              		.loc 1 2843 43 view .LVU923
2848:./freeRTOS/tasks.c **** 
 3323              		.loc 1 2848 2 view .LVU924
 3324 0004 064B     		ldr	r3, .L246
 3325 0006 1A68     		ldr	r2, [r3]
 3326              	.LVL251:
2848:./freeRTOS/tasks.c **** 
 3327              		.loc 1 2848 2 is_stmt 0 view .LVU925
 3328 0008 41F00041 		orr	r1, r1, #-2147483648
 3329              	.LVL252:
2848:./freeRTOS/tasks.c **** 
 3330              		.loc 1 2848 2 view .LVU926
 3331 000c 9161     		str	r1, [r2, #24]
2855:./freeRTOS/tasks.c **** 
 3332              		.loc 1 2855 2 is_stmt 1 view .LVU927
2855:./freeRTOS/tasks.c **** 
 3333              		.loc 1 2855 46 is_stmt 0 view .LVU928
 3334 000e 1968     		ldr	r1, [r3]
2855:./freeRTOS/tasks.c **** 
 3335              		.loc 1 2855 2 view .LVU929
 3336 0010 1831     		adds	r1, r1, #24
 3337 0012 FFF7FEFF 		bl	vListInsertEnd
 3338              	.LVL253:
2857:./freeRTOS/tasks.c **** }
 3339              		.loc 1 2857 2 is_stmt 1 view .LVU930
 3340 0016 0121     		movs	r1, #1
 3341 0018 2046     		mov	r0, r4
 3342 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3343              	.LVL254:
2858:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3344              		.loc 1 2858 1 is_stmt 0 view .LVU931
 3345 001e 10BD     		pop	{r4, pc}
 3346              	.LVL255:
 3347              	.L247:
2858:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3348              		.loc 1 2858 1 view .LVU932
 3349              		.align	2
 3350              	.L246:
 3351 0020 00000000 		.word	.LANCHOR10
 3352              		.cfi_endproc
 3353              	.LFE29:
 3355              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3356              		.align	1
 3357              		.global	xTaskRemoveFromEventList
 3358              		.syntax unified
 3359              		.thumb
 3360              		.thumb_func
 3361              		.fpu fpv4-sp-d16
 3363              	xTaskRemoveFromEventList:
 3364              	.LVL256:
 3365              	.LFB30:
2895:./freeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 3366              		.loc 1 2895 1 is_stmt 1 view -0
 3367              		.cfi_startproc
 3368              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cckkLGmm.s 			page 163


 3369              		@ frame_needed = 0, uses_anonymous_args = 0
2895:./freeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 3370              		.loc 1 2895 1 is_stmt 0 view .LVU934
 3371 0000 38B5     		push	{r3, r4, r5, lr}
 3372              	.LCFI30:
 3373              		.cfi_def_cfa_offset 16
 3374              		.cfi_offset 3, -16
 3375              		.cfi_offset 4, -12
 3376              		.cfi_offset 5, -8
 3377              		.cfi_offset 14, -4
2896:./freeRTOS/tasks.c **** BaseType_t xReturn;
 3378              		.loc 1 2896 1 is_stmt 1 view .LVU935
2897:./freeRTOS/tasks.c **** 
 3379              		.loc 1 2897 1 view .LVU936
2912:./freeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3380              		.loc 1 2912 2 view .LVU937
2912:./freeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3381              		.loc 1 2912 31 is_stmt 0 view .LVU938
 3382 0002 C368     		ldr	r3, [r0, #12]
2912:./freeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3383              		.loc 1 2912 17 view .LVU939
 3384 0004 DC68     		ldr	r4, [r3, #12]
 3385              	.LVL257:
2913:./freeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3386              		.loc 1 2913 32 is_stmt 1 view .LVU940
2914:./freeRTOS/tasks.c **** 
 3387              		.loc 1 2914 2 view .LVU941
2914:./freeRTOS/tasks.c **** 
 3388              		.loc 1 2914 11 is_stmt 0 view .LVU942
 3389 0006 04F11805 		add	r5, r4, #24
 3390 000a 2846     		mov	r0, r5
 3391              	.LVL258:
2914:./freeRTOS/tasks.c **** 
 3392              		.loc 1 2914 11 view .LVU943
 3393 000c FFF7FEFF 		bl	uxListRemove
 3394              	.LVL259:
2916:./freeRTOS/tasks.c **** 	{
 3395              		.loc 1 2916 2 is_stmt 1 view .LVU944
2916:./freeRTOS/tasks.c **** 	{
 3396              		.loc 1 2916 27 is_stmt 0 view .LVU945
 3397 0010 134B     		ldr	r3, .L254
 3398 0012 1B68     		ldr	r3, [r3]
2916:./freeRTOS/tasks.c **** 	{
 3399              		.loc 1 2916 4 view .LVU946
 3400 0014 E3B9     		cbnz	r3, .L249
2918:./freeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3401              		.loc 1 2918 3 is_stmt 1 view .LVU947
2918:./freeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3402              		.loc 1 2918 12 is_stmt 0 view .LVU948
 3403 0016 251D     		adds	r5, r4, #4
 3404 0018 2846     		mov	r0, r5
 3405 001a FFF7FEFF 		bl	uxListRemove
 3406              	.LVL260:
2919:./freeRTOS/tasks.c **** 	}
 3407              		.loc 1 2919 3 is_stmt 1 view .LVU949
2919:./freeRTOS/tasks.c **** 	}
 3408              		.loc 1 2919 3 view .LVU950
ARM GAS  /tmp/cckkLGmm.s 			page 164


 3409 001e E06A     		ldr	r0, [r4, #44]
 3410 0020 0123     		movs	r3, #1
 3411 0022 8340     		lsls	r3, r3, r0
 3412 0024 0F4A     		ldr	r2, .L254+4
 3413 0026 1168     		ldr	r1, [r2]
 3414 0028 0B43     		orrs	r3, r3, r1
 3415 002a 1360     		str	r3, [r2]
2919:./freeRTOS/tasks.c **** 	}
 3416              		.loc 1 2919 3 view .LVU951
 3417 002c 00EB8000 		add	r0, r0, r0, lsl #2
 3418 0030 2946     		mov	r1, r5
 3419 0032 0D4B     		ldr	r3, .L254+8
 3420 0034 03EB8000 		add	r0, r3, r0, lsl #2
 3421 0038 FFF7FEFF 		bl	vListInsertEnd
 3422              	.LVL261:
2919:./freeRTOS/tasks.c **** 	}
 3423              		.loc 1 2919 42 view .LVU952
 3424              	.L250:
2928:./freeRTOS/tasks.c **** 	{
 3425              		.loc 1 2928 2 view .LVU953
2928:./freeRTOS/tasks.c **** 	{
 3426              		.loc 1 2928 20 is_stmt 0 view .LVU954
 3427 003c E26A     		ldr	r2, [r4, #44]
2928:./freeRTOS/tasks.c **** 	{
 3428              		.loc 1 2928 47 view .LVU955
 3429 003e 0B4B     		ldr	r3, .L254+12
 3430 0040 1B68     		ldr	r3, [r3]
 3431 0042 DB6A     		ldr	r3, [r3, #44]
2928:./freeRTOS/tasks.c **** 	{
 3432              		.loc 1 2928 4 view .LVU956
 3433 0044 9A42     		cmp	r2, r3
 3434 0046 08D9     		bls	.L252
2933:./freeRTOS/tasks.c **** 
 3435              		.loc 1 2933 3 is_stmt 1 view .LVU957
 3436              	.LVL262:
2937:./freeRTOS/tasks.c **** 	}
 3437              		.loc 1 2937 3 view .LVU958
2937:./freeRTOS/tasks.c **** 	}
 3438              		.loc 1 2937 17 is_stmt 0 view .LVU959
 3439 0048 0120     		movs	r0, #1
 3440 004a 094B     		ldr	r3, .L254+16
 3441 004c 1860     		str	r0, [r3]
 3442              	.LVL263:
 3443              	.L248:
2959:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3444              		.loc 1 2959 1 view .LVU960
 3445 004e 38BD     		pop	{r3, r4, r5, pc}
 3446              	.LVL264:
 3447              	.L249:
2925:./freeRTOS/tasks.c **** 	}
 3448              		.loc 1 2925 3 is_stmt 1 view .LVU961
 3449 0050 2946     		mov	r1, r5
 3450 0052 0848     		ldr	r0, .L254+20
 3451 0054 FFF7FEFF 		bl	vListInsertEnd
 3452              	.LVL265:
 3453 0058 F0E7     		b	.L250
 3454              	.L252:
ARM GAS  /tmp/cckkLGmm.s 			page 165


2941:./freeRTOS/tasks.c **** 	}
 3455              		.loc 1 2941 11 is_stmt 0 view .LVU962
 3456 005a 0020     		movs	r0, #0
 3457              	.LVL266:
2958:./freeRTOS/tasks.c **** }
 3458              		.loc 1 2958 2 is_stmt 1 view .LVU963
2958:./freeRTOS/tasks.c **** }
 3459              		.loc 1 2958 9 is_stmt 0 view .LVU964
 3460 005c F7E7     		b	.L248
 3461              	.L255:
 3462 005e 00BF     		.align	2
 3463              	.L254:
 3464 0060 00000000 		.word	.LANCHOR16
 3465 0064 00000000 		.word	.LANCHOR13
 3466 0068 00000000 		.word	.LANCHOR4
 3467 006c 00000000 		.word	.LANCHOR10
 3468 0070 00000000 		.word	.LANCHOR20
 3469 0074 00000000 		.word	.LANCHOR1
 3470              		.cfi_endproc
 3471              	.LFE30:
 3473              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3474              		.align	1
 3475              		.global	xTaskRemoveFromUnorderedEventList
 3476              		.syntax unified
 3477              		.thumb
 3478              		.thumb_func
 3479              		.fpu fpv4-sp-d16
 3481              	xTaskRemoveFromUnorderedEventList:
 3482              	.LVL267:
 3483              	.LFB31:
2963:./freeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 3484              		.loc 1 2963 1 is_stmt 1 view -0
 3485              		.cfi_startproc
 3486              		@ args = 0, pretend = 0, frame = 0
 3487              		@ frame_needed = 0, uses_anonymous_args = 0
2963:./freeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 3488              		.loc 1 2963 1 is_stmt 0 view .LVU966
 3489 0000 38B5     		push	{r3, r4, r5, lr}
 3490              	.LCFI31:
 3491              		.cfi_def_cfa_offset 16
 3492              		.cfi_offset 3, -16
 3493              		.cfi_offset 4, -12
 3494              		.cfi_offset 5, -8
 3495              		.cfi_offset 14, -4
2964:./freeRTOS/tasks.c **** BaseType_t xReturn;
 3496              		.loc 1 2964 1 is_stmt 1 view .LVU967
2965:./freeRTOS/tasks.c **** 
 3497              		.loc 1 2965 1 view .LVU968
2969:./freeRTOS/tasks.c **** 
 3498              		.loc 1 2969 49 view .LVU969
2972:./freeRTOS/tasks.c **** 
 3499              		.loc 1 2972 2 view .LVU970
 3500 0002 41F00041 		orr	r1, r1, #-2147483648
 3501              	.LVL268:
2972:./freeRTOS/tasks.c **** 
 3502              		.loc 1 2972 2 is_stmt 0 view .LVU971
 3503 0006 0160     		str	r1, [r0]
ARM GAS  /tmp/cckkLGmm.s 			page 166


2976:./freeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3504              		.loc 1 2976 2 is_stmt 1 view .LVU972
2976:./freeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3505              		.loc 1 2976 17 is_stmt 0 view .LVU973
 3506 0008 C468     		ldr	r4, [r0, #12]
 3507              	.LVL269:
2977:./freeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3508              		.loc 1 2977 32 is_stmt 1 view .LVU974
2978:./freeRTOS/tasks.c **** 
 3509              		.loc 1 2978 2 view .LVU975
2978:./freeRTOS/tasks.c **** 
 3510              		.loc 1 2978 11 is_stmt 0 view .LVU976
 3511 000a FFF7FEFF 		bl	uxListRemove
 3512              	.LVL270:
2983:./freeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3513              		.loc 1 2983 2 is_stmt 1 view .LVU977
2983:./freeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3514              		.loc 1 2983 11 is_stmt 0 view .LVU978
 3515 000e 251D     		adds	r5, r4, #4
 3516 0010 2846     		mov	r0, r5
 3517 0012 FFF7FEFF 		bl	uxListRemove
 3518              	.LVL271:
2984:./freeRTOS/tasks.c **** 
 3519              		.loc 1 2984 2 is_stmt 1 view .LVU979
2984:./freeRTOS/tasks.c **** 
 3520              		.loc 1 2984 2 view .LVU980
 3521 0016 E06A     		ldr	r0, [r4, #44]
 3522 0018 0123     		movs	r3, #1
 3523 001a 8340     		lsls	r3, r3, r0
 3524 001c 0B4A     		ldr	r2, .L260
 3525 001e 1168     		ldr	r1, [r2]
 3526 0020 0B43     		orrs	r3, r3, r1
 3527 0022 1360     		str	r3, [r2]
2984:./freeRTOS/tasks.c **** 
 3528              		.loc 1 2984 2 view .LVU981
 3529 0024 00EB8000 		add	r0, r0, r0, lsl #2
 3530 0028 2946     		mov	r1, r5
 3531 002a 094B     		ldr	r3, .L260+4
 3532 002c 03EB8000 		add	r0, r3, r0, lsl #2
 3533 0030 FFF7FEFF 		bl	vListInsertEnd
 3534              	.LVL272:
2984:./freeRTOS/tasks.c **** 
 3535              		.loc 1 2984 41 view .LVU982
2986:./freeRTOS/tasks.c **** 	{
 3536              		.loc 1 2986 2 view .LVU983
2986:./freeRTOS/tasks.c **** 	{
 3537              		.loc 1 2986 20 is_stmt 0 view .LVU984
 3538 0034 E26A     		ldr	r2, [r4, #44]
2986:./freeRTOS/tasks.c **** 	{
 3539              		.loc 1 2986 47 view .LVU985
 3540 0036 074B     		ldr	r3, .L260+8
 3541 0038 1B68     		ldr	r3, [r3]
 3542 003a DB6A     		ldr	r3, [r3, #44]
2986:./freeRTOS/tasks.c **** 	{
 3543              		.loc 1 2986 4 view .LVU986
 3544 003c 9A42     		cmp	r2, r3
 3545 003e 03D9     		bls	.L258
ARM GAS  /tmp/cckkLGmm.s 			page 167


2992:./freeRTOS/tasks.c **** 
 3546              		.loc 1 2992 3 is_stmt 1 view .LVU987
 3547              	.LVL273:
2996:./freeRTOS/tasks.c **** 	}
 3548              		.loc 1 2996 3 view .LVU988
2996:./freeRTOS/tasks.c **** 	}
 3549              		.loc 1 2996 17 is_stmt 0 view .LVU989
 3550 0040 0120     		movs	r0, #1
 3551 0042 054B     		ldr	r3, .L260+12
 3552 0044 1860     		str	r0, [r3]
 3553              	.LVL274:
 3554              	.L256:
3004:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3555              		.loc 1 3004 1 view .LVU990
 3556 0046 38BD     		pop	{r3, r4, r5, pc}
 3557              	.LVL275:
 3558              	.L258:
3000:./freeRTOS/tasks.c **** 	}
 3559              		.loc 1 3000 11 view .LVU991
 3560 0048 0020     		movs	r0, #0
 3561              	.LVL276:
3003:./freeRTOS/tasks.c **** }
 3562              		.loc 1 3003 2 is_stmt 1 view .LVU992
3003:./freeRTOS/tasks.c **** }
 3563              		.loc 1 3003 9 is_stmt 0 view .LVU993
 3564 004a FCE7     		b	.L256
 3565              	.L261:
 3566              		.align	2
 3567              	.L260:
 3568 004c 00000000 		.word	.LANCHOR13
 3569 0050 00000000 		.word	.LANCHOR4
 3570 0054 00000000 		.word	.LANCHOR10
 3571 0058 00000000 		.word	.LANCHOR20
 3572              		.cfi_endproc
 3573              	.LFE31:
 3575              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3576              		.align	1
 3577              		.global	vTaskSetTimeOutState
 3578              		.syntax unified
 3579              		.thumb
 3580              		.thumb_func
 3581              		.fpu fpv4-sp-d16
 3583              	vTaskSetTimeOutState:
 3584              	.LVL277:
 3585              	.LFB32:
3008:./freeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 3586              		.loc 1 3008 1 is_stmt 1 view -0
 3587              		.cfi_startproc
 3588              		@ args = 0, pretend = 0, frame = 0
 3589              		@ frame_needed = 0, uses_anonymous_args = 0
 3590              		@ link register save eliminated.
3009:./freeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3591              		.loc 1 3009 27 view .LVU995
3010:./freeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3592              		.loc 1 3010 2 view .LVU996
3010:./freeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3593              		.loc 1 3010 28 is_stmt 0 view .LVU997
ARM GAS  /tmp/cckkLGmm.s 			page 168


 3594 0000 034B     		ldr	r3, .L263
 3595 0002 1B68     		ldr	r3, [r3]
 3596 0004 0360     		str	r3, [r0]
3011:./freeRTOS/tasks.c **** }
 3597              		.loc 1 3011 2 is_stmt 1 view .LVU998
3011:./freeRTOS/tasks.c **** }
 3598              		.loc 1 3011 29 is_stmt 0 view .LVU999
 3599 0006 034B     		ldr	r3, .L263+4
 3600 0008 1B68     		ldr	r3, [r3]
 3601 000a 4360     		str	r3, [r0, #4]
3012:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3602              		.loc 1 3012 1 view .LVU1000
 3603 000c 7047     		bx	lr
 3604              	.L264:
 3605 000e 00BF     		.align	2
 3606              	.L263:
 3607 0010 00000000 		.word	.LANCHOR18
 3608 0014 00000000 		.word	.LANCHOR14
 3609              		.cfi_endproc
 3610              	.LFE32:
 3612              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3613              		.align	1
 3614              		.global	xTaskCheckForTimeOut
 3615              		.syntax unified
 3616              		.thumb
 3617              		.thumb_func
 3618              		.fpu fpv4-sp-d16
 3620              	xTaskCheckForTimeOut:
 3621              	.LVL278:
 3622              	.LFB33:
3016:./freeRTOS/tasks.c **** BaseType_t xReturn;
 3623              		.loc 1 3016 1 is_stmt 1 view -0
 3624              		.cfi_startproc
 3625              		@ args = 0, pretend = 0, frame = 0
 3626              		@ frame_needed = 0, uses_anonymous_args = 0
3016:./freeRTOS/tasks.c **** BaseType_t xReturn;
 3627              		.loc 1 3016 1 is_stmt 0 view .LVU1002
 3628 0000 38B5     		push	{r3, r4, r5, lr}
 3629              	.LCFI32:
 3630              		.cfi_def_cfa_offset 16
 3631              		.cfi_offset 3, -16
 3632              		.cfi_offset 4, -12
 3633              		.cfi_offset 5, -8
 3634              		.cfi_offset 14, -4
 3635 0002 0446     		mov	r4, r0
 3636 0004 0D46     		mov	r5, r1
3017:./freeRTOS/tasks.c **** 
 3637              		.loc 1 3017 1 is_stmt 1 view .LVU1003
3019:./freeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 3638              		.loc 1 3019 27 view .LVU1004
3020:./freeRTOS/tasks.c **** 
 3639              		.loc 1 3020 31 view .LVU1005
3022:./freeRTOS/tasks.c **** 	{
 3640              		.loc 1 3022 2 view .LVU1006
 3641 0006 FFF7FEFF 		bl	vPortEnterCritical
 3642              	.LVL279:
 3643              	.LBB58:
ARM GAS  /tmp/cckkLGmm.s 			page 169


3025:./freeRTOS/tasks.c **** 
 3644              		.loc 1 3025 3 view .LVU1007
3025:./freeRTOS/tasks.c **** 
 3645              		.loc 1 3025 20 is_stmt 0 view .LVU1008
 3646 000a 114B     		ldr	r3, .L273
 3647 000c 1A68     		ldr	r2, [r3]
 3648              	.LVL280:
3039:./freeRTOS/tasks.c **** 			{
 3649              		.loc 1 3039 4 is_stmt 1 view .LVU1009
3039:./freeRTOS/tasks.c **** 			{
 3650              		.loc 1 3039 8 is_stmt 0 view .LVU1010
 3651 000e 2B68     		ldr	r3, [r5]
3039:./freeRTOS/tasks.c **** 			{
 3652              		.loc 1 3039 6 view .LVU1011
 3653 0010 B3F1FF3F 		cmp	r3, #-1
 3654 0014 15D0     		beq	.L268
3049:./freeRTOS/tasks.c **** 		{
 3655              		.loc 1 3049 3 is_stmt 1 view .LVU1012
3049:./freeRTOS/tasks.c **** 		{
 3656              		.loc 1 3049 37 is_stmt 0 view .LVU1013
 3657 0016 2068     		ldr	r0, [r4]
3049:./freeRTOS/tasks.c **** 		{
 3658              		.loc 1 3049 25 view .LVU1014
 3659 0018 0E49     		ldr	r1, .L273+4
 3660 001a 0968     		ldr	r1, [r1]
3049:./freeRTOS/tasks.c **** 		{
 3661              		.loc 1 3049 5 view .LVU1015
 3662 001c 8842     		cmp	r0, r1
 3663 001e 02D0     		beq	.L267
3049:./freeRTOS/tasks.c **** 		{
 3664              		.loc 1 3049 89 discriminator 1 view .LVU1016
 3665 0020 6168     		ldr	r1, [r4, #4]
3049:./freeRTOS/tasks.c **** 		{
 3666              		.loc 1 3049 56 discriminator 1 view .LVU1017
 3667 0022 9142     		cmp	r1, r2
 3668 0024 12D9     		bls	.L269
 3669              	.L267:
3058:./freeRTOS/tasks.c **** 		{
 3670              		.loc 1 3058 8 is_stmt 1 view .LVU1018
3058:./freeRTOS/tasks.c **** 		{
 3671              		.loc 1 3058 58 is_stmt 0 view .LVU1019
 3672 0026 6168     		ldr	r1, [r4, #4]
3058:./freeRTOS/tasks.c **** 		{
 3673              		.loc 1 3058 14 view .LVU1020
 3674 0028 501A     		subs	r0, r2, r1
3058:./freeRTOS/tasks.c **** 		{
 3675              		.loc 1 3058 10 view .LVU1021
 3676 002a 8342     		cmp	r3, r0
 3677 002c 01D8     		bhi	.L272
3067:./freeRTOS/tasks.c **** 		}
 3678              		.loc 1 3067 12 view .LVU1022
 3679 002e 0124     		movs	r4, #1
 3680              	.LVL281:
3067:./freeRTOS/tasks.c **** 		}
 3681              		.loc 1 3067 12 view .LVU1023
 3682 0030 08E0     		b	.L266
 3683              	.LVL282:
ARM GAS  /tmp/cckkLGmm.s 			page 170


 3684              	.L272:
3061:./freeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3685              		.loc 1 3061 4 is_stmt 1 view .LVU1024
3061:./freeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3686              		.loc 1 3061 19 is_stmt 0 view .LVU1025
 3687 0032 8A1A     		subs	r2, r1, r2
 3688              	.LVL283:
3061:./freeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3689              		.loc 1 3061 19 view .LVU1026
 3690 0034 1344     		add	r3, r3, r2
 3691 0036 2B60     		str	r3, [r5]
3062:./freeRTOS/tasks.c **** 			xReturn = pdFALSE;
 3692              		.loc 1 3062 4 is_stmt 1 view .LVU1027
 3693 0038 2046     		mov	r0, r4
 3694 003a FFF7FEFF 		bl	vTaskSetTimeOutState
 3695              	.LVL284:
3063:./freeRTOS/tasks.c **** 		}
 3696              		.loc 1 3063 4 view .LVU1028
3063:./freeRTOS/tasks.c **** 		}
 3697              		.loc 1 3063 12 is_stmt 0 view .LVU1029
 3698 003e 0024     		movs	r4, #0
 3699              	.LVL285:
3063:./freeRTOS/tasks.c **** 		}
 3700              		.loc 1 3063 12 view .LVU1030
 3701 0040 00E0     		b	.L266
 3702              	.LVL286:
 3703              	.L268:
3044:./freeRTOS/tasks.c **** 			}
 3704              		.loc 1 3044 13 view .LVU1031
 3705 0042 0024     		movs	r4, #0
 3706              	.LVL287:
 3707              	.L266:
3044:./freeRTOS/tasks.c **** 			}
 3708              		.loc 1 3044 13 view .LVU1032
 3709              	.LBE58:
3070:./freeRTOS/tasks.c **** 
 3710              		.loc 1 3070 2 is_stmt 1 view .LVU1033
 3711 0044 FFF7FEFF 		bl	vPortExitCritical
 3712              	.LVL288:
3072:./freeRTOS/tasks.c **** }
 3713              		.loc 1 3072 2 view .LVU1034
3073:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3714              		.loc 1 3073 1 is_stmt 0 view .LVU1035
 3715 0048 2046     		mov	r0, r4
 3716 004a 38BD     		pop	{r3, r4, r5, pc}
 3717              	.LVL289:
 3718              	.L269:
 3719              	.LBB59:
3056:./freeRTOS/tasks.c **** 		}
 3720              		.loc 1 3056 12 view .LVU1036
 3721 004c 0124     		movs	r4, #1
 3722              	.LVL290:
3056:./freeRTOS/tasks.c **** 		}
 3723              		.loc 1 3056 12 view .LVU1037
 3724 004e F9E7     		b	.L266
 3725              	.L274:
 3726              		.align	2
ARM GAS  /tmp/cckkLGmm.s 			page 171


 3727              	.L273:
 3728 0050 00000000 		.word	.LANCHOR14
 3729 0054 00000000 		.word	.LANCHOR18
 3730              	.LBE59:
 3731              		.cfi_endproc
 3732              	.LFE33:
 3734              		.section	.text.vTaskMissedYield,"ax",%progbits
 3735              		.align	1
 3736              		.global	vTaskMissedYield
 3737              		.syntax unified
 3738              		.thumb
 3739              		.thumb_func
 3740              		.fpu fpv4-sp-d16
 3742              	vTaskMissedYield:
 3743              	.LFB34:
3077:./freeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 3744              		.loc 1 3077 1 is_stmt 1 view -0
 3745              		.cfi_startproc
 3746              		@ args = 0, pretend = 0, frame = 0
 3747              		@ frame_needed = 0, uses_anonymous_args = 0
 3748              		@ link register save eliminated.
3078:./freeRTOS/tasks.c **** }
 3749              		.loc 1 3078 2 view .LVU1039
3078:./freeRTOS/tasks.c **** }
 3750              		.loc 1 3078 16 is_stmt 0 view .LVU1040
 3751 0000 014B     		ldr	r3, .L276
 3752 0002 0122     		movs	r2, #1
 3753 0004 1A60     		str	r2, [r3]
3079:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3754              		.loc 1 3079 1 view .LVU1041
 3755 0006 7047     		bx	lr
 3756              	.L277:
 3757              		.align	2
 3758              	.L276:
 3759 0008 00000000 		.word	.LANCHOR20
 3760              		.cfi_endproc
 3761              	.LFE34:
 3763              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3764              		.align	1
 3765              		.global	uxTaskGetStackHighWaterMark
 3766              		.syntax unified
 3767              		.thumb
 3768              		.thumb_func
 3769              		.fpu fpv4-sp-d16
 3771              	uxTaskGetStackHighWaterMark:
 3772              	.LVL291:
 3773              	.LFB39:
3554:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
 3774              		.loc 1 3554 2 is_stmt 1 view -0
 3775              		.cfi_startproc
 3776              		@ args = 0, pretend = 0, frame = 0
 3777              		@ frame_needed = 0, uses_anonymous_args = 0
3554:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
 3778              		.loc 1 3554 2 is_stmt 0 view .LVU1043
 3779 0000 08B5     		push	{r3, lr}
 3780              	.LCFI33:
 3781              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cckkLGmm.s 			page 172


 3782              		.cfi_offset 3, -8
 3783              		.cfi_offset 14, -4
3555:./freeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
 3784              		.loc 1 3555 2 is_stmt 1 view .LVU1044
3556:./freeRTOS/tasks.c **** 	UBaseType_t uxReturn;
 3785              		.loc 1 3556 2 view .LVU1045
3557:./freeRTOS/tasks.c **** 
 3786              		.loc 1 3557 2 view .LVU1046
3559:./freeRTOS/tasks.c **** 
 3787              		.loc 1 3559 3 view .LVU1047
3559:./freeRTOS/tasks.c **** 
 3788              		.loc 1 3559 11 is_stmt 0 view .LVU1048
 3789 0002 0346     		mov	r3, r0
 3790 0004 18B1     		cbz	r0, .L281
 3791              	.LVL292:
 3792              	.L279:
3563:./freeRTOS/tasks.c **** 		}
 3793              		.loc 1 3563 4 is_stmt 1 discriminator 4 view .LVU1049
3571:./freeRTOS/tasks.c **** 
 3794              		.loc 1 3571 3 discriminator 4 view .LVU1050
3571:./freeRTOS/tasks.c **** 
 3795              		.loc 1 3571 30 is_stmt 0 discriminator 4 view .LVU1051
 3796 0006 186B     		ldr	r0, [r3, #48]
 3797 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3798              	.LVL293:
3573:./freeRTOS/tasks.c **** 	}
 3799              		.loc 1 3573 3 is_stmt 1 discriminator 4 view .LVU1052
3574:./freeRTOS/tasks.c **** 
 3800              		.loc 1 3574 2 is_stmt 0 discriminator 4 view .LVU1053
 3801 000c 08BD     		pop	{r3, pc}
 3802              	.LVL294:
 3803              	.L281:
3559:./freeRTOS/tasks.c **** 
 3804              		.loc 1 3559 11 discriminator 1 view .LVU1054
 3805 000e 014B     		ldr	r3, .L282
 3806 0010 1B68     		ldr	r3, [r3]
 3807              	.LVL295:
3559:./freeRTOS/tasks.c **** 
 3808              		.loc 1 3559 11 discriminator 1 view .LVU1055
 3809 0012 F8E7     		b	.L279
 3810              	.L283:
 3811              		.align	2
 3812              	.L282:
 3813 0014 00000000 		.word	.LANCHOR10
 3814              		.cfi_endproc
 3815              	.LFE39:
 3817              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3818              		.align	1
 3819              		.global	xTaskGetCurrentTaskHandle
 3820              		.syntax unified
 3821              		.thumb
 3822              		.thumb_func
 3823              		.fpu fpv4-sp-d16
 3825              	xTaskGetCurrentTaskHandle:
 3826              	.LFB42:
3662:./freeRTOS/tasks.c **** 	TaskHandle_t xReturn;
 3827              		.loc 1 3662 2 is_stmt 1 view -0
ARM GAS  /tmp/cckkLGmm.s 			page 173


 3828              		.cfi_startproc
 3829              		@ args = 0, pretend = 0, frame = 0
 3830              		@ frame_needed = 0, uses_anonymous_args = 0
 3831              		@ link register save eliminated.
3663:./freeRTOS/tasks.c **** 
 3832              		.loc 1 3663 2 view .LVU1057
3668:./freeRTOS/tasks.c **** 
 3833              		.loc 1 3668 3 view .LVU1058
3668:./freeRTOS/tasks.c **** 
 3834              		.loc 1 3668 11 is_stmt 0 view .LVU1059
 3835 0000 014B     		ldr	r3, .L285
 3836 0002 1868     		ldr	r0, [r3]
 3837              	.LVL296:
3670:./freeRTOS/tasks.c **** 	}
 3838              		.loc 1 3670 3 is_stmt 1 view .LVU1060
3671:./freeRTOS/tasks.c **** 
 3839              		.loc 1 3671 2 is_stmt 0 view .LVU1061
 3840 0004 7047     		bx	lr
 3841              	.L286:
 3842 0006 00BF     		.align	2
 3843              	.L285:
 3844 0008 00000000 		.word	.LANCHOR10
 3845              		.cfi_endproc
 3846              	.LFE42:
 3848              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3849              		.align	1
 3850              		.global	vTaskPriorityInherit
 3851              		.syntax unified
 3852              		.thumb
 3853              		.thumb_func
 3854              		.fpu fpv4-sp-d16
 3856              	vTaskPriorityInherit:
 3857              	.LVL297:
 3858              	.LFB43:
3707:./freeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3859              		.loc 1 3707 2 is_stmt 1 view -0
 3860              		.cfi_startproc
 3861              		@ args = 0, pretend = 0, frame = 0
 3862              		@ frame_needed = 0, uses_anonymous_args = 0
3708:./freeRTOS/tasks.c **** 
 3863              		.loc 1 3708 2 view .LVU1063
3712:./freeRTOS/tasks.c **** 		{
 3864              		.loc 1 3712 3 view .LVU1064
3712:./freeRTOS/tasks.c **** 		{
 3865              		.loc 1 3712 5 is_stmt 0 view .LVU1065
 3866 0000 0028     		cmp	r0, #0
 3867 0002 45D0     		beq	.L294
3707:./freeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3868              		.loc 1 3707 2 view .LVU1066
 3869 0004 38B5     		push	{r3, r4, r5, lr}
 3870              	.LCFI34:
 3871              		.cfi_def_cfa_offset 16
 3872              		.cfi_offset 3, -16
 3873              		.cfi_offset 4, -12
 3874              		.cfi_offset 5, -8
 3875              		.cfi_offset 14, -4
 3876 0006 0446     		mov	r4, r0
ARM GAS  /tmp/cckkLGmm.s 			page 174


3717:./freeRTOS/tasks.c **** 			{
 3877              		.loc 1 3717 4 is_stmt 1 view .LVU1067
3717:./freeRTOS/tasks.c **** 			{
 3878              		.loc 1 3717 13 is_stmt 0 view .LVU1068
 3879 0008 C36A     		ldr	r3, [r0, #44]
3717:./freeRTOS/tasks.c **** 			{
 3880              		.loc 1 3717 40 view .LVU1069
 3881 000a 224A     		ldr	r2, .L298
 3882 000c 1268     		ldr	r2, [r2]
 3883 000e D26A     		ldr	r2, [r2, #44]
3717:./freeRTOS/tasks.c **** 			{
 3884              		.loc 1 3717 6 view .LVU1070
 3885 0010 9342     		cmp	r3, r2
 3886 0012 14D2     		bcs	.L287
3722:./freeRTOS/tasks.c **** 				{
 3887              		.loc 1 3722 5 is_stmt 1 view .LVU1071
3722:./freeRTOS/tasks.c **** 				{
 3888              		.loc 1 3722 11 is_stmt 0 view .LVU1072
 3889 0014 8269     		ldr	r2, [r0, #24]
3722:./freeRTOS/tasks.c **** 				{
 3890              		.loc 1 3722 7 view .LVU1073
 3891 0016 002A     		cmp	r2, #0
 3892 0018 05DB     		blt	.L289
3724:./freeRTOS/tasks.c **** 				}
 3893              		.loc 1 3724 6 is_stmt 1 view .LVU1074
 3894 001a 1E4A     		ldr	r2, .L298
 3895 001c 1268     		ldr	r2, [r2]
 3896 001e D26A     		ldr	r2, [r2, #44]
 3897 0020 C2F10A02 		rsb	r2, r2, #10
 3898 0024 8261     		str	r2, [r0, #24]
 3899              	.L289:
3728:./freeRTOS/tasks.c **** 				}
 3900              		.loc 1 3728 30 view .LVU1075
3733:./freeRTOS/tasks.c **** 				{
 3901              		.loc 1 3733 5 view .LVU1076
3733:./freeRTOS/tasks.c **** 				{
 3902              		.loc 1 3733 9 is_stmt 0 view .LVU1077
 3903 0026 6169     		ldr	r1, [r4, #20]
 3904 0028 03EB8303 		add	r3, r3, r3, lsl #2
 3905 002c 1A4A     		ldr	r2, .L298+4
 3906 002e 02EB8303 		add	r3, r2, r3, lsl #2
3733:./freeRTOS/tasks.c **** 				{
 3907              		.loc 1 3733 108 view .LVU1078
 3908 0032 9942     		cmp	r1, r3
 3909 0034 04D0     		beq	.L297
3751:./freeRTOS/tasks.c **** 				}
 3910              		.loc 1 3751 6 is_stmt 1 view .LVU1079
3751:./freeRTOS/tasks.c **** 				}
 3911              		.loc 1 3751 38 is_stmt 0 view .LVU1080
 3912 0036 174B     		ldr	r3, .L298
 3913 0038 1B68     		ldr	r3, [r3]
 3914 003a DB6A     		ldr	r3, [r3, #44]
3751:./freeRTOS/tasks.c **** 				}
 3915              		.loc 1 3751 24 view .LVU1081
 3916 003c E362     		str	r3, [r4, #44]
 3917              	.LVL298:
 3918              	.L287:
ARM GAS  /tmp/cckkLGmm.s 			page 175


3765:./freeRTOS/tasks.c **** 
 3919              		.loc 1 3765 2 view .LVU1082
 3920 003e 38BD     		pop	{r3, r4, r5, pc}
 3921              	.LVL299:
 3922              	.L297:
3735:./freeRTOS/tasks.c **** 					{
 3923              		.loc 1 3735 6 is_stmt 1 view .LVU1083
3735:./freeRTOS/tasks.c **** 					{
 3924              		.loc 1 3735 10 is_stmt 0 view .LVU1084
 3925 0040 251D     		adds	r5, r4, #4
 3926 0042 2846     		mov	r0, r5
 3927              	.LVL300:
3735:./freeRTOS/tasks.c **** 					{
 3928              		.loc 1 3735 10 view .LVU1085
 3929 0044 FFF7FEFF 		bl	uxListRemove
 3930              	.LVL301:
3735:./freeRTOS/tasks.c **** 					{
 3931              		.loc 1 3735 8 view .LVU1086
 3932 0048 90B1     		cbz	r0, .L291
 3933              	.L292:
3741:./freeRTOS/tasks.c **** 					}
 3934              		.loc 1 3741 31 is_stmt 1 view .LVU1087
3745:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3935              		.loc 1 3745 6 view .LVU1088
3745:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3936              		.loc 1 3745 38 is_stmt 0 view .LVU1089
 3937 004a 124B     		ldr	r3, .L298
 3938 004c 1B68     		ldr	r3, [r3]
 3939 004e D86A     		ldr	r0, [r3, #44]
3745:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3940              		.loc 1 3745 24 view .LVU1090
 3941 0050 E062     		str	r0, [r4, #44]
3746:./freeRTOS/tasks.c **** 				}
 3942              		.loc 1 3746 6 is_stmt 1 view .LVU1091
3746:./freeRTOS/tasks.c **** 				}
 3943              		.loc 1 3746 6 view .LVU1092
 3944 0052 0123     		movs	r3, #1
 3945 0054 8340     		lsls	r3, r3, r0
 3946 0056 114A     		ldr	r2, .L298+8
 3947 0058 1168     		ldr	r1, [r2]
 3948 005a 0B43     		orrs	r3, r3, r1
 3949 005c 1360     		str	r3, [r2]
3746:./freeRTOS/tasks.c **** 				}
 3950              		.loc 1 3746 6 view .LVU1093
 3951 005e 00EB8000 		add	r0, r0, r0, lsl #2
 3952 0062 2946     		mov	r1, r5
 3953 0064 0C4B     		ldr	r3, .L298+4
 3954 0066 03EB8000 		add	r0, r3, r0, lsl #2
 3955 006a FFF7FEFF 		bl	vListInsertEnd
 3956              	.LVL302:
3746:./freeRTOS/tasks.c **** 				}
 3957              		.loc 1 3746 36 view .LVU1094
3763:./freeRTOS/tasks.c **** 		}
 3958              		.loc 1 3763 28 view .LVU1095
3765:./freeRTOS/tasks.c **** 
 3959              		.loc 1 3765 2 is_stmt 0 view .LVU1096
 3960 006e E6E7     		b	.L287
ARM GAS  /tmp/cckkLGmm.s 			page 176


 3961              	.L291:
3737:./freeRTOS/tasks.c **** 					}
 3962              		.loc 1 3737 7 is_stmt 1 view .LVU1097
 3963 0070 E36A     		ldr	r3, [r4, #44]
 3964 0072 03EB8301 		add	r1, r3, r3, lsl #2
 3965 0076 084A     		ldr	r2, .L298+4
 3966 0078 52F82120 		ldr	r2, [r2, r1, lsl #2]
 3967 007c 002A     		cmp	r2, #0
 3968 007e E4D1     		bne	.L292
3737:./freeRTOS/tasks.c **** 					}
 3969              		.loc 1 3737 7 discriminator 1 view .LVU1098
 3970 0080 0122     		movs	r2, #1
 3971 0082 9A40     		lsls	r2, r2, r3
 3972 0084 0549     		ldr	r1, .L298+8
 3973 0086 0B68     		ldr	r3, [r1]
 3974 0088 23EA0203 		bic	r3, r3, r2
 3975 008c 0B60     		str	r3, [r1]
 3976 008e DCE7     		b	.L292
 3977              	.LVL303:
 3978              	.L294:
 3979              	.LCFI35:
 3980              		.cfi_def_cfa_offset 0
 3981              		.cfi_restore 3
 3982              		.cfi_restore 4
 3983              		.cfi_restore 5
 3984              		.cfi_restore 14
3737:./freeRTOS/tasks.c **** 					}
 3985              		.loc 1 3737 7 is_stmt 0 discriminator 1 view .LVU1099
 3986 0090 7047     		bx	lr
 3987              	.L299:
 3988 0092 00BF     		.align	2
 3989              	.L298:
 3990 0094 00000000 		.word	.LANCHOR10
 3991 0098 00000000 		.word	.LANCHOR4
 3992 009c 00000000 		.word	.LANCHOR13
 3993              		.cfi_endproc
 3994              	.LFE43:
 3996              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3997              		.align	1
 3998              		.global	xTaskPriorityDisinherit
 3999              		.syntax unified
 4000              		.thumb
 4001              		.thumb_func
 4002              		.fpu fpv4-sp-d16
 4004              	xTaskPriorityDisinherit:
 4005              	.LVL304:
 4006              	.LFB44:
3773:./freeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4007              		.loc 1 3773 2 is_stmt 1 view -0
 4008              		.cfi_startproc
 4009              		@ args = 0, pretend = 0, frame = 0
 4010              		@ frame_needed = 0, uses_anonymous_args = 0
3774:./freeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4011              		.loc 1 3774 2 view .LVU1101
3775:./freeRTOS/tasks.c **** 
 4012              		.loc 1 3775 2 view .LVU1102
3777:./freeRTOS/tasks.c **** 		{
ARM GAS  /tmp/cckkLGmm.s 			page 177


 4013              		.loc 1 3777 3 view .LVU1103
3777:./freeRTOS/tasks.c **** 		{
 4014              		.loc 1 3777 5 is_stmt 0 view .LVU1104
 4015 0000 0028     		cmp	r0, #0
 4016 0002 34D0     		beq	.L303
3773:./freeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4017              		.loc 1 3773 2 view .LVU1105
 4018 0004 38B5     		push	{r3, r4, r5, lr}
 4019              	.LCFI36:
 4020              		.cfi_def_cfa_offset 16
 4021              		.cfi_offset 3, -16
 4022              		.cfi_offset 4, -12
 4023              		.cfi_offset 5, -8
 4024              		.cfi_offset 14, -4
 4025 0006 0446     		mov	r4, r0
3783:./freeRTOS/tasks.c **** 
 4026              		.loc 1 3783 41 is_stmt 1 view .LVU1106
3785:./freeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4027              		.loc 1 3785 40 view .LVU1107
3786:./freeRTOS/tasks.c **** 
 4028              		.loc 1 3786 4 view .LVU1108
3786:./freeRTOS/tasks.c **** 
 4029              		.loc 1 3786 11 is_stmt 0 view .LVU1109
 4030 0008 836C     		ldr	r3, [r0, #72]
3786:./freeRTOS/tasks.c **** 
 4031              		.loc 1 3786 28 view .LVU1110
 4032 000a 013B     		subs	r3, r3, #1
 4033 000c 8364     		str	r3, [r0, #72]
3790:./freeRTOS/tasks.c **** 			{
 4034              		.loc 1 3790 4 is_stmt 1 view .LVU1111
3790:./freeRTOS/tasks.c **** 			{
 4035              		.loc 1 3790 13 is_stmt 0 view .LVU1112
 4036 000e C16A     		ldr	r1, [r0, #44]
3790:./freeRTOS/tasks.c **** 			{
 4037              		.loc 1 3790 34 view .LVU1113
 4038 0010 426C     		ldr	r2, [r0, #68]
3790:./freeRTOS/tasks.c **** 			{
 4039              		.loc 1 3790 6 view .LVU1114
 4040 0012 9142     		cmp	r1, r2
 4041 0014 2DD0     		beq	.L304
3793:./freeRTOS/tasks.c **** 				{
 4042              		.loc 1 3793 5 is_stmt 1 view .LVU1115
3793:./freeRTOS/tasks.c **** 				{
 4043              		.loc 1 3793 7 is_stmt 0 view .LVU1116
 4044 0016 0BB1     		cbz	r3, .L310
3775:./freeRTOS/tasks.c **** 
 4045              		.loc 1 3775 13 view .LVU1117
 4046 0018 0020     		movs	r0, #0
 4047              	.LVL305:
3842:./freeRTOS/tasks.c **** 		}
 4048              		.loc 1 3842 28 is_stmt 1 view .LVU1118
3845:./freeRTOS/tasks.c **** 	}
 4049              		.loc 1 3845 3 view .LVU1119
 4050              	.L300:
3846:./freeRTOS/tasks.c **** 
 4051              		.loc 1 3846 2 is_stmt 0 view .LVU1120
 4052 001a 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/cckkLGmm.s 			page 178


 4053              	.LVL306:
 4054              	.L310:
3800:./freeRTOS/tasks.c **** 					{
 4055              		.loc 1 3800 6 is_stmt 1 view .LVU1121
3800:./freeRTOS/tasks.c **** 					{
 4056              		.loc 1 3800 10 is_stmt 0 view .LVU1122
 4057 001c 051D     		adds	r5, r0, #4
 4058 001e 2846     		mov	r0, r5
 4059              	.LVL307:
3800:./freeRTOS/tasks.c **** 					{
 4060              		.loc 1 3800 10 view .LVU1123
 4061 0020 FFF7FEFF 		bl	uxListRemove
 4062              	.LVL308:
3800:./freeRTOS/tasks.c **** 					{
 4063              		.loc 1 3800 8 view .LVU1124
 4064 0024 68B9     		cbnz	r0, .L302
3802:./freeRTOS/tasks.c **** 					}
 4065              		.loc 1 3802 7 is_stmt 1 view .LVU1125
 4066 0026 E36A     		ldr	r3, [r4, #44]
 4067 0028 03EB8301 		add	r1, r3, r3, lsl #2
 4068 002c 124A     		ldr	r2, .L311
 4069 002e 52F82120 		ldr	r2, [r2, r1, lsl #2]
 4070 0032 32B9     		cbnz	r2, .L302
3802:./freeRTOS/tasks.c **** 					}
 4071              		.loc 1 3802 7 discriminator 1 view .LVU1126
 4072 0034 0122     		movs	r2, #1
 4073 0036 9A40     		lsls	r2, r2, r3
 4074 0038 1049     		ldr	r1, .L311+4
 4075 003a 0B68     		ldr	r3, [r1]
 4076 003c 23EA0203 		bic	r3, r3, r2
 4077 0040 0B60     		str	r3, [r1]
 4078              	.L302:
3806:./freeRTOS/tasks.c **** 					}
 4079              		.loc 1 3806 31 view .LVU1127
3811:./freeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4080              		.loc 1 3811 67 view .LVU1128
3812:./freeRTOS/tasks.c **** 
 4081              		.loc 1 3812 6 view .LVU1129
3812:./freeRTOS/tasks.c **** 
 4082              		.loc 1 3812 31 is_stmt 0 view .LVU1130
 4083 0042 606C     		ldr	r0, [r4, #68]
3812:./freeRTOS/tasks.c **** 
 4084              		.loc 1 3812 24 view .LVU1131
 4085 0044 E062     		str	r0, [r4, #44]
3817:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4086              		.loc 1 3817 6 is_stmt 1 view .LVU1132
 4087 0046 C0F10A03 		rsb	r3, r0, #10
 4088 004a A361     		str	r3, [r4, #24]
3818:./freeRTOS/tasks.c **** 
 4089              		.loc 1 3818 6 view .LVU1133
3818:./freeRTOS/tasks.c **** 
 4090              		.loc 1 3818 6 view .LVU1134
 4091 004c 0124     		movs	r4, #1
 4092              	.LVL309:
3818:./freeRTOS/tasks.c **** 
 4093              		.loc 1 3818 6 is_stmt 0 view .LVU1135
 4094 004e 04FA00F3 		lsl	r3, r4, r0
ARM GAS  /tmp/cckkLGmm.s 			page 179


 4095 0052 0A4A     		ldr	r2, .L311+4
 4096 0054 1168     		ldr	r1, [r2]
 4097 0056 0B43     		orrs	r3, r3, r1
 4098 0058 1360     		str	r3, [r2]
3818:./freeRTOS/tasks.c **** 
 4099              		.loc 1 3818 6 is_stmt 1 view .LVU1136
 4100 005a 00EB8000 		add	r0, r0, r0, lsl #2
 4101 005e 2946     		mov	r1, r5
 4102 0060 054B     		ldr	r3, .L311
 4103 0062 03EB8000 		add	r0, r3, r0, lsl #2
 4104 0066 FFF7FEFF 		bl	vListInsertEnd
 4105              	.LVL310:
3818:./freeRTOS/tasks.c **** 
 4106              		.loc 1 3818 36 view .LVU1137
3828:./freeRTOS/tasks.c **** 				}
 4107              		.loc 1 3828 6 view .LVU1138
3828:./freeRTOS/tasks.c **** 				}
 4108              		.loc 1 3828 14 is_stmt 0 view .LVU1139
 4109 006a 2046     		mov	r0, r4
 4110 006c D5E7     		b	.L300
 4111              	.LVL311:
 4112              	.L303:
 4113              	.LCFI37:
 4114              		.cfi_def_cfa_offset 0
 4115              		.cfi_restore 3
 4116              		.cfi_restore 4
 4117              		.cfi_restore 5
 4118              		.cfi_restore 14
3775:./freeRTOS/tasks.c **** 
 4119              		.loc 1 3775 13 view .LVU1140
 4120 006e 0020     		movs	r0, #0
 4121              	.LVL312:
3846:./freeRTOS/tasks.c **** 
 4122              		.loc 1 3846 2 view .LVU1141
 4123 0070 7047     		bx	lr
 4124              	.LVL313:
 4125              	.L304:
 4126              	.LCFI38:
 4127              		.cfi_def_cfa_offset 16
 4128              		.cfi_offset 3, -16
 4129              		.cfi_offset 4, -12
 4130              		.cfi_offset 5, -8
 4131              		.cfi_offset 14, -4
3775:./freeRTOS/tasks.c **** 
 4132              		.loc 1 3775 13 view .LVU1142
 4133 0072 0020     		movs	r0, #0
 4134              	.LVL314:
3775:./freeRTOS/tasks.c **** 
 4135              		.loc 1 3775 13 view .LVU1143
 4136 0074 D1E7     		b	.L300
 4137              	.L312:
 4138 0076 00BF     		.align	2
 4139              	.L311:
 4140 0078 00000000 		.word	.LANCHOR4
 4141 007c 00000000 		.word	.LANCHOR13
 4142              		.cfi_endproc
 4143              	.LFE44:
ARM GAS  /tmp/cckkLGmm.s 			page 180


 4145              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4146              		.align	1
 4147              		.global	uxTaskResetEventItemValue
 4148              		.syntax unified
 4149              		.thumb
 4150              		.thumb_func
 4151              		.fpu fpv4-sp-d16
 4153              	uxTaskResetEventItemValue:
 4154              	.LFB45:
4163:./freeRTOS/tasks.c **** TickType_t uxReturn;
 4155              		.loc 1 4163 1 is_stmt 1 view -0
 4156              		.cfi_startproc
 4157              		@ args = 0, pretend = 0, frame = 0
 4158              		@ frame_needed = 0, uses_anonymous_args = 0
 4159              		@ link register save eliminated.
4164:./freeRTOS/tasks.c **** 
 4160              		.loc 1 4164 1 view .LVU1145
4166:./freeRTOS/tasks.c **** 
 4161              		.loc 1 4166 2 view .LVU1146
4166:./freeRTOS/tasks.c **** 
 4162              		.loc 1 4166 13 is_stmt 0 view .LVU1147
 4163 0000 044A     		ldr	r2, .L314
 4164 0002 1368     		ldr	r3, [r2]
4166:./freeRTOS/tasks.c **** 
 4165              		.loc 1 4166 11 view .LVU1148
 4166 0004 9869     		ldr	r0, [r3, #24]
 4167              	.LVL315:
4170:./freeRTOS/tasks.c **** 
 4168              		.loc 1 4170 2 is_stmt 1 view .LVU1149
 4169 0006 1368     		ldr	r3, [r2]
 4170 0008 DB6A     		ldr	r3, [r3, #44]
 4171 000a 1268     		ldr	r2, [r2]
 4172 000c C3F10A03 		rsb	r3, r3, #10
 4173 0010 9361     		str	r3, [r2, #24]
4172:./freeRTOS/tasks.c **** }
 4174              		.loc 1 4172 2 view .LVU1150
4173:./freeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4175              		.loc 1 4173 1 is_stmt 0 view .LVU1151
 4176 0012 7047     		bx	lr
 4177              	.L315:
 4178              		.align	2
 4179              	.L314:
 4180 0014 00000000 		.word	.LANCHOR10
 4181              		.cfi_endproc
 4182              	.LFE45:
 4184              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4185              		.align	1
 4186              		.global	pvTaskIncrementMutexHeldCount
 4187              		.syntax unified
 4188              		.thumb
 4189              		.thumb_func
 4190              		.fpu fpv4-sp-d16
 4192              	pvTaskIncrementMutexHeldCount:
 4193              	.LFB46:
4179:./freeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4194              		.loc 1 4179 2 is_stmt 1 view -0
 4195              		.cfi_startproc
ARM GAS  /tmp/cckkLGmm.s 			page 181


 4196              		@ args = 0, pretend = 0, frame = 0
 4197              		@ frame_needed = 0, uses_anonymous_args = 0
 4198              		@ link register save eliminated.
4182:./freeRTOS/tasks.c **** 		{
 4199              		.loc 1 4182 3 view .LVU1153
4182:./freeRTOS/tasks.c **** 		{
 4200              		.loc 1 4182 20 is_stmt 0 view .LVU1154
 4201 0000 054B     		ldr	r3, .L318
 4202 0002 1B68     		ldr	r3, [r3]
4182:./freeRTOS/tasks.c **** 		{
 4203              		.loc 1 4182 5 view .LVU1155
 4204 0004 23B1     		cbz	r3, .L317
4184:./freeRTOS/tasks.c **** 		}
 4205              		.loc 1 4184 4 is_stmt 1 view .LVU1156
4184:./freeRTOS/tasks.c **** 		}
 4206              		.loc 1 4184 18 is_stmt 0 view .LVU1157
 4207 0006 044B     		ldr	r3, .L318
 4208 0008 1A68     		ldr	r2, [r3]
 4209 000a 936C     		ldr	r3, [r2, #72]
4184:./freeRTOS/tasks.c **** 		}
 4210              		.loc 1 4184 35 view .LVU1158
 4211 000c 0133     		adds	r3, r3, #1
 4212 000e 9364     		str	r3, [r2, #72]
 4213              	.L317:
4187:./freeRTOS/tasks.c **** 	}
 4214              		.loc 1 4187 3 is_stmt 1 view .LVU1159
4187:./freeRTOS/tasks.c **** 	}
 4215              		.loc 1 4187 10 is_stmt 0 view .LVU1160
 4216 0010 014B     		ldr	r3, .L318
 4217 0012 1868     		ldr	r0, [r3]
4188:./freeRTOS/tasks.c **** 
 4218              		.loc 1 4188 2 view .LVU1161
 4219 0014 7047     		bx	lr
 4220              	.L319:
 4221 0016 00BF     		.align	2
 4222              	.L318:
 4223 0018 00000000 		.word	.LANCHOR10
 4224              		.cfi_endproc
 4225              	.LFE46:
 4227              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4228              		.align	1
 4229              		.global	ulTaskNotifyTake
 4230              		.syntax unified
 4231              		.thumb
 4232              		.thumb_func
 4233              		.fpu fpv4-sp-d16
 4235              	ulTaskNotifyTake:
 4236              	.LVL316:
 4237              	.LFB47:
4196:./freeRTOS/tasks.c **** 	uint32_t ulReturn;
 4238              		.loc 1 4196 2 is_stmt 1 view -0
 4239              		.cfi_startproc
 4240              		@ args = 0, pretend = 0, frame = 0
 4241              		@ frame_needed = 0, uses_anonymous_args = 0
4196:./freeRTOS/tasks.c **** 	uint32_t ulReturn;
 4242              		.loc 1 4196 2 is_stmt 0 view .LVU1163
 4243 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/cckkLGmm.s 			page 182


 4244              	.LCFI39:
 4245              		.cfi_def_cfa_offset 16
 4246              		.cfi_offset 3, -16
 4247              		.cfi_offset 4, -12
 4248              		.cfi_offset 5, -8
 4249              		.cfi_offset 14, -4
 4250 0002 0546     		mov	r5, r0
 4251 0004 0C46     		mov	r4, r1
4197:./freeRTOS/tasks.c **** 
 4252              		.loc 1 4197 2 is_stmt 1 view .LVU1164
4199:./freeRTOS/tasks.c **** 		{
 4253              		.loc 1 4199 3 view .LVU1165
 4254 0006 FFF7FEFF 		bl	vPortEnterCritical
 4255              	.LVL317:
4202:./freeRTOS/tasks.c **** 			{
 4256              		.loc 1 4202 4 view .LVU1166
4202:./freeRTOS/tasks.c **** 			{
 4257              		.loc 1 4202 20 is_stmt 0 view .LVU1167
 4258 000a 1A4B     		ldr	r3, .L326
 4259 000c 1B68     		ldr	r3, [r3]
 4260 000e DB6C     		ldr	r3, [r3, #76]
4202:./freeRTOS/tasks.c **** 			{
 4261              		.loc 1 4202 6 view .LVU1168
 4262 0010 2BB9     		cbnz	r3, .L321
4205:./freeRTOS/tasks.c **** 
 4263              		.loc 1 4205 5 is_stmt 1 view .LVU1169
4205:./freeRTOS/tasks.c **** 
 4264              		.loc 1 4205 17 is_stmt 0 view .LVU1170
 4265 0012 184B     		ldr	r3, .L326
 4266 0014 1B68     		ldr	r3, [r3]
4205:./freeRTOS/tasks.c **** 
 4267              		.loc 1 4205 33 view .LVU1171
 4268 0016 0122     		movs	r2, #1
 4269 0018 83F85020 		strb	r2, [r3, #80]
4207:./freeRTOS/tasks.c **** 				{
 4270              		.loc 1 4207 5 is_stmt 1 view .LVU1172
4207:./freeRTOS/tasks.c **** 				{
 4271              		.loc 1 4207 7 is_stmt 0 view .LVU1173
 4272 001c ACB9     		cbnz	r4, .L325
 4273              	.L321:
4225:./freeRTOS/tasks.c **** 			}
 4274              		.loc 1 4225 29 is_stmt 1 view .LVU1174
4228:./freeRTOS/tasks.c **** 
 4275              		.loc 1 4228 3 view .LVU1175
 4276 001e FFF7FEFF 		bl	vPortExitCritical
 4277              	.LVL318:
4230:./freeRTOS/tasks.c **** 		{
 4278              		.loc 1 4230 3 view .LVU1176
 4279 0022 FFF7FEFF 		bl	vPortEnterCritical
 4280              	.LVL319:
4232:./freeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4281              		.loc 1 4232 27 view .LVU1177
4233:./freeRTOS/tasks.c **** 
 4282              		.loc 1 4233 4 view .LVU1178
4233:./freeRTOS/tasks.c **** 
 4283              		.loc 1 4233 27 is_stmt 0 view .LVU1179
 4284 0026 134B     		ldr	r3, .L326
ARM GAS  /tmp/cckkLGmm.s 			page 183


 4285 0028 1B68     		ldr	r3, [r3]
4233:./freeRTOS/tasks.c **** 
 4286              		.loc 1 4233 13 view .LVU1180
 4287 002a DC6C     		ldr	r4, [r3, #76]
 4288              	.LVL320:
4235:./freeRTOS/tasks.c **** 			{
 4289              		.loc 1 4235 4 is_stmt 1 view .LVU1181
4235:./freeRTOS/tasks.c **** 			{
 4290              		.loc 1 4235 6 is_stmt 0 view .LVU1182
 4291 002c 24B1     		cbz	r4, .L322
4237:./freeRTOS/tasks.c **** 				{
 4292              		.loc 1 4237 5 is_stmt 1 view .LVU1183
4237:./freeRTOS/tasks.c **** 				{
 4293              		.loc 1 4237 7 is_stmt 0 view .LVU1184
 4294 002e DDB1     		cbz	r5, .L323
4239:./freeRTOS/tasks.c **** 				}
 4295              		.loc 1 4239 6 is_stmt 1 view .LVU1185
4239:./freeRTOS/tasks.c **** 				}
 4296              		.loc 1 4239 18 is_stmt 0 view .LVU1186
 4297 0030 104B     		ldr	r3, .L326
 4298 0032 1B68     		ldr	r3, [r3]
4239:./freeRTOS/tasks.c **** 				}
 4299              		.loc 1 4239 36 view .LVU1187
 4300 0034 0022     		movs	r2, #0
 4301 0036 DA64     		str	r2, [r3, #76]
 4302              	.L322:
4248:./freeRTOS/tasks.c **** 			}
 4303              		.loc 1 4248 29 is_stmt 1 view .LVU1188
4251:./freeRTOS/tasks.c **** 		}
 4304              		.loc 1 4251 4 view .LVU1189
4251:./freeRTOS/tasks.c **** 		}
 4305              		.loc 1 4251 16 is_stmt 0 view .LVU1190
 4306 0038 0E4B     		ldr	r3, .L326
 4307 003a 1B68     		ldr	r3, [r3]
4251:./freeRTOS/tasks.c **** 		}
 4308              		.loc 1 4251 32 view .LVU1191
 4309 003c 0022     		movs	r2, #0
 4310 003e 83F85020 		strb	r2, [r3, #80]
4253:./freeRTOS/tasks.c **** 
 4311              		.loc 1 4253 3 is_stmt 1 view .LVU1192
 4312 0042 FFF7FEFF 		bl	vPortExitCritical
 4313              	.LVL321:
4255:./freeRTOS/tasks.c **** 	}
 4314              		.loc 1 4255 3 view .LVU1193
4256:./freeRTOS/tasks.c **** 
 4315              		.loc 1 4256 2 is_stmt 0 view .LVU1194
 4316 0046 2046     		mov	r0, r4
 4317 0048 38BD     		pop	{r3, r4, r5, pc}
 4318              	.LVL322:
 4319              	.L325:
4209:./freeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4320              		.loc 1 4209 6 is_stmt 1 view .LVU1195
 4321 004a 1146     		mov	r1, r2
 4322 004c 2046     		mov	r0, r4
 4323 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4324              	.LVL323:
4210:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 184


 4325              		.loc 1 4210 35 view .LVU1196
4216:./freeRTOS/tasks.c **** 				}
 4326              		.loc 1 4216 6 view .LVU1197
 4327 0052 4FF0E023 		mov	r3, #-536813568
 4328 0056 4FF08052 		mov	r2, #268435456
 4329 005a C3F8042D 		str	r2, [r3, #3332]
4216:./freeRTOS/tasks.c **** 				}
 4330              		.loc 1 4216 6 view .LVU1198
 4331              		.syntax unified
 4332              	@ 4216 "./freeRTOS/tasks.c" 1
 4333 005e BFF34F8F 		dsb
 4334              	@ 0 "" 2
4216:./freeRTOS/tasks.c **** 				}
 4335              		.loc 1 4216 6 view .LVU1199
 4336              	@ 4216 "./freeRTOS/tasks.c" 1
 4337 0062 BFF36F8F 		isb
 4338              	@ 0 "" 2
4216:./freeRTOS/tasks.c **** 				}
 4339              		.loc 1 4216 28 view .LVU1200
 4340              		.thumb
 4341              		.syntax unified
 4342 0066 DAE7     		b	.L321
 4343              	.LVL324:
 4344              	.L323:
4243:./freeRTOS/tasks.c **** 				}
 4345              		.loc 1 4243 6 view .LVU1201
4243:./freeRTOS/tasks.c **** 				}
 4346              		.loc 1 4243 18 is_stmt 0 view .LVU1202
 4347 0068 024B     		ldr	r3, .L326
 4348 006a 1B68     		ldr	r3, [r3]
4243:./freeRTOS/tasks.c **** 				}
 4349              		.loc 1 4243 47 view .LVU1203
 4350 006c 621E     		subs	r2, r4, #1
4243:./freeRTOS/tasks.c **** 				}
 4351              		.loc 1 4243 36 view .LVU1204
 4352 006e DA64     		str	r2, [r3, #76]
 4353 0070 E2E7     		b	.L322
 4354              	.L327:
 4355 0072 00BF     		.align	2
 4356              	.L326:
 4357 0074 00000000 		.word	.LANCHOR10
 4358              		.cfi_endproc
 4359              	.LFE47:
 4361              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4362              		.align	1
 4363              		.global	xTaskNotifyWait
 4364              		.syntax unified
 4365              		.thumb
 4366              		.thumb_func
 4367              		.fpu fpv4-sp-d16
 4369              	xTaskNotifyWait:
 4370              	.LVL325:
 4371              	.LFB48:
4264:./freeRTOS/tasks.c **** 	BaseType_t xReturn;
 4372              		.loc 1 4264 2 is_stmt 1 view -0
 4373              		.cfi_startproc
 4374              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cckkLGmm.s 			page 185


 4375              		@ frame_needed = 0, uses_anonymous_args = 0
4264:./freeRTOS/tasks.c **** 	BaseType_t xReturn;
 4376              		.loc 1 4264 2 is_stmt 0 view .LVU1206
 4377 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4378              	.LCFI40:
 4379              		.cfi_def_cfa_offset 24
 4380              		.cfi_offset 3, -24
 4381              		.cfi_offset 4, -20
 4382              		.cfi_offset 5, -16
 4383              		.cfi_offset 6, -12
 4384              		.cfi_offset 7, -8
 4385              		.cfi_offset 14, -4
 4386 0002 0746     		mov	r7, r0
 4387 0004 0E46     		mov	r6, r1
 4388 0006 1446     		mov	r4, r2
 4389 0008 1D46     		mov	r5, r3
4265:./freeRTOS/tasks.c **** 
 4390              		.loc 1 4265 2 is_stmt 1 view .LVU1207
4267:./freeRTOS/tasks.c **** 		{
 4391              		.loc 1 4267 3 view .LVU1208
 4392 000a FFF7FEFF 		bl	vPortEnterCritical
 4393              	.LVL326:
4270:./freeRTOS/tasks.c **** 			{
 4394              		.loc 1 4270 4 view .LVU1209
4270:./freeRTOS/tasks.c **** 			{
 4395              		.loc 1 4270 20 is_stmt 0 view .LVU1210
 4396 000e 214B     		ldr	r3, .L335
 4397 0010 1B68     		ldr	r3, [r3]
 4398 0012 93F85020 		ldrb	r2, [r3, #80]	@ zero_extendqisi2
 4399 0016 D2B2     		uxtb	r2, r2
4270:./freeRTOS/tasks.c **** 			{
 4400              		.loc 1 4270 6 view .LVU1211
 4401 0018 022A     		cmp	r2, #2
 4402 001a 0AD0     		beq	.L329
4275:./freeRTOS/tasks.c **** 
 4403              		.loc 1 4275 5 is_stmt 1 view .LVU1212
4275:./freeRTOS/tasks.c **** 
 4404              		.loc 1 4275 35 is_stmt 0 view .LVU1213
 4405 001c 1D4B     		ldr	r3, .L335
 4406 001e 1A68     		ldr	r2, [r3]
 4407 0020 D06C     		ldr	r0, [r2, #76]
 4408 0022 20EA0707 		bic	r7, r0, r7
 4409              	.LVL327:
4275:./freeRTOS/tasks.c **** 
 4410              		.loc 1 4275 35 view .LVU1214
 4411 0026 D764     		str	r7, [r2, #76]
4278:./freeRTOS/tasks.c **** 
 4412              		.loc 1 4278 5 is_stmt 1 view .LVU1215
4278:./freeRTOS/tasks.c **** 
 4413              		.loc 1 4278 17 is_stmt 0 view .LVU1216
 4414 0028 1B68     		ldr	r3, [r3]
4278:./freeRTOS/tasks.c **** 
 4415              		.loc 1 4278 33 view .LVU1217
 4416 002a 0122     		movs	r2, #1
 4417 002c 83F85020 		strb	r2, [r3, #80]
4280:./freeRTOS/tasks.c **** 				{
 4418              		.loc 1 4280 5 is_stmt 1 view .LVU1218
ARM GAS  /tmp/cckkLGmm.s 			page 186


4280:./freeRTOS/tasks.c **** 				{
 4419              		.loc 1 4280 7 is_stmt 0 view .LVU1219
 4420 0030 FDB9     		cbnz	r5, .L334
 4421              	.L329:
4298:./freeRTOS/tasks.c **** 			}
 4422              		.loc 1 4298 29 is_stmt 1 view .LVU1220
4301:./freeRTOS/tasks.c **** 
 4423              		.loc 1 4301 3 view .LVU1221
 4424 0032 FFF7FEFF 		bl	vPortExitCritical
 4425              	.LVL328:
4303:./freeRTOS/tasks.c **** 		{
 4426              		.loc 1 4303 3 view .LVU1222
 4427 0036 FFF7FEFF 		bl	vPortEnterCritical
 4428              	.LVL329:
4305:./freeRTOS/tasks.c **** 
 4429              		.loc 1 4305 27 view .LVU1223
4307:./freeRTOS/tasks.c **** 			{
 4430              		.loc 1 4307 4 view .LVU1224
4307:./freeRTOS/tasks.c **** 			{
 4431              		.loc 1 4307 6 is_stmt 0 view .LVU1225
 4432 003a 1CB1     		cbz	r4, .L330
4311:./freeRTOS/tasks.c **** 			}
 4433              		.loc 1 4311 5 is_stmt 1 view .LVU1226
4311:./freeRTOS/tasks.c **** 			}
 4434              		.loc 1 4311 41 is_stmt 0 view .LVU1227
 4435 003c 154B     		ldr	r3, .L335
 4436 003e 1B68     		ldr	r3, [r3]
 4437 0040 DB6C     		ldr	r3, [r3, #76]
4311:./freeRTOS/tasks.c **** 			}
 4438              		.loc 1 4311 27 view .LVU1228
 4439 0042 2360     		str	r3, [r4]
 4440              	.L330:
4318:./freeRTOS/tasks.c **** 			{
 4441              		.loc 1 4318 4 is_stmt 1 view .LVU1229
4318:./freeRTOS/tasks.c **** 			{
 4442              		.loc 1 4318 20 is_stmt 0 view .LVU1230
 4443 0044 134B     		ldr	r3, .L335
 4444 0046 1B68     		ldr	r3, [r3]
 4445 0048 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4446 004c DBB2     		uxtb	r3, r3
4318:./freeRTOS/tasks.c **** 			{
 4447              		.loc 1 4318 6 view .LVU1231
 4448 004e 012B     		cmp	r3, #1
 4449 0050 1ED0     		beq	.L332
4327:./freeRTOS/tasks.c **** 				xReturn = pdTRUE;
 4450              		.loc 1 4327 5 is_stmt 1 view .LVU1232
4327:./freeRTOS/tasks.c **** 				xReturn = pdTRUE;
 4451              		.loc 1 4327 35 is_stmt 0 view .LVU1233
 4452 0052 104B     		ldr	r3, .L335
 4453 0054 1B68     		ldr	r3, [r3]
 4454 0056 D96C     		ldr	r1, [r3, #76]
 4455 0058 21EA0606 		bic	r6, r1, r6
 4456              	.LVL330:
4327:./freeRTOS/tasks.c **** 				xReturn = pdTRUE;
 4457              		.loc 1 4327 35 view .LVU1234
 4458 005c DE64     		str	r6, [r3, #76]
4328:./freeRTOS/tasks.c **** 			}
ARM GAS  /tmp/cckkLGmm.s 			page 187


 4459              		.loc 1 4328 5 is_stmt 1 view .LVU1235
 4460              	.LVL331:
4328:./freeRTOS/tasks.c **** 			}
 4461              		.loc 1 4328 13 is_stmt 0 view .LVU1236
 4462 005e 0124     		movs	r4, #1
 4463              	.LVL332:
 4464              	.L331:
4331:./freeRTOS/tasks.c **** 		}
 4465              		.loc 1 4331 4 is_stmt 1 view .LVU1237
4331:./freeRTOS/tasks.c **** 		}
 4466              		.loc 1 4331 16 is_stmt 0 view .LVU1238
 4467 0060 0C4B     		ldr	r3, .L335
 4468 0062 1B68     		ldr	r3, [r3]
4331:./freeRTOS/tasks.c **** 		}
 4469              		.loc 1 4331 32 view .LVU1239
 4470 0064 0022     		movs	r2, #0
 4471 0066 83F85020 		strb	r2, [r3, #80]
4333:./freeRTOS/tasks.c **** 
 4472              		.loc 1 4333 3 is_stmt 1 view .LVU1240
 4473 006a FFF7FEFF 		bl	vPortExitCritical
 4474              	.LVL333:
4335:./freeRTOS/tasks.c **** 	}
 4475              		.loc 1 4335 3 view .LVU1241
4336:./freeRTOS/tasks.c **** 
 4476              		.loc 1 4336 2 is_stmt 0 view .LVU1242
 4477 006e 2046     		mov	r0, r4
 4478 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4479              	.LVL334:
 4480              	.L334:
4282:./freeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4481              		.loc 1 4282 6 is_stmt 1 view .LVU1243
 4482 0072 1146     		mov	r1, r2
 4483 0074 2846     		mov	r0, r5
 4484 0076 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4485              	.LVL335:
4283:./freeRTOS/tasks.c **** 
 4486              		.loc 1 4283 35 view .LVU1244
4289:./freeRTOS/tasks.c **** 				}
 4487              		.loc 1 4289 6 view .LVU1245
 4488 007a 4FF0E023 		mov	r3, #-536813568
 4489 007e 4FF08052 		mov	r2, #268435456
 4490 0082 C3F8042D 		str	r2, [r3, #3332]
4289:./freeRTOS/tasks.c **** 				}
 4491              		.loc 1 4289 6 view .LVU1246
 4492              		.syntax unified
 4493              	@ 4289 "./freeRTOS/tasks.c" 1
 4494 0086 BFF34F8F 		dsb
 4495              	@ 0 "" 2
4289:./freeRTOS/tasks.c **** 				}
 4496              		.loc 1 4289 6 view .LVU1247
 4497              	@ 4289 "./freeRTOS/tasks.c" 1
 4498 008a BFF36F8F 		isb
 4499              	@ 0 "" 2
4289:./freeRTOS/tasks.c **** 				}
 4500              		.loc 1 4289 28 view .LVU1248
 4501              		.thumb
 4502              		.syntax unified
ARM GAS  /tmp/cckkLGmm.s 			page 188


 4503 008e D0E7     		b	.L329
 4504              	.L332:
4321:./freeRTOS/tasks.c **** 			}
 4505              		.loc 1 4321 13 is_stmt 0 view .LVU1249
 4506 0090 0024     		movs	r4, #0
 4507              	.LVL336:
4321:./freeRTOS/tasks.c **** 			}
 4508              		.loc 1 4321 13 view .LVU1250
 4509 0092 E5E7     		b	.L331
 4510              	.L336:
 4511              		.align	2
 4512              	.L335:
 4513 0094 00000000 		.word	.LANCHOR10
 4514              		.cfi_endproc
 4515              	.LFE48:
 4517              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4518              		.align	1
 4519              		.global	xTaskGenericNotify
 4520              		.syntax unified
 4521              		.thumb
 4522              		.thumb_func
 4523              		.fpu fpv4-sp-d16
 4525              	xTaskGenericNotify:
 4526              	.LVL337:
 4527              	.LFB49:
4344:./freeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4528              		.loc 1 4344 2 is_stmt 1 view -0
 4529              		.cfi_startproc
 4530              		@ args = 0, pretend = 0, frame = 0
 4531              		@ frame_needed = 0, uses_anonymous_args = 0
4344:./freeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4532              		.loc 1 4344 2 is_stmt 0 view .LVU1252
 4533 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4534              	.LCFI41:
 4535              		.cfi_def_cfa_offset 24
 4536              		.cfi_offset 3, -24
 4537              		.cfi_offset 4, -20
 4538              		.cfi_offset 5, -16
 4539              		.cfi_offset 6, -12
 4540              		.cfi_offset 7, -8
 4541              		.cfi_offset 14, -4
 4542 0002 0446     		mov	r4, r0
 4543 0004 0F46     		mov	r7, r1
 4544 0006 1546     		mov	r5, r2
 4545 0008 1E46     		mov	r6, r3
4345:./freeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4546              		.loc 1 4345 2 is_stmt 1 view .LVU1253
4346:./freeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4547              		.loc 1 4346 2 view .LVU1254
 4548              	.LVL338:
4347:./freeRTOS/tasks.c **** 
 4549              		.loc 1 4347 2 view .LVU1255
4349:./freeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4550              		.loc 1 4349 32 view .LVU1256
4350:./freeRTOS/tasks.c **** 
 4551              		.loc 1 4350 3 view .LVU1257
4352:./freeRTOS/tasks.c **** 		{
ARM GAS  /tmp/cckkLGmm.s 			page 189


 4552              		.loc 1 4352 3 view .LVU1258
 4553 000a FFF7FEFF 		bl	vPortEnterCritical
 4554              	.LVL339:
4354:./freeRTOS/tasks.c **** 			{
 4555              		.loc 1 4354 4 view .LVU1259
4354:./freeRTOS/tasks.c **** 			{
 4556              		.loc 1 4354 6 is_stmt 0 view .LVU1260
 4557 000e 0EB1     		cbz	r6, .L338
4356:./freeRTOS/tasks.c **** 			}
 4558              		.loc 1 4356 5 is_stmt 1 view .LVU1261
4356:./freeRTOS/tasks.c **** 			}
 4559              		.loc 1 4356 42 is_stmt 0 view .LVU1262
 4560 0010 E36C     		ldr	r3, [r4, #76]
4356:./freeRTOS/tasks.c **** 			}
 4561              		.loc 1 4356 35 view .LVU1263
 4562 0012 3360     		str	r3, [r6]
 4563              	.L338:
4359:./freeRTOS/tasks.c **** 
 4564              		.loc 1 4359 4 is_stmt 1 view .LVU1264
4359:./freeRTOS/tasks.c **** 
 4565              		.loc 1 4359 26 is_stmt 0 view .LVU1265
 4566 0014 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4567 0018 DBB2     		uxtb	r3, r3
 4568              	.LVL340:
4361:./freeRTOS/tasks.c **** 
 4569              		.loc 1 4361 4 is_stmt 1 view .LVU1266
4361:./freeRTOS/tasks.c **** 
 4570              		.loc 1 4361 25 is_stmt 0 view .LVU1267
 4571 001a 0222     		movs	r2, #2
 4572 001c 84F85020 		strb	r2, [r4, #80]
4363:./freeRTOS/tasks.c **** 			{
 4573              		.loc 1 4363 4 is_stmt 1 view .LVU1268
 4574 0020 6A1E     		subs	r2, r5, #1
 4575 0022 032A     		cmp	r2, #3
 4576 0024 1AD8     		bhi	.L346
 4577 0026 DFE802F0 		tbb	[pc, r2]
 4578              	.L341:
 4579 002a 02       		.byte	(.L344-.L341)/2
 4580 002b 0C       		.byte	(.L343-.L341)/2
 4581 002c 11       		.byte	(.L342-.L341)/2
 4582 002d 14       		.byte	(.L340-.L341)/2
 4583              		.p2align 1
 4584              	.L344:
4366:./freeRTOS/tasks.c **** 					break;
 4585              		.loc 1 4366 6 view .LVU1269
4366:./freeRTOS/tasks.c **** 					break;
 4586              		.loc 1 4366 29 is_stmt 0 view .LVU1270
 4587 002e E16C     		ldr	r1, [r4, #76]
 4588 0030 0F43     		orrs	r7, r7, r1
 4589              	.LVL341:
4366:./freeRTOS/tasks.c **** 					break;
 4590              		.loc 1 4366 29 view .LVU1271
 4591 0032 E764     		str	r7, [r4, #76]
4367:./freeRTOS/tasks.c **** 
 4592              		.loc 1 4367 6 is_stmt 1 view .LVU1272
4346:./freeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4593              		.loc 1 4346 13 is_stmt 0 view .LVU1273
ARM GAS  /tmp/cckkLGmm.s 			page 190


 4594 0034 0125     		movs	r5, #1
 4595              	.L339:
 4596              	.LVL342:
4395:./freeRTOS/tasks.c **** 
 4597              		.loc 1 4395 22 is_stmt 1 view .LVU1274
4399:./freeRTOS/tasks.c **** 			{
 4598              		.loc 1 4399 4 view .LVU1275
4399:./freeRTOS/tasks.c **** 			{
 4599              		.loc 1 4399 6 is_stmt 0 view .LVU1276
 4600 0036 012B     		cmp	r3, #1
 4601 0038 14D0     		beq	.L349
 4602              	.LVL343:
 4603              	.L345:
4436:./freeRTOS/tasks.c **** 			}
 4604              		.loc 1 4436 29 is_stmt 1 view .LVU1277
4439:./freeRTOS/tasks.c **** 
 4605              		.loc 1 4439 3 view .LVU1278
 4606 003a FFF7FEFF 		bl	vPortExitCritical
 4607              	.LVL344:
4441:./freeRTOS/tasks.c **** 	}
 4608              		.loc 1 4441 3 view .LVU1279
4442:./freeRTOS/tasks.c **** 
 4609              		.loc 1 4442 2 is_stmt 0 view .LVU1280
 4610 003e 2846     		mov	r0, r5
 4611 0040 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4612              	.LVL345:
 4613              	.L343:
4370:./freeRTOS/tasks.c **** 					break;
 4614              		.loc 1 4370 6 is_stmt 1 view .LVU1281
4370:./freeRTOS/tasks.c **** 					break;
 4615              		.loc 1 4370 13 is_stmt 0 view .LVU1282
 4616 0042 E26C     		ldr	r2, [r4, #76]
4370:./freeRTOS/tasks.c **** 					break;
 4617              		.loc 1 4370 32 view .LVU1283
 4618 0044 0132     		adds	r2, r2, #1
 4619 0046 E264     		str	r2, [r4, #76]
4371:./freeRTOS/tasks.c **** 
 4620              		.loc 1 4371 6 is_stmt 1 view .LVU1284
4346:./freeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4621              		.loc 1 4346 13 is_stmt 0 view .LVU1285
 4622 0048 0125     		movs	r5, #1
4371:./freeRTOS/tasks.c **** 
 4623              		.loc 1 4371 6 view .LVU1286
 4624 004a F4E7     		b	.L339
 4625              	.L342:
4374:./freeRTOS/tasks.c **** 					break;
 4626              		.loc 1 4374 6 is_stmt 1 view .LVU1287
4374:./freeRTOS/tasks.c **** 					break;
 4627              		.loc 1 4374 29 is_stmt 0 view .LVU1288
 4628 004c E764     		str	r7, [r4, #76]
4375:./freeRTOS/tasks.c **** 
 4629              		.loc 1 4375 6 is_stmt 1 view .LVU1289
4346:./freeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4630              		.loc 1 4346 13 is_stmt 0 view .LVU1290
 4631 004e 0125     		movs	r5, #1
4375:./freeRTOS/tasks.c **** 
 4632              		.loc 1 4375 6 view .LVU1291
ARM GAS  /tmp/cckkLGmm.s 			page 191


 4633 0050 F1E7     		b	.L339
 4634              	.L340:
4378:./freeRTOS/tasks.c **** 					{
 4635              		.loc 1 4378 6 is_stmt 1 view .LVU1292
4378:./freeRTOS/tasks.c **** 					{
 4636              		.loc 1 4378 8 is_stmt 0 view .LVU1293
 4637 0052 022B     		cmp	r3, #2
 4638 0054 04D0     		beq	.L347
4380:./freeRTOS/tasks.c **** 					}
 4639              		.loc 1 4380 7 is_stmt 1 view .LVU1294
4380:./freeRTOS/tasks.c **** 					}
 4640              		.loc 1 4380 30 is_stmt 0 view .LVU1295
 4641 0056 E764     		str	r7, [r4, #76]
4346:./freeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4642              		.loc 1 4346 13 view .LVU1296
 4643 0058 0125     		movs	r5, #1
 4644 005a ECE7     		b	.L339
 4645              	.L346:
4363:./freeRTOS/tasks.c **** 			{
 4646              		.loc 1 4363 4 view .LVU1297
 4647 005c 0125     		movs	r5, #1
 4648 005e EAE7     		b	.L339
 4649              	.L347:
4385:./freeRTOS/tasks.c **** 					}
 4650              		.loc 1 4385 15 view .LVU1298
 4651 0060 0025     		movs	r5, #0
 4652 0062 E8E7     		b	.L339
 4653              	.LVL346:
 4654              	.L349:
4401:./freeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4655              		.loc 1 4401 5 is_stmt 1 view .LVU1299
4401:./freeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4656              		.loc 1 4401 14 is_stmt 0 view .LVU1300
 4657 0064 261D     		adds	r6, r4, #4
 4658              	.LVL347:
4401:./freeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4659              		.loc 1 4401 14 view .LVU1301
 4660 0066 3046     		mov	r0, r6
 4661 0068 FFF7FEFF 		bl	uxListRemove
 4662              	.LVL348:
4402:./freeRTOS/tasks.c **** 
 4663              		.loc 1 4402 5 is_stmt 1 view .LVU1302
4402:./freeRTOS/tasks.c **** 
 4664              		.loc 1 4402 5 view .LVU1303
 4665 006c E06A     		ldr	r0, [r4, #44]
 4666 006e 0123     		movs	r3, #1
 4667 0070 8340     		lsls	r3, r3, r0
 4668 0072 0E4A     		ldr	r2, .L350
 4669 0074 1168     		ldr	r1, [r2]
 4670 0076 0B43     		orrs	r3, r3, r1
 4671 0078 1360     		str	r3, [r2]
4402:./freeRTOS/tasks.c **** 
 4672              		.loc 1 4402 5 view .LVU1304
 4673 007a 00EB8000 		add	r0, r0, r0, lsl #2
 4674 007e 3146     		mov	r1, r6
 4675 0080 0B4B     		ldr	r3, .L350+4
 4676 0082 03EB8000 		add	r0, r3, r0, lsl #2
ARM GAS  /tmp/cckkLGmm.s 			page 192


 4677 0086 FFF7FEFF 		bl	vListInsertEnd
 4678              	.LVL349:
4402:./freeRTOS/tasks.c **** 
 4679              		.loc 1 4402 35 view .LVU1305
4405:./freeRTOS/tasks.c **** 
 4680              		.loc 1 4405 82 view .LVU1306
4423:./freeRTOS/tasks.c **** 				{
 4681              		.loc 1 4423 5 view .LVU1307
4423:./freeRTOS/tasks.c **** 				{
 4682              		.loc 1 4423 14 is_stmt 0 view .LVU1308
 4683 008a E26A     		ldr	r2, [r4, #44]
4423:./freeRTOS/tasks.c **** 				{
 4684              		.loc 1 4423 41 view .LVU1309
 4685 008c 094B     		ldr	r3, .L350+8
 4686 008e 1B68     		ldr	r3, [r3]
 4687 0090 DB6A     		ldr	r3, [r3, #44]
4423:./freeRTOS/tasks.c **** 				{
 4688              		.loc 1 4423 7 view .LVU1310
 4689 0092 9A42     		cmp	r2, r3
 4690 0094 D1D9     		bls	.L345
4427:./freeRTOS/tasks.c **** 				}
 4691              		.loc 1 4427 6 is_stmt 1 view .LVU1311
 4692 0096 4FF0E023 		mov	r3, #-536813568
 4693 009a 4FF08052 		mov	r2, #268435456
 4694 009e C3F8042D 		str	r2, [r3, #3332]
4427:./freeRTOS/tasks.c **** 				}
 4695              		.loc 1 4427 6 view .LVU1312
 4696              		.syntax unified
 4697              	@ 4427 "./freeRTOS/tasks.c" 1
 4698 00a2 BFF34F8F 		dsb
 4699              	@ 0 "" 2
4427:./freeRTOS/tasks.c **** 				}
 4700              		.loc 1 4427 6 view .LVU1313
 4701              	@ 4427 "./freeRTOS/tasks.c" 1
 4702 00a6 BFF36F8F 		isb
 4703              	@ 0 "" 2
4427:./freeRTOS/tasks.c **** 				}
 4704              		.loc 1 4427 37 view .LVU1314
 4705              		.thumb
 4706              		.syntax unified
 4707 00aa C6E7     		b	.L345
 4708              	.L351:
 4709              		.align	2
 4710              	.L350:
 4711 00ac 00000000 		.word	.LANCHOR13
 4712 00b0 00000000 		.word	.LANCHOR4
 4713 00b4 00000000 		.word	.LANCHOR10
 4714              		.cfi_endproc
 4715              	.LFE49:
 4717              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4718              		.align	1
 4719              		.global	xTaskGenericNotifyFromISR
 4720              		.syntax unified
 4721              		.thumb
 4722              		.thumb_func
 4723              		.fpu fpv4-sp-d16
 4725              	xTaskGenericNotifyFromISR:
ARM GAS  /tmp/cckkLGmm.s 			page 193


 4726              	.LVL350:
 4727              	.LFB50:
4450:./freeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4728              		.loc 1 4450 2 view -0
 4729              		.cfi_startproc
 4730              		@ args = 4, pretend = 0, frame = 0
 4731              		@ frame_needed = 0, uses_anonymous_args = 0
4450:./freeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4732              		.loc 1 4450 2 is_stmt 0 view .LVU1316
 4733 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4734              	.LCFI42:
 4735              		.cfi_def_cfa_offset 24
 4736              		.cfi_offset 3, -24
 4737              		.cfi_offset 4, -20
 4738              		.cfi_offset 5, -16
 4739              		.cfi_offset 6, -12
 4740              		.cfi_offset 7, -8
 4741              		.cfi_offset 14, -4
 4742 0002 0446     		mov	r4, r0
4451:./freeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4743              		.loc 1 4451 2 is_stmt 1 view .LVU1317
4452:./freeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4744              		.loc 1 4452 2 view .LVU1318
4453:./freeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4745              		.loc 1 4453 2 view .LVU1319
 4746              	.LVL351:
4454:./freeRTOS/tasks.c **** 
 4747              		.loc 1 4454 2 view .LVU1320
4456:./freeRTOS/tasks.c **** 
 4748              		.loc 1 4456 32 view .LVU1321
4474:./freeRTOS/tasks.c **** 
 4749              		.loc 1 4474 45 view .LVU1322
4476:./freeRTOS/tasks.c **** 
 4750              		.loc 1 4476 3 view .LVU1323
4478:./freeRTOS/tasks.c **** 		{
 4751              		.loc 1 4478 3 view .LVU1324
 4752              	.LBB60:
 4753              	.LBI60:
 249:freeRTOS/GCC/portmacro.h **** {
 4754              		.loc 2 249 34 view .LVU1325
 4755              	.LBB61:
 251:freeRTOS/GCC/portmacro.h **** 
 4756              		.loc 2 251 1 view .LVU1326
 253:freeRTOS/GCC/portmacro.h **** 	(
 4757              		.loc 2 253 2 view .LVU1327
 4758              		.syntax unified
 4759              	@ 253 "freeRTOS/GCC/portmacro.h" 1
 4760 0004 EFF31185 			mrs r5, basepri											
 4761 0008 4FF0BF00 		mov r0, #191												
 4762 000c 80F31188 		msr basepri, r0											
 4763 0010 BFF36F8F 		isb														
 4764 0014 BFF34F8F 		dsb														
 4765              	
 4766              	@ 0 "" 2
 4767              	.LVL352:
 265:freeRTOS/GCC/portmacro.h **** }
 4768              		.loc 2 265 2 view .LVU1328
ARM GAS  /tmp/cckkLGmm.s 			page 194


 265:freeRTOS/GCC/portmacro.h **** }
 4769              		.loc 2 265 2 is_stmt 0 view .LVU1329
 4770              		.thumb
 4771              		.syntax unified
 4772              	.LBE61:
 4773              	.LBE60:
4480:./freeRTOS/tasks.c **** 			{
 4774              		.loc 1 4480 4 is_stmt 1 view .LVU1330
4480:./freeRTOS/tasks.c **** 			{
 4775              		.loc 1 4480 6 is_stmt 0 view .LVU1331
 4776 0018 0BB1     		cbz	r3, .L353
4482:./freeRTOS/tasks.c **** 			}
 4777              		.loc 1 4482 5 is_stmt 1 view .LVU1332
4482:./freeRTOS/tasks.c **** 			}
 4778              		.loc 1 4482 42 is_stmt 0 view .LVU1333
 4779 001a E06C     		ldr	r0, [r4, #76]
4482:./freeRTOS/tasks.c **** 			}
 4780              		.loc 1 4482 35 view .LVU1334
 4781 001c 1860     		str	r0, [r3]
 4782              	.L353:
4485:./freeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4783              		.loc 1 4485 4 is_stmt 1 view .LVU1335
4485:./freeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4784              		.loc 1 4485 26 is_stmt 0 view .LVU1336
 4785 001e 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4786              	.LVL353:
4485:./freeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4787              		.loc 1 4485 26 view .LVU1337
 4788 0022 DBB2     		uxtb	r3, r3
 4789              	.LVL354:
4486:./freeRTOS/tasks.c **** 
 4790              		.loc 1 4486 4 is_stmt 1 view .LVU1338
4486:./freeRTOS/tasks.c **** 
 4791              		.loc 1 4486 25 is_stmt 0 view .LVU1339
 4792 0024 0220     		movs	r0, #2
 4793 0026 84F85000 		strb	r0, [r4, #80]
4488:./freeRTOS/tasks.c **** 			{
 4794              		.loc 1 4488 4 is_stmt 1 view .LVU1340
 4795 002a 013A     		subs	r2, r2, #1
 4796              	.LVL355:
4488:./freeRTOS/tasks.c **** 			{
 4797              		.loc 1 4488 4 is_stmt 0 view .LVU1341
 4798 002c 032A     		cmp	r2, #3
 4799 002e 1AD8     		bhi	.L364
 4800 0030 DFE802F0 		tbb	[pc, r2]
 4801              	.L356:
 4802 0034 02       		.byte	(.L359-.L356)/2
 4803 0035 0C       		.byte	(.L358-.L356)/2
 4804 0036 11       		.byte	(.L357-.L356)/2
 4805 0037 14       		.byte	(.L355-.L356)/2
 4806              		.p2align 1
 4807              	.L359:
4491:./freeRTOS/tasks.c **** 					break;
 4808              		.loc 1 4491 6 is_stmt 1 view .LVU1342
4491:./freeRTOS/tasks.c **** 					break;
 4809              		.loc 1 4491 29 is_stmt 0 view .LVU1343
 4810 0038 E26C     		ldr	r2, [r4, #76]
ARM GAS  /tmp/cckkLGmm.s 			page 195


 4811 003a 1143     		orrs	r1, r1, r2
 4812              	.LVL356:
4491:./freeRTOS/tasks.c **** 					break;
 4813              		.loc 1 4491 29 view .LVU1344
 4814 003c E164     		str	r1, [r4, #76]
4492:./freeRTOS/tasks.c **** 
 4815              		.loc 1 4492 6 is_stmt 1 view .LVU1345
4453:./freeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4816              		.loc 1 4453 13 is_stmt 0 view .LVU1346
 4817 003e 0126     		movs	r6, #1
 4818              	.L354:
 4819              	.LVL357:
4520:./freeRTOS/tasks.c **** 
 4820              		.loc 1 4520 31 is_stmt 1 view .LVU1347
4524:./freeRTOS/tasks.c **** 			{
 4821              		.loc 1 4524 4 view .LVU1348
4524:./freeRTOS/tasks.c **** 			{
 4822              		.loc 1 4524 6 is_stmt 0 view .LVU1349
 4823 0040 012B     		cmp	r3, #1
 4824 0042 14D0     		beq	.L367
 4825              	.LVL358:
 4826              	.L360:
4559:./freeRTOS/tasks.c **** 				}
 4827              		.loc 1 4559 30 is_stmt 1 view .LVU1350
4563:./freeRTOS/tasks.c **** 
 4828              		.loc 1 4563 3 view .LVU1351
 4829              	.LBB62:
 4830              	.LBI62:
 269:freeRTOS/GCC/portmacro.h **** {
 4831              		.loc 2 269 30 view .LVU1352
 4832              	.LBB63:
 4833              		.loc 2 271 2 view .LVU1353
 4834              		.syntax unified
 4835              	@ 271 "freeRTOS/GCC/portmacro.h" 1
 4836 0044 85F31188 			msr basepri, r5	
 4837              	@ 0 "" 2
 4838              	.LVL359:
 4839              		.loc 2 271 2 is_stmt 0 view .LVU1354
 4840              		.thumb
 4841              		.syntax unified
 4842              	.LBE63:
 4843              	.LBE62:
4565:./freeRTOS/tasks.c **** 	}
 4844              		.loc 1 4565 3 is_stmt 1 view .LVU1355
4566:./freeRTOS/tasks.c **** 
 4845              		.loc 1 4566 2 is_stmt 0 view .LVU1356
 4846 0048 3046     		mov	r0, r6
 4847 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4848              	.LVL360:
 4849              	.L358:
4495:./freeRTOS/tasks.c **** 					break;
 4850              		.loc 1 4495 6 is_stmt 1 view .LVU1357
4495:./freeRTOS/tasks.c **** 					break;
 4851              		.loc 1 4495 13 is_stmt 0 view .LVU1358
 4852 004c E26C     		ldr	r2, [r4, #76]
4495:./freeRTOS/tasks.c **** 					break;
 4853              		.loc 1 4495 32 view .LVU1359
ARM GAS  /tmp/cckkLGmm.s 			page 196


 4854 004e 0132     		adds	r2, r2, #1
 4855 0050 E264     		str	r2, [r4, #76]
4496:./freeRTOS/tasks.c **** 
 4856              		.loc 1 4496 6 is_stmt 1 view .LVU1360
4453:./freeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4857              		.loc 1 4453 13 is_stmt 0 view .LVU1361
 4858 0052 0126     		movs	r6, #1
4496:./freeRTOS/tasks.c **** 
 4859              		.loc 1 4496 6 view .LVU1362
 4860 0054 F4E7     		b	.L354
 4861              	.L357:
4499:./freeRTOS/tasks.c **** 					break;
 4862              		.loc 1 4499 6 is_stmt 1 view .LVU1363
4499:./freeRTOS/tasks.c **** 					break;
 4863              		.loc 1 4499 29 is_stmt 0 view .LVU1364
 4864 0056 E164     		str	r1, [r4, #76]
4500:./freeRTOS/tasks.c **** 
 4865              		.loc 1 4500 6 is_stmt 1 view .LVU1365
4453:./freeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4866              		.loc 1 4453 13 is_stmt 0 view .LVU1366
 4867 0058 0126     		movs	r6, #1
4500:./freeRTOS/tasks.c **** 
 4868              		.loc 1 4500 6 view .LVU1367
 4869 005a F1E7     		b	.L354
 4870              	.L355:
4503:./freeRTOS/tasks.c **** 					{
 4871              		.loc 1 4503 6 is_stmt 1 view .LVU1368
4503:./freeRTOS/tasks.c **** 					{
 4872              		.loc 1 4503 8 is_stmt 0 view .LVU1369
 4873 005c 022B     		cmp	r3, #2
 4874 005e 04D0     		beq	.L365
4505:./freeRTOS/tasks.c **** 					}
 4875              		.loc 1 4505 7 is_stmt 1 view .LVU1370
4505:./freeRTOS/tasks.c **** 					}
 4876              		.loc 1 4505 30 is_stmt 0 view .LVU1371
 4877 0060 E164     		str	r1, [r4, #76]
4453:./freeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4878              		.loc 1 4453 13 view .LVU1372
 4879 0062 0126     		movs	r6, #1
 4880 0064 ECE7     		b	.L354
 4881              	.L364:
4488:./freeRTOS/tasks.c **** 			{
 4882              		.loc 1 4488 4 view .LVU1373
 4883 0066 0126     		movs	r6, #1
 4884 0068 EAE7     		b	.L354
 4885              	.L365:
4510:./freeRTOS/tasks.c **** 					}
 4886              		.loc 1 4510 15 view .LVU1374
 4887 006a 0026     		movs	r6, #0
 4888 006c E8E7     		b	.L354
 4889              	.LVL361:
 4890              	.L367:
4527:./freeRTOS/tasks.c **** 
 4891              		.loc 1 4527 82 is_stmt 1 view .LVU1375
4529:./freeRTOS/tasks.c **** 				{
 4892              		.loc 1 4529 5 view .LVU1376
4529:./freeRTOS/tasks.c **** 				{
ARM GAS  /tmp/cckkLGmm.s 			page 197


 4893              		.loc 1 4529 30 is_stmt 0 view .LVU1377
 4894 006e 164B     		ldr	r3, .L368
 4895              	.LVL362:
4529:./freeRTOS/tasks.c **** 				{
 4896              		.loc 1 4529 30 view .LVU1378
 4897 0070 1B68     		ldr	r3, [r3]
4529:./freeRTOS/tasks.c **** 				{
 4898              		.loc 1 4529 7 view .LVU1379
 4899 0072 F3B9     		cbnz	r3, .L361
4531:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4900              		.loc 1 4531 6 is_stmt 1 view .LVU1380
4531:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4901              		.loc 1 4531 15 is_stmt 0 view .LVU1381
 4902 0074 271D     		adds	r7, r4, #4
 4903 0076 3846     		mov	r0, r7
 4904 0078 FFF7FEFF 		bl	uxListRemove
 4905              	.LVL363:
4532:./freeRTOS/tasks.c **** 				}
 4906              		.loc 1 4532 6 is_stmt 1 view .LVU1382
4532:./freeRTOS/tasks.c **** 				}
 4907              		.loc 1 4532 6 view .LVU1383
 4908 007c E06A     		ldr	r0, [r4, #44]
 4909 007e 0123     		movs	r3, #1
 4910 0080 8340     		lsls	r3, r3, r0
 4911 0082 124A     		ldr	r2, .L368+4
 4912 0084 1168     		ldr	r1, [r2]
 4913 0086 0B43     		orrs	r3, r3, r1
 4914 0088 1360     		str	r3, [r2]
4532:./freeRTOS/tasks.c **** 				}
 4915              		.loc 1 4532 6 view .LVU1384
 4916 008a 00EB8000 		add	r0, r0, r0, lsl #2
 4917 008e 3946     		mov	r1, r7
 4918 0090 0F4B     		ldr	r3, .L368+8
 4919 0092 03EB8000 		add	r0, r3, r0, lsl #2
 4920 0096 FFF7FEFF 		bl	vListInsertEnd
 4921              	.LVL364:
4532:./freeRTOS/tasks.c **** 				}
 4922              		.loc 1 4532 36 view .LVU1385
 4923              	.L362:
4541:./freeRTOS/tasks.c **** 				{
 4924              		.loc 1 4541 5 view .LVU1386
4541:./freeRTOS/tasks.c **** 				{
 4925              		.loc 1 4541 14 is_stmt 0 view .LVU1387
 4926 009a E26A     		ldr	r2, [r4, #44]
4541:./freeRTOS/tasks.c **** 				{
 4927              		.loc 1 4541 41 view .LVU1388
 4928 009c 0D4B     		ldr	r3, .L368+12
 4929 009e 1B68     		ldr	r3, [r3]
 4930 00a0 DB6A     		ldr	r3, [r3, #44]
4541:./freeRTOS/tasks.c **** 				{
 4931              		.loc 1 4541 7 view .LVU1389
 4932 00a2 9A42     		cmp	r2, r3
 4933 00a4 CED9     		bls	.L360
4545:./freeRTOS/tasks.c **** 					{
 4934              		.loc 1 4545 6 is_stmt 1 view .LVU1390
4545:./freeRTOS/tasks.c **** 					{
 4935              		.loc 1 4545 8 is_stmt 0 view .LVU1391
ARM GAS  /tmp/cckkLGmm.s 			page 198


 4936 00a6 069B     		ldr	r3, [sp, #24]
 4937 00a8 4BB1     		cbz	r3, .L363
4547:./freeRTOS/tasks.c **** 					}
 4938              		.loc 1 4547 7 is_stmt 1 view .LVU1392
4547:./freeRTOS/tasks.c **** 					}
 4939              		.loc 1 4547 34 is_stmt 0 view .LVU1393
 4940 00aa 0123     		movs	r3, #1
 4941 00ac 069A     		ldr	r2, [sp, #24]
 4942 00ae 1360     		str	r3, [r2]
 4943 00b0 C8E7     		b	.L360
 4944              	.L361:
4538:./freeRTOS/tasks.c **** 				}
 4945              		.loc 1 4538 6 is_stmt 1 view .LVU1394
 4946 00b2 04F11801 		add	r1, r4, #24
 4947 00b6 0848     		ldr	r0, .L368+16
 4948 00b8 FFF7FEFF 		bl	vListInsertEnd
 4949              	.LVL365:
 4950 00bc EDE7     		b	.L362
 4951              	.L363:
4554:./freeRTOS/tasks.c **** 					}
 4952              		.loc 1 4554 7 view .LVU1395
4554:./freeRTOS/tasks.c **** 					}
 4953              		.loc 1 4554 21 is_stmt 0 view .LVU1396
 4954 00be 074B     		ldr	r3, .L368+20
 4955 00c0 0122     		movs	r2, #1
 4956 00c2 1A60     		str	r2, [r3]
 4957 00c4 BEE7     		b	.L360
 4958              	.L369:
 4959 00c6 00BF     		.align	2
 4960              	.L368:
 4961 00c8 00000000 		.word	.LANCHOR16
 4962 00cc 00000000 		.word	.LANCHOR13
 4963 00d0 00000000 		.word	.LANCHOR4
 4964 00d4 00000000 		.word	.LANCHOR10
 4965 00d8 00000000 		.word	.LANCHOR1
 4966 00dc 00000000 		.word	.LANCHOR20
 4967              		.cfi_endproc
 4968              	.LFE50:
 4970              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4971              		.align	1
 4972              		.global	vTaskNotifyGiveFromISR
 4973              		.syntax unified
 4974              		.thumb
 4975              		.thumb_func
 4976              		.fpu fpv4-sp-d16
 4978              	vTaskNotifyGiveFromISR:
 4979              	.LVL366:
 4980              	.LFB51:
4574:./freeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4981              		.loc 1 4574 2 is_stmt 1 view -0
 4982              		.cfi_startproc
 4983              		@ args = 0, pretend = 0, frame = 0
 4984              		@ frame_needed = 0, uses_anonymous_args = 0
4574:./freeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4985              		.loc 1 4574 2 is_stmt 0 view .LVU1398
 4986 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4987              	.LCFI43:
ARM GAS  /tmp/cckkLGmm.s 			page 199


 4988              		.cfi_def_cfa_offset 24
 4989              		.cfi_offset 3, -24
 4990              		.cfi_offset 4, -20
 4991              		.cfi_offset 5, -16
 4992              		.cfi_offset 6, -12
 4993              		.cfi_offset 7, -8
 4994              		.cfi_offset 14, -4
4575:./freeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4995              		.loc 1 4575 2 is_stmt 1 view .LVU1399
4576:./freeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4996              		.loc 1 4576 2 view .LVU1400
4577:./freeRTOS/tasks.c **** 
 4997              		.loc 1 4577 2 view .LVU1401
4579:./freeRTOS/tasks.c **** 
 4998              		.loc 1 4579 32 view .LVU1402
4597:./freeRTOS/tasks.c **** 
 4999              		.loc 1 4597 45 view .LVU1403
4599:./freeRTOS/tasks.c **** 
 5000              		.loc 1 4599 3 view .LVU1404
 5001              	.LVL367:
4601:./freeRTOS/tasks.c **** 		{
 5002              		.loc 1 4601 3 view .LVU1405
 5003              	.LBB64:
 5004              	.LBI64:
 249:freeRTOS/GCC/portmacro.h **** {
 5005              		.loc 2 249 34 view .LVU1406
 5006              	.LBB65:
 251:freeRTOS/GCC/portmacro.h **** 
 5007              		.loc 2 251 1 view .LVU1407
 253:freeRTOS/GCC/portmacro.h **** 	(
 5008              		.loc 2 253 2 view .LVU1408
 5009              		.syntax unified
 5010              	@ 253 "freeRTOS/GCC/portmacro.h" 1
 5011 0002 EFF31185 			mrs r5, basepri											
 5012 0006 4FF0BF03 		mov r3, #191												
 5013 000a 83F31188 		msr basepri, r3											
 5014 000e BFF36F8F 		isb														
 5015 0012 BFF34F8F 		dsb														
 5016              	
 5017              	@ 0 "" 2
 5018              	.LVL368:
 265:freeRTOS/GCC/portmacro.h **** }
 5019              		.loc 2 265 2 view .LVU1409
 265:freeRTOS/GCC/portmacro.h **** }
 5020              		.loc 2 265 2 is_stmt 0 view .LVU1410
 5021              		.thumb
 5022              		.syntax unified
 5023              	.LBE65:
 5024              	.LBE64:
4603:./freeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5025              		.loc 1 4603 4 is_stmt 1 view .LVU1411
4603:./freeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5026              		.loc 1 4603 26 is_stmt 0 view .LVU1412
 5027 0016 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 5028 001a DBB2     		uxtb	r3, r3
 5029              	.LVL369:
4604:./freeRTOS/tasks.c **** 
ARM GAS  /tmp/cckkLGmm.s 			page 200


 5030              		.loc 1 4604 4 is_stmt 1 view .LVU1413
4604:./freeRTOS/tasks.c **** 
 5031              		.loc 1 4604 25 is_stmt 0 view .LVU1414
 5032 001c 0222     		movs	r2, #2
 5033 001e 80F85020 		strb	r2, [r0, #80]
4608:./freeRTOS/tasks.c **** 
 5034              		.loc 1 4608 4 is_stmt 1 view .LVU1415
4608:./freeRTOS/tasks.c **** 
 5035              		.loc 1 4608 11 is_stmt 0 view .LVU1416
 5036 0022 C26C     		ldr	r2, [r0, #76]
4608:./freeRTOS/tasks.c **** 
 5037              		.loc 1 4608 30 view .LVU1417
 5038 0024 0132     		adds	r2, r2, #1
 5039 0026 C264     		str	r2, [r0, #76]
4610:./freeRTOS/tasks.c **** 
 5040              		.loc 1 4610 36 is_stmt 1 view .LVU1418
4614:./freeRTOS/tasks.c **** 			{
 5041              		.loc 1 4614 4 view .LVU1419
4614:./freeRTOS/tasks.c **** 			{
 5042              		.loc 1 4614 6 is_stmt 0 view .LVU1420
 5043 0028 012B     		cmp	r3, #1
 5044 002a 02D0     		beq	.L376
 5045              	.LVL370:
 5046              	.L371:
4649:./freeRTOS/tasks.c **** 				}
 5047              		.loc 1 4649 30 is_stmt 1 view .LVU1421
4653:./freeRTOS/tasks.c **** 	}
 5048              		.loc 1 4653 3 view .LVU1422
 5049              	.LBB66:
 5050              	.LBI66:
 269:freeRTOS/GCC/portmacro.h **** {
 5051              		.loc 2 269 30 view .LVU1423
 5052              	.LBB67:
 5053              		.loc 2 271 2 view .LVU1424
 5054              		.syntax unified
 5055              	@ 271 "freeRTOS/GCC/portmacro.h" 1
 5056 002c 85F31188 			msr basepri, r5	
 5057              	@ 0 "" 2
 5058              	.LVL371:
 5059              		.loc 2 271 2 is_stmt 0 view .LVU1425
 5060              		.thumb
 5061              		.syntax unified
 5062              	.LBE67:
 5063              	.LBE66:
4654:./freeRTOS/tasks.c **** 
 5064              		.loc 1 4654 2 view .LVU1426
 5065 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5066              	.LVL372:
 5067              	.L376:
4654:./freeRTOS/tasks.c **** 
 5068              		.loc 1 4654 2 view .LVU1427
 5069 0032 0446     		mov	r4, r0
 5070 0034 0E46     		mov	r6, r1
4617:./freeRTOS/tasks.c **** 
 5071              		.loc 1 4617 82 is_stmt 1 view .LVU1428
4619:./freeRTOS/tasks.c **** 				{
 5072              		.loc 1 4619 5 view .LVU1429
ARM GAS  /tmp/cckkLGmm.s 			page 201


4619:./freeRTOS/tasks.c **** 				{
 5073              		.loc 1 4619 30 is_stmt 0 view .LVU1430
 5074 0036 154B     		ldr	r3, .L377
 5075              	.LVL373:
4619:./freeRTOS/tasks.c **** 				{
 5076              		.loc 1 4619 30 view .LVU1431
 5077 0038 1B68     		ldr	r3, [r3]
4619:./freeRTOS/tasks.c **** 				{
 5078              		.loc 1 4619 7 view .LVU1432
 5079 003a E3B9     		cbnz	r3, .L372
4621:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5080              		.loc 1 4621 6 is_stmt 1 view .LVU1433
4621:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5081              		.loc 1 4621 15 is_stmt 0 view .LVU1434
 5082 003c 071D     		adds	r7, r0, #4
 5083 003e 3846     		mov	r0, r7
 5084              	.LVL374:
4621:./freeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5085              		.loc 1 4621 15 view .LVU1435
 5086 0040 FFF7FEFF 		bl	uxListRemove
 5087              	.LVL375:
4622:./freeRTOS/tasks.c **** 				}
 5088              		.loc 1 4622 6 is_stmt 1 view .LVU1436
4622:./freeRTOS/tasks.c **** 				}
 5089              		.loc 1 4622 6 view .LVU1437
 5090 0044 E06A     		ldr	r0, [r4, #44]
 5091 0046 0123     		movs	r3, #1
 5092 0048 8340     		lsls	r3, r3, r0
 5093 004a 114A     		ldr	r2, .L377+4
 5094 004c 1168     		ldr	r1, [r2]
 5095 004e 0B43     		orrs	r3, r3, r1
 5096 0050 1360     		str	r3, [r2]
4622:./freeRTOS/tasks.c **** 				}
 5097              		.loc 1 4622 6 view .LVU1438
 5098 0052 00EB8000 		add	r0, r0, r0, lsl #2
 5099 0056 3946     		mov	r1, r7
 5100 0058 0E4B     		ldr	r3, .L377+8
 5101 005a 03EB8000 		add	r0, r3, r0, lsl #2
 5102 005e FFF7FEFF 		bl	vListInsertEnd
 5103              	.LVL376:
4622:./freeRTOS/tasks.c **** 				}
 5104              		.loc 1 4622 36 view .LVU1439
 5105              	.L373:
4631:./freeRTOS/tasks.c **** 				{
 5106              		.loc 1 4631 5 view .LVU1440
4631:./freeRTOS/tasks.c **** 				{
 5107              		.loc 1 4631 14 is_stmt 0 view .LVU1441
 5108 0062 E26A     		ldr	r2, [r4, #44]
4631:./freeRTOS/tasks.c **** 				{
 5109              		.loc 1 4631 41 view .LVU1442
 5110 0064 0C4B     		ldr	r3, .L377+12
 5111 0066 1B68     		ldr	r3, [r3]
 5112 0068 DB6A     		ldr	r3, [r3, #44]
4631:./freeRTOS/tasks.c **** 				{
 5113              		.loc 1 4631 7 view .LVU1443
 5114 006a 9A42     		cmp	r2, r3
 5115 006c DED9     		bls	.L371
ARM GAS  /tmp/cckkLGmm.s 			page 202


4635:./freeRTOS/tasks.c **** 					{
 5116              		.loc 1 4635 6 is_stmt 1 view .LVU1444
4635:./freeRTOS/tasks.c **** 					{
 5117              		.loc 1 4635 8 is_stmt 0 view .LVU1445
 5118 006e 46B1     		cbz	r6, .L374
4637:./freeRTOS/tasks.c **** 					}
 5119              		.loc 1 4637 7 is_stmt 1 view .LVU1446
4637:./freeRTOS/tasks.c **** 					}
 5120              		.loc 1 4637 34 is_stmt 0 view .LVU1447
 5121 0070 0123     		movs	r3, #1
 5122 0072 3360     		str	r3, [r6]
 5123 0074 DAE7     		b	.L371
 5124              	.LVL377:
 5125              	.L372:
4628:./freeRTOS/tasks.c **** 				}
 5126              		.loc 1 4628 6 is_stmt 1 view .LVU1448
 5127 0076 00F11801 		add	r1, r0, #24
 5128              	.LVL378:
4628:./freeRTOS/tasks.c **** 				}
 5129              		.loc 1 4628 6 is_stmt 0 view .LVU1449
 5130 007a 0848     		ldr	r0, .L377+16
 5131              	.LVL379:
4628:./freeRTOS/tasks.c **** 				}
 5132              		.loc 1 4628 6 view .LVU1450
 5133 007c FFF7FEFF 		bl	vListInsertEnd
 5134              	.LVL380:
 5135 0080 EFE7     		b	.L373
 5136              	.L374:
4644:./freeRTOS/tasks.c **** 					}
 5137              		.loc 1 4644 7 is_stmt 1 view .LVU1451
4644:./freeRTOS/tasks.c **** 					}
 5138              		.loc 1 4644 21 is_stmt 0 view .LVU1452
 5139 0082 074B     		ldr	r3, .L377+20
 5140 0084 0122     		movs	r2, #1
 5141 0086 1A60     		str	r2, [r3]
 5142 0088 D0E7     		b	.L371
 5143              	.L378:
 5144 008a 00BF     		.align	2
 5145              	.L377:
 5146 008c 00000000 		.word	.LANCHOR16
 5147 0090 00000000 		.word	.LANCHOR13
 5148 0094 00000000 		.word	.LANCHOR4
 5149 0098 00000000 		.word	.LANCHOR10
 5150 009c 00000000 		.word	.LANCHOR1
 5151 00a0 00000000 		.word	.LANCHOR20
 5152              		.cfi_endproc
 5153              	.LFE51:
 5155              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5156              		.align	1
 5157              		.global	xTaskNotifyStateClear
 5158              		.syntax unified
 5159              		.thumb
 5160              		.thumb_func
 5161              		.fpu fpv4-sp-d16
 5163              	xTaskNotifyStateClear:
 5164              	.LVL381:
 5165              	.LFB52:
ARM GAS  /tmp/cckkLGmm.s 			page 203


4663:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
 5166              		.loc 1 4663 2 is_stmt 1 view -0
 5167              		.cfi_startproc
 5168              		@ args = 0, pretend = 0, frame = 0
 5169              		@ frame_needed = 0, uses_anonymous_args = 0
4663:./freeRTOS/tasks.c **** 	TCB_t *pxTCB;
 5170              		.loc 1 4663 2 is_stmt 0 view .LVU1454
 5171 0000 10B5     		push	{r4, lr}
 5172              	.LCFI44:
 5173              		.cfi_def_cfa_offset 8
 5174              		.cfi_offset 4, -8
 5175              		.cfi_offset 14, -4
4664:./freeRTOS/tasks.c **** 	BaseType_t xReturn;
 5176              		.loc 1 4664 2 is_stmt 1 view .LVU1455
4665:./freeRTOS/tasks.c **** 
 5177              		.loc 1 4665 2 view .LVU1456
4669:./freeRTOS/tasks.c **** 
 5178              		.loc 1 4669 3 view .LVU1457
4669:./freeRTOS/tasks.c **** 
 5179              		.loc 1 4669 11 is_stmt 0 view .LVU1458
 5180 0002 0446     		mov	r4, r0
 5181 0004 58B1     		cbz	r0, .L384
 5182              	.LVL382:
 5183              	.L380:
4671:./freeRTOS/tasks.c **** 		{
 5184              		.loc 1 4671 3 is_stmt 1 discriminator 4 view .LVU1459
 5185 0006 FFF7FEFF 		bl	vPortEnterCritical
 5186              	.LVL383:
4673:./freeRTOS/tasks.c **** 			{
 5187              		.loc 1 4673 4 discriminator 4 view .LVU1460
4673:./freeRTOS/tasks.c **** 			{
 5188              		.loc 1 4673 13 is_stmt 0 discriminator 4 view .LVU1461
 5189 000a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 5190 000e DBB2     		uxtb	r3, r3
4673:./freeRTOS/tasks.c **** 			{
 5191              		.loc 1 4673 6 discriminator 4 view .LVU1462
 5192 0010 022B     		cmp	r3, #2
 5193 0012 07D0     		beq	.L385
4680:./freeRTOS/tasks.c **** 			}
 5194              		.loc 1 4680 13 view .LVU1463
 5195 0014 0024     		movs	r4, #0
 5196              	.LVL384:
 5197              	.L381:
4683:./freeRTOS/tasks.c **** 
 5198              		.loc 1 4683 3 is_stmt 1 view .LVU1464
 5199 0016 FFF7FEFF 		bl	vPortExitCritical
 5200              	.LVL385:
4685:./freeRTOS/tasks.c **** 	}
 5201              		.loc 1 4685 3 view .LVU1465
4686:./freeRTOS/tasks.c **** 
 5202              		.loc 1 4686 2 is_stmt 0 view .LVU1466
 5203 001a 2046     		mov	r0, r4
 5204 001c 10BD     		pop	{r4, pc}
 5205              	.LVL386:
 5206              	.L384:
4669:./freeRTOS/tasks.c **** 
 5207              		.loc 1 4669 11 discriminator 1 view .LVU1467
ARM GAS  /tmp/cckkLGmm.s 			page 204


 5208 001e 044B     		ldr	r3, .L386
 5209 0020 1C68     		ldr	r4, [r3]
 5210              	.LVL387:
4669:./freeRTOS/tasks.c **** 
 5211              		.loc 1 4669 11 discriminator 1 view .LVU1468
 5212 0022 F0E7     		b	.L380
 5213              	.LVL388:
 5214              	.L385:
4675:./freeRTOS/tasks.c **** 				xReturn = pdPASS;
 5215              		.loc 1 4675 5 is_stmt 1 view .LVU1469
4675:./freeRTOS/tasks.c **** 				xReturn = pdPASS;
 5216              		.loc 1 4675 26 is_stmt 0 view .LVU1470
 5217 0024 0023     		movs	r3, #0
 5218 0026 84F85030 		strb	r3, [r4, #80]
4676:./freeRTOS/tasks.c **** 			}
 5219              		.loc 1 4676 5 is_stmt 1 view .LVU1471
 5220              	.LVL389:
4676:./freeRTOS/tasks.c **** 			}
 5221              		.loc 1 4676 13 is_stmt 0 view .LVU1472
 5222 002a 0124     		movs	r4, #1
 5223              	.LVL390:
4676:./freeRTOS/tasks.c **** 			}
 5224              		.loc 1 4676 13 view .LVU1473
 5225 002c F3E7     		b	.L381
 5226              	.L387:
 5227 002e 00BF     		.align	2
 5228              	.L386:
 5229 0030 00000000 		.word	.LANCHOR10
 5230              		.cfi_endproc
 5231              	.LFE52:
 5233              		.global	pxCurrentTCB
 5234              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5235              		.align	2
 5236              		.set	.LANCHOR10,. + 0
 5239              	pxCurrentTCB:
 5240 0000 00000000 		.space	4
 5241              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5242              		.align	2
 5243              		.set	.LANCHOR2,. + 0
 5246              	pxDelayedTaskList:
 5247 0000 00000000 		.space	4
 5248              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5249              		.align	2
 5250              		.set	.LANCHOR8,. + 0
 5253              	pxOverflowDelayedTaskList:
 5254 0000 00000000 		.space	4
 5255              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5256              		.align	2
 5257              		.set	.LANCHOR4,. + 0
 5260              	pxReadyTasksLists:
 5261 0000 00000000 		.space	200
 5261      00000000 
 5261      00000000 
 5261      00000000 
 5261      00000000 
 5262              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5263              		.align	2
ARM GAS  /tmp/cckkLGmm.s 			page 205


 5264              		.set	.LANCHOR9,. + 0
 5267              	uxCurrentNumberOfTasks:
 5268 0000 00000000 		.space	4
 5269              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5270              		.align	2
 5271              		.set	.LANCHOR15,. + 0
 5274              	uxDeletedTasksWaitingCleanUp:
 5275 0000 00000000 		.space	4
 5276              		.section	.bss.uxPendedTicks,"aw",%nobits
 5277              		.align	2
 5278              		.set	.LANCHOR19,. + 0
 5281              	uxPendedTicks:
 5282 0000 00000000 		.space	4
 5283              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5284              		.align	2
 5285              		.set	.LANCHOR16,. + 0
 5288              	uxSchedulerSuspended:
 5289 0000 00000000 		.space	4
 5290              		.section	.bss.uxTaskNumber,"aw",%nobits
 5291              		.align	2
 5292              		.set	.LANCHOR12,. + 0
 5295              	uxTaskNumber:
 5296 0000 00000000 		.space	4
 5297              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5298              		.align	2
 5299              		.set	.LANCHOR13,. + 0
 5302              	uxTopReadyPriority:
 5303 0000 00000000 		.space	4
 5304              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5305              		.align	2
 5306              		.set	.LANCHOR5,. + 0
 5309              	xDelayedTaskList1:
 5310 0000 00000000 		.space	20
 5310      00000000 
 5310      00000000 
 5310      00000000 
 5310      00000000 
 5311              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5312              		.align	2
 5313              		.set	.LANCHOR6,. + 0
 5316              	xDelayedTaskList2:
 5317 0000 00000000 		.space	20
 5317      00000000 
 5317      00000000 
 5317      00000000 
 5317      00000000 
 5318              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 5319              		.align	2
 5320              		.set	.LANCHOR17,. + 0
 5323              	xIdleTaskHandle:
 5324 0000 00000000 		.space	4
 5325              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5326              		.align	2
 5327              		.set	.LANCHOR3,. + 0
 5330              	xNextTaskUnblockTime:
 5331 0000 00000000 		.space	4
 5332              		.section	.bss.xNumOfOverflows,"aw",%nobits
ARM GAS  /tmp/cckkLGmm.s 			page 206


 5333              		.align	2
 5334              		.set	.LANCHOR18,. + 0
 5337              	xNumOfOverflows:
 5338 0000 00000000 		.space	4
 5339              		.section	.bss.xPendingReadyList,"aw",%nobits
 5340              		.align	2
 5341              		.set	.LANCHOR1,. + 0
 5344              	xPendingReadyList:
 5345 0000 00000000 		.space	20
 5345      00000000 
 5345      00000000 
 5345      00000000 
 5345      00000000 
 5346              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5347              		.align	2
 5348              		.set	.LANCHOR11,. + 0
 5351              	xSchedulerRunning:
 5352 0000 00000000 		.space	4
 5353              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5354              		.align	2
 5355              		.set	.LANCHOR0,. + 0
 5358              	xSuspendedTaskList:
 5359 0000 00000000 		.space	20
 5359      00000000 
 5359      00000000 
 5359      00000000 
 5359      00000000 
 5360              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5361              		.align	2
 5362              		.set	.LANCHOR7,. + 0
 5365              	xTasksWaitingTermination:
 5366 0000 00000000 		.space	20
 5366      00000000 
 5366      00000000 
 5366      00000000 
 5366      00000000 
 5367              		.section	.bss.xTickCount,"aw",%nobits
 5368              		.align	2
 5369              		.set	.LANCHOR14,. + 0
 5372              	xTickCount:
 5373 0000 00000000 		.space	4
 5374              		.section	.bss.xYieldPending,"aw",%nobits
 5375              		.align	2
 5376              		.set	.LANCHOR20,. + 0
 5379              	xYieldPending:
 5380 0000 00000000 		.space	4
 5381              		.text
 5382              	.Letext0:
 5383              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 5384              		.file 4 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 5385              		.file 5 "freeRTOS/include/projdefs.h"
 5386              		.file 6 "freeRTOS/include/list.h"
 5387              		.file 7 "freeRTOS/include/task.h"
 5388              		.file 8 "freeRTOS/include/portable.h"
 5389              		.file 9 "/usr/include/newlib/string.h"
ARM GAS  /tmp/cckkLGmm.s 			page 207


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/cckkLGmm.s:18     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/cckkLGmm.s:25     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/cckkLGmm.s:85     .text.prvTaskIsTaskSuspended:0000000000000024 $d
     /tmp/cckkLGmm.s:91     .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/cckkLGmm.s:97     .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/cckkLGmm.s:140    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/cckkLGmm.s:146    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/cckkLGmm.s:189    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/cckkLGmm.s:195    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/cckkLGmm.s:201    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/cckkLGmm.s:233    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/cckkLGmm.s:239    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/cckkLGmm.s:396    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/cckkLGmm.s:402    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/cckkLGmm.s:477    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/cckkLGmm.s:489    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/cckkLGmm.s:495    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/cckkLGmm.s:631    .text.prvAddNewTaskToReadyList:0000000000000090 $d
     /tmp/cckkLGmm.s:641    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/cckkLGmm.s:647    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/cckkLGmm.s:767    .text.prvAddCurrentTaskToDelayedList:000000000000007c $d
     /tmp/cckkLGmm.s:778    .text.xTaskCreate:0000000000000000 $t
     /tmp/cckkLGmm.s:785    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/cckkLGmm.s:907    .text.vTaskDelete:0000000000000000 $t
     /tmp/cckkLGmm.s:914    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/cckkLGmm.s:1067   .text.vTaskDelete:00000000000000a4 $d
     /tmp/cckkLGmm.s:1079   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/cckkLGmm.s:1086   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/cckkLGmm.s:1132   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/cckkLGmm.s:1137   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/cckkLGmm.s:1144   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/cckkLGmm.s:1218   .text.uxTaskPriorityGetFromISR:0000000000000024 $d
     /tmp/cckkLGmm.s:1223   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/cckkLGmm.s:1230   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/cckkLGmm.s:1451   .text.vTaskPrioritySet:00000000000000c8 $d
     /tmp/cckkLGmm.s:1458   .text.vTaskResume:0000000000000000 $t
     /tmp/cckkLGmm.s:1465   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/cckkLGmm.s:1577   .text.vTaskResume:000000000000006c $d
     /tmp/cckkLGmm.s:1584   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/cckkLGmm.s:1591   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/cckkLGmm.s:1729   .text.xTaskResumeFromISR:0000000000000074 $d
     /tmp/cckkLGmm.s:1738   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
     /tmp/cckkLGmm.s:1742   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/cckkLGmm.s:1749   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/cckkLGmm.s:1837   .text.vTaskStartScheduler:000000000000004c $d
     /tmp/cckkLGmm.s:2897   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/cckkLGmm.s:1847   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/cckkLGmm.s:1854   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/cckkLGmm.s:1897   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/cckkLGmm.s:1902   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/cckkLGmm.s:1909   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/cckkLGmm.s:1926   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/cckkLGmm.s:1931   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/cckkLGmm.s:1938   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/cckkLGmm.s:1959   .text.xTaskGetTickCount:0000000000000008 $d
ARM GAS  /tmp/cckkLGmm.s 			page 208


     /tmp/cckkLGmm.s:1964   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/cckkLGmm.s:1971   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/cckkLGmm.s:1995   .text.xTaskGetTickCountFromISR:0000000000000008 $d
     /tmp/cckkLGmm.s:2000   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/cckkLGmm.s:2007   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/cckkLGmm.s:2023   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/cckkLGmm.s:2028   .text.pcTaskGetName:0000000000000000 $t
     /tmp/cckkLGmm.s:2035   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/cckkLGmm.s:2066   .text.pcTaskGetName:0000000000000010 $d
     /tmp/cckkLGmm.s:2071   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/cckkLGmm.s:2078   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/cckkLGmm.s:2312   .text.xTaskIncrementTick:00000000000000d4 $d
     /tmp/cckkLGmm.s:2327   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/cckkLGmm.s:2334   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/cckkLGmm.s:2539   .text.xTaskResumeAll:00000000000000c0 $d
     /tmp/cckkLGmm.s:2551   .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/cckkLGmm.s:2558   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/cckkLGmm.s:2692   .text.vTaskDelayUntil:000000000000005c $d
     /tmp/cckkLGmm.s:2698   .text.vTaskDelay:0000000000000000 $t
     /tmp/cckkLGmm.s:2705   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/cckkLGmm.s:2774   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/cckkLGmm.s:2780   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/cckkLGmm.s:2883   .text.prvCheckTasksWaitingTermination:0000000000000050 $d
     /tmp/cckkLGmm.s:2891   .text.prvIdleTask:0000000000000000 $t
     /tmp/cckkLGmm.s:2945   .text.prvIdleTask:0000000000000024 $d
     /tmp/cckkLGmm.s:2950   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/cckkLGmm.s:2957   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/cckkLGmm.s:3065   .text.vTaskSwitchContext:0000000000000064 $d
     /tmp/cckkLGmm.s:3076   .text.vTaskSuspend:0000000000000000 $t
     /tmp/cckkLGmm.s:3083   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/cckkLGmm.s:3242   .text.vTaskSuspend:00000000000000a4 $d
     /tmp/cckkLGmm.s:3252   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/cckkLGmm.s:3259   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/cckkLGmm.s:3295   .text.vTaskPlaceOnEventList:0000000000000018 $d
     /tmp/cckkLGmm.s:3300   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/cckkLGmm.s:3307   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/cckkLGmm.s:3351   .text.vTaskPlaceOnUnorderedEventList:0000000000000020 $d
     /tmp/cckkLGmm.s:3356   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/cckkLGmm.s:3363   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/cckkLGmm.s:3464   .text.xTaskRemoveFromEventList:0000000000000060 $d
     /tmp/cckkLGmm.s:3474   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/cckkLGmm.s:3481   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/cckkLGmm.s:3568   .text.xTaskRemoveFromUnorderedEventList:000000000000004c $d
     /tmp/cckkLGmm.s:3576   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/cckkLGmm.s:3583   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/cckkLGmm.s:3607   .text.vTaskSetTimeOutState:0000000000000010 $d
     /tmp/cckkLGmm.s:3613   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/cckkLGmm.s:3620   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/cckkLGmm.s:3728   .text.xTaskCheckForTimeOut:0000000000000050 $d
     /tmp/cckkLGmm.s:3735   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/cckkLGmm.s:3742   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/cckkLGmm.s:3759   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/cckkLGmm.s:3764   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/cckkLGmm.s:3771   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/cckkLGmm.s:3813   .text.uxTaskGetStackHighWaterMark:0000000000000014 $d
     /tmp/cckkLGmm.s:3818   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/cckkLGmm.s:3825   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
ARM GAS  /tmp/cckkLGmm.s 			page 209


     /tmp/cckkLGmm.s:3844   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/cckkLGmm.s:3849   .text.vTaskPriorityInherit:0000000000000000 $t
     /tmp/cckkLGmm.s:3856   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
     /tmp/cckkLGmm.s:3990   .text.vTaskPriorityInherit:0000000000000094 $d
     /tmp/cckkLGmm.s:3997   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/cckkLGmm.s:4004   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/cckkLGmm.s:4140   .text.xTaskPriorityDisinherit:0000000000000078 $d
     /tmp/cckkLGmm.s:4146   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/cckkLGmm.s:4153   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/cckkLGmm.s:4180   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/cckkLGmm.s:4185   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/cckkLGmm.s:4192   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/cckkLGmm.s:4223   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/cckkLGmm.s:4228   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/cckkLGmm.s:4235   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/cckkLGmm.s:4357   .text.ulTaskNotifyTake:0000000000000074 $d
     /tmp/cckkLGmm.s:4362   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/cckkLGmm.s:4369   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/cckkLGmm.s:4513   .text.xTaskNotifyWait:0000000000000094 $d
     /tmp/cckkLGmm.s:4518   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/cckkLGmm.s:4525   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/cckkLGmm.s:4579   .text.xTaskGenericNotify:000000000000002a $d
     /tmp/cckkLGmm.s:4583   .text.xTaskGenericNotify:000000000000002e $t
     /tmp/cckkLGmm.s:4711   .text.xTaskGenericNotify:00000000000000ac $d
     /tmp/cckkLGmm.s:4718   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/cckkLGmm.s:4725   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/cckkLGmm.s:4802   .text.xTaskGenericNotifyFromISR:0000000000000034 $d
     /tmp/cckkLGmm.s:4806   .text.xTaskGenericNotifyFromISR:0000000000000038 $t
     /tmp/cckkLGmm.s:4961   .text.xTaskGenericNotifyFromISR:00000000000000c8 $d
     /tmp/cckkLGmm.s:4971   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/cckkLGmm.s:4978   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/cckkLGmm.s:5146   .text.vTaskNotifyGiveFromISR:000000000000008c $d
     /tmp/cckkLGmm.s:5156   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/cckkLGmm.s:5163   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/cckkLGmm.s:5229   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/cckkLGmm.s:5239   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/cckkLGmm.s:5235   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/cckkLGmm.s:5242   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/cckkLGmm.s:5246   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/cckkLGmm.s:5249   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/cckkLGmm.s:5253   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/cckkLGmm.s:5256   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/cckkLGmm.s:5260   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/cckkLGmm.s:5263   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/cckkLGmm.s:5267   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/cckkLGmm.s:5270   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/cckkLGmm.s:5274   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/cckkLGmm.s:5277   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/cckkLGmm.s:5281   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/cckkLGmm.s:5284   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/cckkLGmm.s:5288   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/cckkLGmm.s:5291   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/cckkLGmm.s:5295   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/cckkLGmm.s:5298   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/cckkLGmm.s:5302   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/cckkLGmm.s:5305   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/cckkLGmm.s:5309   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
ARM GAS  /tmp/cckkLGmm.s 			page 210


     /tmp/cckkLGmm.s:5312   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/cckkLGmm.s:5316   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/cckkLGmm.s:5319   .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/cckkLGmm.s:5323   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/cckkLGmm.s:5326   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/cckkLGmm.s:5330   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/cckkLGmm.s:5333   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/cckkLGmm.s:5337   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/cckkLGmm.s:5340   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/cckkLGmm.s:5344   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/cckkLGmm.s:5347   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/cckkLGmm.s:5351   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/cckkLGmm.s:5354   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/cckkLGmm.s:5358   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/cckkLGmm.s:5361   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/cckkLGmm.s:5365   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/cckkLGmm.s:5368   .bss.xTickCount:0000000000000000 $d
     /tmp/cckkLGmm.s:5372   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/cckkLGmm.s:5375   .bss.xYieldPending:0000000000000000 $d
     /tmp/cckkLGmm.s:5379   .bss.xYieldPending:0000000000000000 xYieldPending

UNDEFINED SYMBOLS
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
xPortStartScheduler
vPortEndScheduler
