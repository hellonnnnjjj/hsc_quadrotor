ARM GAS  /tmp/ccBm2bSm.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"port.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskExitError,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvTaskExitError:
  26              	.LFB6:
  27              		.file 1 "./freeRTOS/GCC/port.c"
   1:./freeRTOS/GCC/port.c **** /*
   2:./freeRTOS/GCC/port.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:./freeRTOS/GCC/port.c ****     All rights reserved
   4:./freeRTOS/GCC/port.c **** 
   5:./freeRTOS/GCC/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:./freeRTOS/GCC/port.c **** 
   7:./freeRTOS/GCC/port.c ****     This file is part of the FreeRTOS distribution.
   8:./freeRTOS/GCC/port.c **** 
   9:./freeRTOS/GCC/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:./freeRTOS/GCC/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:./freeRTOS/GCC/port.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:./freeRTOS/GCC/port.c **** 
  13:./freeRTOS/GCC/port.c ****     ***************************************************************************
  14:./freeRTOS/GCC/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:./freeRTOS/GCC/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:./freeRTOS/GCC/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:./freeRTOS/GCC/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:./freeRTOS/GCC/port.c ****     ***************************************************************************
  19:./freeRTOS/GCC/port.c **** 
  20:./freeRTOS/GCC/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:./freeRTOS/GCC/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:./freeRTOS/GCC/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:./freeRTOS/GCC/port.c ****     link: http://www.freertos.org/a00114.html
  24:./freeRTOS/GCC/port.c **** 
  25:./freeRTOS/GCC/port.c ****     ***************************************************************************
  26:./freeRTOS/GCC/port.c ****      *                                                                       *
  27:./freeRTOS/GCC/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:./freeRTOS/GCC/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:./freeRTOS/GCC/port.c ****      *    platform software that is more than just the market leader, it     *
  30:./freeRTOS/GCC/port.c ****      *    is the industry's de facto standard.                               *
  31:./freeRTOS/GCC/port.c ****      *                                                                       *
ARM GAS  /tmp/ccBm2bSm.s 			page 2


  32:./freeRTOS/GCC/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:./freeRTOS/GCC/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:./freeRTOS/GCC/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:./freeRTOS/GCC/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:./freeRTOS/GCC/port.c ****      *                                                                       *
  37:./freeRTOS/GCC/port.c ****     ***************************************************************************
  38:./freeRTOS/GCC/port.c **** 
  39:./freeRTOS/GCC/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:./freeRTOS/GCC/port.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:./freeRTOS/GCC/port.c ****     defined configASSERT()?
  42:./freeRTOS/GCC/port.c **** 
  43:./freeRTOS/GCC/port.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:./freeRTOS/GCC/port.c ****     embedded software for free we request you assist our global community by
  45:./freeRTOS/GCC/port.c ****     participating in the support forum.
  46:./freeRTOS/GCC/port.c **** 
  47:./freeRTOS/GCC/port.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:./freeRTOS/GCC/port.c ****     be as productive as possible as early as possible.  Now you can receive
  49:./freeRTOS/GCC/port.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:./freeRTOS/GCC/port.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:./freeRTOS/GCC/port.c **** 
  52:./freeRTOS/GCC/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:./freeRTOS/GCC/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:./freeRTOS/GCC/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:./freeRTOS/GCC/port.c **** 
  56:./freeRTOS/GCC/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:./freeRTOS/GCC/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:./freeRTOS/GCC/port.c **** 
  59:./freeRTOS/GCC/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:./freeRTOS/GCC/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:./freeRTOS/GCC/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:./freeRTOS/GCC/port.c **** 
  63:./freeRTOS/GCC/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:./freeRTOS/GCC/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:./freeRTOS/GCC/port.c ****     mission critical applications that require provable dependability.
  66:./freeRTOS/GCC/port.c **** 
  67:./freeRTOS/GCC/port.c ****     1 tab == 4 spaces!
  68:./freeRTOS/GCC/port.c **** */
  69:./freeRTOS/GCC/port.c **** 
  70:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------
  71:./freeRTOS/GCC/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  72:./freeRTOS/GCC/port.c ****  *----------------------------------------------------------*/
  73:./freeRTOS/GCC/port.c **** 
  74:./freeRTOS/GCC/port.c **** /* Scheduler includes. */
  75:./freeRTOS/GCC/port.c **** #include "FreeRTOS.h"
  76:./freeRTOS/GCC/port.c **** #include "task.h"
  77:./freeRTOS/GCC/port.c **** 
  78:./freeRTOS/GCC/port.c **** #ifndef __VFP_FP__
  79:./freeRTOS/GCC/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  80:./freeRTOS/GCC/port.c **** #endif
  81:./freeRTOS/GCC/port.c **** 
  82:./freeRTOS/GCC/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  83:./freeRTOS/GCC/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  84:./freeRTOS/GCC/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  85:./freeRTOS/GCC/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  86:./freeRTOS/GCC/port.c **** #else
  87:./freeRTOS/GCC/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  88:./freeRTOS/GCC/port.c **** 	as the core. */
ARM GAS  /tmp/ccBm2bSm.s 			page 3


  89:./freeRTOS/GCC/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  90:./freeRTOS/GCC/port.c **** #endif
  91:./freeRTOS/GCC/port.c **** 
  92:./freeRTOS/GCC/port.c **** /* Constants required to manipulate the core.  Registers first... */
  93:./freeRTOS/GCC/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  94:./freeRTOS/GCC/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  95:./freeRTOS/GCC/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  96:./freeRTOS/GCC/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  97:./freeRTOS/GCC/port.c **** /* ...then bits in the registers. */
  98:./freeRTOS/GCC/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  99:./freeRTOS/GCC/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
 100:./freeRTOS/GCC/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
 101:./freeRTOS/GCC/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
 102:./freeRTOS/GCC/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
 103:./freeRTOS/GCC/port.c **** 
 104:./freeRTOS/GCC/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
 105:./freeRTOS/GCC/port.c **** r0p1 port. */
 106:./freeRTOS/GCC/port.c **** #define portCPUID							( * ( ( volatile uint32_t * ) 0xE000ed00 ) )
 107:./freeRTOS/GCC/port.c **** #define portCORTEX_M7_r0p1_ID				( 0x410FC271UL )
 108:./freeRTOS/GCC/port.c **** #define portCORTEX_M7_r0p0_ID				( 0x410FC270UL )
 109:./freeRTOS/GCC/port.c **** 
 110:./freeRTOS/GCC/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
 111:./freeRTOS/GCC/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
 112:./freeRTOS/GCC/port.c **** 
 113:./freeRTOS/GCC/port.c **** /* Constants required to check the validity of an interrupt priority. */
 114:./freeRTOS/GCC/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 115:./freeRTOS/GCC/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 116:./freeRTOS/GCC/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
 117:./freeRTOS/GCC/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
 118:./freeRTOS/GCC/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
 119:./freeRTOS/GCC/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
 120:./freeRTOS/GCC/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 121:./freeRTOS/GCC/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 122:./freeRTOS/GCC/port.c **** 
 123:./freeRTOS/GCC/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
 124:./freeRTOS/GCC/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
 125:./freeRTOS/GCC/port.c **** 
 126:./freeRTOS/GCC/port.c **** /* Constants required to manipulate the VFP. */
 127:./freeRTOS/GCC/port.c **** #define portFPCCR							( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating point context control re
 128:./freeRTOS/GCC/port.c **** #define portASPEN_AND_LSPEN_BITS			( 0x3UL << 30UL )
 129:./freeRTOS/GCC/port.c **** 
 130:./freeRTOS/GCC/port.c **** /* Constants required to set up the initial stack. */
 131:./freeRTOS/GCC/port.c **** #define portINITIAL_XPSR					( 0x01000000 )
 132:./freeRTOS/GCC/port.c **** #define portINITIAL_EXEC_RETURN				( 0xfffffffd )
 133:./freeRTOS/GCC/port.c **** 
 134:./freeRTOS/GCC/port.c **** /* The systick is a 24-bit counter. */
 135:./freeRTOS/GCC/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 136:./freeRTOS/GCC/port.c **** 
 137:./freeRTOS/GCC/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
 138:./freeRTOS/GCC/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
 139:./freeRTOS/GCC/port.c **** #define portSTART_ADDRESS_MASK		( ( StackType_t ) 0xfffffffeUL )
 140:./freeRTOS/GCC/port.c **** 
 141:./freeRTOS/GCC/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 142:./freeRTOS/GCC/port.c **** occurred while the SysTick counter is stopped during tickless idle
 143:./freeRTOS/GCC/port.c **** calculations. */
 144:./freeRTOS/GCC/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 145:./freeRTOS/GCC/port.c **** 
ARM GAS  /tmp/ccBm2bSm.s 			page 4


 146:./freeRTOS/GCC/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 147:./freeRTOS/GCC/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 148:./freeRTOS/GCC/port.c **** debugger. */
 149:./freeRTOS/GCC/port.c **** #ifdef configTASK_RETURN_ADDRESS
 150:./freeRTOS/GCC/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 151:./freeRTOS/GCC/port.c **** #else
 152:./freeRTOS/GCC/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 153:./freeRTOS/GCC/port.c **** #endif
 154:./freeRTOS/GCC/port.c **** 
 155:./freeRTOS/GCC/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 156:./freeRTOS/GCC/port.c **** variable. */
 157:./freeRTOS/GCC/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 158:./freeRTOS/GCC/port.c **** 
 159:./freeRTOS/GCC/port.c **** /*
 160:./freeRTOS/GCC/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 161:./freeRTOS/GCC/port.c ****  * file is weak to allow application writers to change the timer used to
 162:./freeRTOS/GCC/port.c ****  * generate the tick interrupt.
 163:./freeRTOS/GCC/port.c ****  */
 164:./freeRTOS/GCC/port.c **** void vPortSetupTimerInterrupt( void );
 165:./freeRTOS/GCC/port.c **** 
 166:./freeRTOS/GCC/port.c **** /*
 167:./freeRTOS/GCC/port.c ****  * Exception handlers.
 168:./freeRTOS/GCC/port.c ****  */
 169:./freeRTOS/GCC/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 170:./freeRTOS/GCC/port.c **** void xPortSysTickHandler( void );
 171:./freeRTOS/GCC/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 172:./freeRTOS/GCC/port.c **** 
 173:./freeRTOS/GCC/port.c **** /*
 174:./freeRTOS/GCC/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 175:./freeRTOS/GCC/port.c ****  */
 176:./freeRTOS/GCC/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 177:./freeRTOS/GCC/port.c **** 
 178:./freeRTOS/GCC/port.c **** /*
 179:./freeRTOS/GCC/port.c ****  * Function to enable the VFP.
 180:./freeRTOS/GCC/port.c ****  */
 181:./freeRTOS/GCC/port.c **** static void vPortEnableVFP( void ) __attribute__ (( naked ));
 182:./freeRTOS/GCC/port.c **** 
 183:./freeRTOS/GCC/port.c **** /*
 184:./freeRTOS/GCC/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 185:./freeRTOS/GCC/port.c ****  */
 186:./freeRTOS/GCC/port.c **** static void prvTaskExitError( void );
 187:./freeRTOS/GCC/port.c **** 
 188:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 189:./freeRTOS/GCC/port.c **** 
 190:./freeRTOS/GCC/port.c **** /*
 191:./freeRTOS/GCC/port.c ****  * The number of SysTick increments that make up one tick period.
 192:./freeRTOS/GCC/port.c ****  */
 193:./freeRTOS/GCC/port.c **** #if configUSE_TICKLESS_IDLE == 1
 194:./freeRTOS/GCC/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 195:./freeRTOS/GCC/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 196:./freeRTOS/GCC/port.c **** 
 197:./freeRTOS/GCC/port.c **** /*
 198:./freeRTOS/GCC/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 199:./freeRTOS/GCC/port.c ****  * 24 bit resolution of the SysTick timer.
 200:./freeRTOS/GCC/port.c ****  */
 201:./freeRTOS/GCC/port.c **** #if configUSE_TICKLESS_IDLE == 1
 202:./freeRTOS/GCC/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
ARM GAS  /tmp/ccBm2bSm.s 			page 5


 203:./freeRTOS/GCC/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 204:./freeRTOS/GCC/port.c **** 
 205:./freeRTOS/GCC/port.c **** /*
 206:./freeRTOS/GCC/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 207:./freeRTOS/GCC/port.c ****  * power functionality only.
 208:./freeRTOS/GCC/port.c ****  */
 209:./freeRTOS/GCC/port.c **** #if configUSE_TICKLESS_IDLE == 1
 210:./freeRTOS/GCC/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 211:./freeRTOS/GCC/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 212:./freeRTOS/GCC/port.c **** 
 213:./freeRTOS/GCC/port.c **** /*
 214:./freeRTOS/GCC/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 215:./freeRTOS/GCC/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 216:./freeRTOS/GCC/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 217:./freeRTOS/GCC/port.c ****  */
 218:./freeRTOS/GCC/port.c **** #if ( configASSERT_DEFINED == 1 )
 219:./freeRTOS/GCC/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 220:./freeRTOS/GCC/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 221:./freeRTOS/GCC/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 222:./freeRTOS/GCC/port.c **** #endif /* configASSERT_DEFINED */
 223:./freeRTOS/GCC/port.c **** 
 224:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 225:./freeRTOS/GCC/port.c **** 
 226:./freeRTOS/GCC/port.c **** /*
 227:./freeRTOS/GCC/port.c ****  * See header file for description.
 228:./freeRTOS/GCC/port.c ****  */
 229:./freeRTOS/GCC/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 230:./freeRTOS/GCC/port.c **** {
 231:./freeRTOS/GCC/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 232:./freeRTOS/GCC/port.c **** 	interrupt. */
 233:./freeRTOS/GCC/port.c **** 
 234:./freeRTOS/GCC/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 235:./freeRTOS/GCC/port.c **** 	of interrupts, and to ensure alignment. */
 236:./freeRTOS/GCC/port.c **** 	pxTopOfStack--;
 237:./freeRTOS/GCC/port.c **** 
 238:./freeRTOS/GCC/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 239:./freeRTOS/GCC/port.c **** 	pxTopOfStack--;
 240:./freeRTOS/GCC/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 241:./freeRTOS/GCC/port.c **** 	pxTopOfStack--;
 242:./freeRTOS/GCC/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 243:./freeRTOS/GCC/port.c **** 
 244:./freeRTOS/GCC/port.c **** 	/* Save code space by skipping register initialisation. */
 245:./freeRTOS/GCC/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 246:./freeRTOS/GCC/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 247:./freeRTOS/GCC/port.c **** 
 248:./freeRTOS/GCC/port.c **** 	/* A save method is being used that requires each task to maintain its
 249:./freeRTOS/GCC/port.c **** 	own exec return value. */
 250:./freeRTOS/GCC/port.c **** 	pxTopOfStack--;
 251:./freeRTOS/GCC/port.c **** 	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 252:./freeRTOS/GCC/port.c **** 
 253:./freeRTOS/GCC/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 254:./freeRTOS/GCC/port.c **** 
 255:./freeRTOS/GCC/port.c **** 	return pxTopOfStack;
 256:./freeRTOS/GCC/port.c **** }
 257:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 258:./freeRTOS/GCC/port.c **** 
 259:./freeRTOS/GCC/port.c **** static void prvTaskExitError( void )
ARM GAS  /tmp/ccBm2bSm.s 			page 6


 260:./freeRTOS/GCC/port.c **** {
  28              		.loc 1 260 1 view -0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 261:./freeRTOS/GCC/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 262:./freeRTOS/GCC/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 263:./freeRTOS/GCC/port.c **** 	should instead call vTaskDelete( NULL ).
 264:./freeRTOS/GCC/port.c **** 
 265:./freeRTOS/GCC/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 266:./freeRTOS/GCC/port.c **** 	defined, then stop here so application writers can catch the error. */
 267:./freeRTOS/GCC/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
  34              		.loc 1 267 43 view .LVU1
 268:./freeRTOS/GCC/port.c **** 	portDISABLE_INTERRUPTS();
  35              		.loc 1 268 2 view .LVU2
  36              	.LBB12:
  37              	.LBI12:
  38              		.file 2 "freeRTOS/GCC/portmacro.h"
   1:freeRTOS/GCC/portmacro.h **** /*
   2:freeRTOS/GCC/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:freeRTOS/GCC/portmacro.h ****     All rights reserved
   4:freeRTOS/GCC/portmacro.h **** 
   5:freeRTOS/GCC/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:freeRTOS/GCC/portmacro.h **** 
   7:freeRTOS/GCC/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:freeRTOS/GCC/portmacro.h **** 
   9:freeRTOS/GCC/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:freeRTOS/GCC/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:freeRTOS/GCC/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:freeRTOS/GCC/portmacro.h **** 
  13:freeRTOS/GCC/portmacro.h ****     ***************************************************************************
  14:freeRTOS/GCC/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:freeRTOS/GCC/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:freeRTOS/GCC/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:freeRTOS/GCC/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:freeRTOS/GCC/portmacro.h ****     ***************************************************************************
  19:freeRTOS/GCC/portmacro.h **** 
  20:freeRTOS/GCC/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:freeRTOS/GCC/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:freeRTOS/GCC/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:freeRTOS/GCC/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:freeRTOS/GCC/portmacro.h **** 
  25:freeRTOS/GCC/portmacro.h ****     ***************************************************************************
  26:freeRTOS/GCC/portmacro.h ****      *                                                                       *
  27:freeRTOS/GCC/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:freeRTOS/GCC/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:freeRTOS/GCC/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:freeRTOS/GCC/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:freeRTOS/GCC/portmacro.h ****      *                                                                       *
  32:freeRTOS/GCC/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:freeRTOS/GCC/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:freeRTOS/GCC/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:freeRTOS/GCC/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:freeRTOS/GCC/portmacro.h ****      *                                                                       *
  37:freeRTOS/GCC/portmacro.h ****     ***************************************************************************
ARM GAS  /tmp/ccBm2bSm.s 			page 7


  38:freeRTOS/GCC/portmacro.h **** 
  39:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:freeRTOS/GCC/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:freeRTOS/GCC/portmacro.h ****     defined configASSERT()?
  42:freeRTOS/GCC/portmacro.h **** 
  43:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:freeRTOS/GCC/portmacro.h ****     embedded software for free we request you assist our global community by
  45:freeRTOS/GCC/portmacro.h ****     participating in the support forum.
  46:freeRTOS/GCC/portmacro.h **** 
  47:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:freeRTOS/GCC/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:freeRTOS/GCC/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:freeRTOS/GCC/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:freeRTOS/GCC/portmacro.h **** 
  52:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:freeRTOS/GCC/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:freeRTOS/GCC/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:freeRTOS/GCC/portmacro.h **** 
  56:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:freeRTOS/GCC/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:freeRTOS/GCC/portmacro.h **** 
  59:freeRTOS/GCC/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:freeRTOS/GCC/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:freeRTOS/GCC/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:freeRTOS/GCC/portmacro.h **** 
  63:freeRTOS/GCC/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:freeRTOS/GCC/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:freeRTOS/GCC/portmacro.h ****     mission critical applications that require provable dependability.
  66:freeRTOS/GCC/portmacro.h **** 
  67:freeRTOS/GCC/portmacro.h ****     1 tab == 4 spaces!
  68:freeRTOS/GCC/portmacro.h **** */
  69:freeRTOS/GCC/portmacro.h **** 
  70:freeRTOS/GCC/portmacro.h **** 
  71:freeRTOS/GCC/portmacro.h **** #ifndef PORTMACRO_H
  72:freeRTOS/GCC/portmacro.h **** #define PORTMACRO_H
  73:freeRTOS/GCC/portmacro.h **** 
  74:freeRTOS/GCC/portmacro.h **** #ifdef __cplusplus
  75:freeRTOS/GCC/portmacro.h **** extern "C" {
  76:freeRTOS/GCC/portmacro.h **** #endif
  77:freeRTOS/GCC/portmacro.h **** 
  78:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------
  79:freeRTOS/GCC/portmacro.h ****  * Port specific definitions.
  80:freeRTOS/GCC/portmacro.h ****  *
  81:freeRTOS/GCC/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:freeRTOS/GCC/portmacro.h ****  * given hardware and compiler.
  83:freeRTOS/GCC/portmacro.h ****  *
  84:freeRTOS/GCC/portmacro.h ****  * These settings should not be altered.
  85:freeRTOS/GCC/portmacro.h ****  *-----------------------------------------------------------
  86:freeRTOS/GCC/portmacro.h ****  */
  87:freeRTOS/GCC/portmacro.h **** 
  88:freeRTOS/GCC/portmacro.h **** /* Type definitions. */
  89:freeRTOS/GCC/portmacro.h **** #define portCHAR		char
  90:freeRTOS/GCC/portmacro.h **** #define portFLOAT		float
  91:freeRTOS/GCC/portmacro.h **** #define portDOUBLE		double
  92:freeRTOS/GCC/portmacro.h **** #define portLONG		long
  93:freeRTOS/GCC/portmacro.h **** #define portSHORT		short
  94:freeRTOS/GCC/portmacro.h **** #define portSTACK_TYPE	uint32_t
ARM GAS  /tmp/ccBm2bSm.s 			page 8


  95:freeRTOS/GCC/portmacro.h **** #define portBASE_TYPE	long
  96:freeRTOS/GCC/portmacro.h **** 
  97:freeRTOS/GCC/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:freeRTOS/GCC/portmacro.h **** typedef long BaseType_t;
  99:freeRTOS/GCC/portmacro.h **** typedef unsigned long UBaseType_t;
 100:freeRTOS/GCC/portmacro.h **** 
 101:freeRTOS/GCC/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:freeRTOS/GCC/portmacro.h **** 	typedef uint16_t TickType_t;
 103:freeRTOS/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:freeRTOS/GCC/portmacro.h **** #else
 105:freeRTOS/GCC/portmacro.h **** 	typedef uint32_t TickType_t;
 106:freeRTOS/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:freeRTOS/GCC/portmacro.h **** 
 108:freeRTOS/GCC/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:freeRTOS/GCC/portmacro.h **** 	not need to be guarded with a critical section. */
 110:freeRTOS/GCC/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:freeRTOS/GCC/portmacro.h **** #endif
 112:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 113:freeRTOS/GCC/portmacro.h **** 
 114:freeRTOS/GCC/portmacro.h **** /* Architecture specifics. */
 115:freeRTOS/GCC/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:freeRTOS/GCC/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:freeRTOS/GCC/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 119:freeRTOS/GCC/portmacro.h **** 
 120:freeRTOS/GCC/portmacro.h **** /* Scheduler utilities. */
 121:freeRTOS/GCC/portmacro.h **** #define portYIELD() 															\
 122:freeRTOS/GCC/portmacro.h **** {																				\
 123:freeRTOS/GCC/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:freeRTOS/GCC/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:freeRTOS/GCC/portmacro.h **** 																				\
 126:freeRTOS/GCC/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:freeRTOS/GCC/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:freeRTOS/GCC/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:freeRTOS/GCC/portmacro.h **** 	__asm volatile( "isb" );													\
 130:freeRTOS/GCC/portmacro.h **** }
 131:freeRTOS/GCC/portmacro.h **** 
 132:freeRTOS/GCC/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:freeRTOS/GCC/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:freeRTOS/GCC/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:freeRTOS/GCC/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 137:freeRTOS/GCC/portmacro.h **** 
 138:freeRTOS/GCC/portmacro.h **** /* Critical section management. */
 139:freeRTOS/GCC/portmacro.h **** extern void vPortEnterCritical( void );
 140:freeRTOS/GCC/portmacro.h **** extern void vPortExitCritical( void );
 141:freeRTOS/GCC/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:freeRTOS/GCC/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:freeRTOS/GCC/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:freeRTOS/GCC/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:freeRTOS/GCC/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:freeRTOS/GCC/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:freeRTOS/GCC/portmacro.h **** 
 148:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 149:freeRTOS/GCC/portmacro.h **** 
 150:freeRTOS/GCC/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:freeRTOS/GCC/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
ARM GAS  /tmp/ccBm2bSm.s 			page 9


 152:freeRTOS/GCC/portmacro.h **** (which build with all the ports) will build. */
 153:freeRTOS/GCC/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:freeRTOS/GCC/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 156:freeRTOS/GCC/portmacro.h **** 
 157:freeRTOS/GCC/portmacro.h **** /* Tickless idle/low power functionality. */
 158:freeRTOS/GCC/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:freeRTOS/GCC/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:freeRTOS/GCC/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:freeRTOS/GCC/portmacro.h **** #endif
 162:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 163:freeRTOS/GCC/portmacro.h **** 
 164:freeRTOS/GCC/portmacro.h **** /* Architecture specific optimisations. */
 165:freeRTOS/GCC/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:freeRTOS/GCC/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:freeRTOS/GCC/portmacro.h **** #endif
 168:freeRTOS/GCC/portmacro.h **** 
 169:freeRTOS/GCC/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:freeRTOS/GCC/portmacro.h **** 
 171:freeRTOS/GCC/portmacro.h **** 	/* Generic helper function. */
 172:freeRTOS/GCC/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:freeRTOS/GCC/portmacro.h **** 	{
 174:freeRTOS/GCC/portmacro.h **** 	uint8_t ucReturn;
 175:freeRTOS/GCC/portmacro.h **** 
 176:freeRTOS/GCC/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:freeRTOS/GCC/portmacro.h **** 		return ucReturn;
 178:freeRTOS/GCC/portmacro.h **** 	}
 179:freeRTOS/GCC/portmacro.h **** 
 180:freeRTOS/GCC/portmacro.h **** 	/* Check the configuration. */
 181:freeRTOS/GCC/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:freeRTOS/GCC/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:freeRTOS/GCC/portmacro.h **** 	#endif
 184:freeRTOS/GCC/portmacro.h **** 
 185:freeRTOS/GCC/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:freeRTOS/GCC/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:freeRTOS/GCC/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:freeRTOS/GCC/portmacro.h **** 
 189:freeRTOS/GCC/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:freeRTOS/GCC/portmacro.h **** 
 191:freeRTOS/GCC/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:freeRTOS/GCC/portmacro.h **** 
 193:freeRTOS/GCC/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:freeRTOS/GCC/portmacro.h **** 
 195:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 196:freeRTOS/GCC/portmacro.h **** 
 197:freeRTOS/GCC/portmacro.h **** #ifdef configASSERT
 198:freeRTOS/GCC/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:freeRTOS/GCC/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:freeRTOS/GCC/portmacro.h **** #endif
 201:freeRTOS/GCC/portmacro.h **** 
 202:freeRTOS/GCC/portmacro.h **** /* portNOP() is not required by this port. */
 203:freeRTOS/GCC/portmacro.h **** #define portNOP()
 204:freeRTOS/GCC/portmacro.h **** 
 205:freeRTOS/GCC/portmacro.h **** #define portINLINE	__inline
 206:freeRTOS/GCC/portmacro.h **** 
 207:freeRTOS/GCC/portmacro.h **** #ifndef portFORCE_INLINE
 208:freeRTOS/GCC/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
ARM GAS  /tmp/ccBm2bSm.s 			page 10


 209:freeRTOS/GCC/portmacro.h **** #endif
 210:freeRTOS/GCC/portmacro.h **** 
 211:freeRTOS/GCC/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:freeRTOS/GCC/portmacro.h **** {
 213:freeRTOS/GCC/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:freeRTOS/GCC/portmacro.h **** BaseType_t xReturn;
 215:freeRTOS/GCC/portmacro.h **** 
 216:freeRTOS/GCC/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:freeRTOS/GCC/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:freeRTOS/GCC/portmacro.h **** 
 219:freeRTOS/GCC/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:freeRTOS/GCC/portmacro.h **** 	{
 221:freeRTOS/GCC/portmacro.h **** 		xReturn = pdFALSE;
 222:freeRTOS/GCC/portmacro.h **** 	}
 223:freeRTOS/GCC/portmacro.h **** 	else
 224:freeRTOS/GCC/portmacro.h **** 	{
 225:freeRTOS/GCC/portmacro.h **** 		xReturn = pdTRUE;
 226:freeRTOS/GCC/portmacro.h **** 	}
 227:freeRTOS/GCC/portmacro.h **** 
 228:freeRTOS/GCC/portmacro.h **** 	return xReturn;
 229:freeRTOS/GCC/portmacro.h **** }
 230:freeRTOS/GCC/portmacro.h **** 
 231:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 232:freeRTOS/GCC/portmacro.h **** 
 233:freeRTOS/GCC/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  39              		.loc 2 233 30 view .LVU3
  40              	.LBB13:
 234:freeRTOS/GCC/portmacro.h **** {
 235:freeRTOS/GCC/portmacro.h **** uint32_t ulNewBASEPRI;
  41              		.loc 2 235 1 view .LVU4
 236:freeRTOS/GCC/portmacro.h **** 
 237:freeRTOS/GCC/portmacro.h **** 	__asm volatile
  42              		.loc 2 237 2 view .LVU5
  43              		.syntax unified
  44              	@ 237 "freeRTOS/GCC/portmacro.h" 1
  45 0000 4FF0BF03 			mov r3, #191												
  46 0004 83F31188 		msr basepri, r3											
  47 0008 BFF36F8F 		isb														
  48 000c BFF34F8F 		dsb														
  49              	
  50              	@ 0 "" 2
  51              	.LVL0:
  52              		.thumb
  53              		.syntax unified
  54              	.L2:
  55              		.loc 2 237 2 is_stmt 0 view .LVU6
  56              	.LBE13:
  57              	.LBE12:
 269:./freeRTOS/GCC/port.c **** 	for( ;; );
  58              		.loc 1 269 2 is_stmt 1 discriminator 1 view .LVU7
  59              		.loc 1 269 11 discriminator 1 view .LVU8
  60              		.loc 1 269 8 discriminator 1 view .LVU9
  61 0010 FEE7     		b	.L2
  62              		.cfi_endproc
  63              	.LFE6:
  65              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  66              		.align	1
ARM GAS  /tmp/ccBm2bSm.s 			page 11


  67              		.syntax unified
  68              		.thumb
  69              		.thumb_func
  70              		.fpu fpv4-sp-d16
  72              	prvPortStartFirstTask:
  73              	.LFB8:
 270:./freeRTOS/GCC/port.c **** }
 271:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 272:./freeRTOS/GCC/port.c **** 
 273:./freeRTOS/GCC/port.c **** void vPortSVCHandler( void )
 274:./freeRTOS/GCC/port.c **** {
 275:./freeRTOS/GCC/port.c **** 	__asm volatile (
 276:./freeRTOS/GCC/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 277:./freeRTOS/GCC/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 278:./freeRTOS/GCC/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 279:./freeRTOS/GCC/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 280:./freeRTOS/GCC/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 281:./freeRTOS/GCC/port.c **** 					"	isb								\n"
 282:./freeRTOS/GCC/port.c **** 					"	mov r0, #0 						\n"
 283:./freeRTOS/GCC/port.c **** 					"	msr	basepri, r0					\n"
 284:./freeRTOS/GCC/port.c **** 					"	bx r14							\n"
 285:./freeRTOS/GCC/port.c **** 					"									\n"
 286:./freeRTOS/GCC/port.c **** 					"	.align 4						\n"
 287:./freeRTOS/GCC/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 288:./freeRTOS/GCC/port.c **** 				);
 289:./freeRTOS/GCC/port.c **** }
 290:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 291:./freeRTOS/GCC/port.c **** 
 292:./freeRTOS/GCC/port.c **** static void prvPortStartFirstTask( void )
 293:./freeRTOS/GCC/port.c **** {
  74              		.loc 1 293 1 view -0
  75              		.cfi_startproc
  76              		@ Naked Function: prologue and epilogue provided by programmer.
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
 294:./freeRTOS/GCC/port.c **** 	__asm volatile(
  79              		.loc 1 294 2 view .LVU11
  80              		.syntax unified
  81              	@ 294 "./freeRTOS/GCC/port.c" 1
  82 0000 0648     		 ldr r0, =0xE000ED08 	
  83 0002 0068     	 ldr r0, [r0] 			
  84 0004 0068     	 ldr r0, [r0] 			
  85 0006 80F30888 	 msr msp, r0			
  86 000a 62B6     	 cpsie i				
  87 000c 61B6     	 cpsie f				
  88 000e BFF34F8F 	 dsb					
  89 0012 BFF36F8F 	 isb					
  90 0016 00DF     	 svc 0					
  91 0018 00BF     	 nop					
  92              	
  93              	@ 0 "" 2
 295:./freeRTOS/GCC/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 296:./freeRTOS/GCC/port.c **** 					" ldr r0, [r0] 			\n"
 297:./freeRTOS/GCC/port.c **** 					" ldr r0, [r0] 			\n"
 298:./freeRTOS/GCC/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 299:./freeRTOS/GCC/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 300:./freeRTOS/GCC/port.c **** 					" cpsie f				\n"
ARM GAS  /tmp/ccBm2bSm.s 			page 12


 301:./freeRTOS/GCC/port.c **** 					" dsb					\n"
 302:./freeRTOS/GCC/port.c **** 					" isb					\n"
 303:./freeRTOS/GCC/port.c **** 					" svc 0					\n" /* System call to start first task. */
 304:./freeRTOS/GCC/port.c **** 					" nop					\n"
 305:./freeRTOS/GCC/port.c **** 				);
 306:./freeRTOS/GCC/port.c **** }
  94              		.loc 1 306 1 is_stmt 0 view .LVU12
  95              		.thumb
  96              		.syntax unified
  97              		.cfi_endproc
  98              	.LFE8:
 100 001a 0000     		.section	.text.vPortEnableVFP,"ax",%progbits
 101              		.align	1
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu fpv4-sp-d16
 107              	vPortEnableVFP:
 108              	.LFB16:
 307:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 308:./freeRTOS/GCC/port.c **** 
 309:./freeRTOS/GCC/port.c **** /*
 310:./freeRTOS/GCC/port.c ****  * See header file for description.
 311:./freeRTOS/GCC/port.c ****  */
 312:./freeRTOS/GCC/port.c **** BaseType_t xPortStartScheduler( void )
 313:./freeRTOS/GCC/port.c **** {
 314:./freeRTOS/GCC/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 315:./freeRTOS/GCC/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 316:./freeRTOS/GCC/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 317:./freeRTOS/GCC/port.c **** 
 318:./freeRTOS/GCC/port.c **** 	/* This port can be used on all revisions of the Cortex-M7 core other than
 319:./freeRTOS/GCC/port.c **** 	the r0p1 parts.  r0p1 parts should use the port from the
 320:./freeRTOS/GCC/port.c **** 	/source/portable/GCC/ARM_CM7/r0p1 directory. */
 321:./freeRTOS/GCC/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 322:./freeRTOS/GCC/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 323:./freeRTOS/GCC/port.c **** 
 324:./freeRTOS/GCC/port.c **** 	#if( configASSERT_DEFINED == 1 )
 325:./freeRTOS/GCC/port.c **** 	{
 326:./freeRTOS/GCC/port.c **** 		volatile uint32_t ulOriginalPriority;
 327:./freeRTOS/GCC/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 328:./freeRTOS/GCC/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 329:./freeRTOS/GCC/port.c **** 
 330:./freeRTOS/GCC/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 331:./freeRTOS/GCC/port.c **** 		functions can be called.  ISR safe functions are those that end in
 332:./freeRTOS/GCC/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 333:./freeRTOS/GCC/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 334:./freeRTOS/GCC/port.c **** 
 335:./freeRTOS/GCC/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 336:./freeRTOS/GCC/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 337:./freeRTOS/GCC/port.c **** 
 338:./freeRTOS/GCC/port.c **** 		/* Determine the number of priority bits available.  First write to all
 339:./freeRTOS/GCC/port.c **** 		possible bits. */
 340:./freeRTOS/GCC/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 341:./freeRTOS/GCC/port.c **** 
 342:./freeRTOS/GCC/port.c **** 		/* Read the value back to see how many bits stuck. */
 343:./freeRTOS/GCC/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 344:./freeRTOS/GCC/port.c **** 
ARM GAS  /tmp/ccBm2bSm.s 			page 13


 345:./freeRTOS/GCC/port.c **** 		/* Use the same mask on the maximum system call priority. */
 346:./freeRTOS/GCC/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 347:./freeRTOS/GCC/port.c **** 
 348:./freeRTOS/GCC/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 349:./freeRTOS/GCC/port.c **** 		of bits read back. */
 350:./freeRTOS/GCC/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 351:./freeRTOS/GCC/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 352:./freeRTOS/GCC/port.c **** 		{
 353:./freeRTOS/GCC/port.c **** 			ulMaxPRIGROUPValue--;
 354:./freeRTOS/GCC/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 355:./freeRTOS/GCC/port.c **** 		}
 356:./freeRTOS/GCC/port.c **** 
 357:./freeRTOS/GCC/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 358:./freeRTOS/GCC/port.c **** 		register. */
 359:./freeRTOS/GCC/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 360:./freeRTOS/GCC/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 361:./freeRTOS/GCC/port.c **** 
 362:./freeRTOS/GCC/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 363:./freeRTOS/GCC/port.c **** 		value. */
 364:./freeRTOS/GCC/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 365:./freeRTOS/GCC/port.c **** 	}
 366:./freeRTOS/GCC/port.c **** 	#endif /* conifgASSERT_DEFINED */
 367:./freeRTOS/GCC/port.c **** 
 368:./freeRTOS/GCC/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 369:./freeRTOS/GCC/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 370:./freeRTOS/GCC/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 371:./freeRTOS/GCC/port.c **** 
 372:./freeRTOS/GCC/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 373:./freeRTOS/GCC/port.c **** 	here already. */
 374:./freeRTOS/GCC/port.c **** 	vPortSetupTimerInterrupt();
 375:./freeRTOS/GCC/port.c **** 
 376:./freeRTOS/GCC/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 377:./freeRTOS/GCC/port.c **** 	uxCriticalNesting = 0;
 378:./freeRTOS/GCC/port.c **** 
 379:./freeRTOS/GCC/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 380:./freeRTOS/GCC/port.c **** 	vPortEnableVFP();
 381:./freeRTOS/GCC/port.c **** 
 382:./freeRTOS/GCC/port.c **** 	/* Lazy save always. */
 383:./freeRTOS/GCC/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 384:./freeRTOS/GCC/port.c **** 
 385:./freeRTOS/GCC/port.c **** 	/* Start the first task. */
 386:./freeRTOS/GCC/port.c **** 	prvPortStartFirstTask();
 387:./freeRTOS/GCC/port.c **** 
 388:./freeRTOS/GCC/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 389:./freeRTOS/GCC/port.c **** 	exit error function to prevent compiler warnings about a static function
 390:./freeRTOS/GCC/port.c **** 	not being called in the case that the application writer overrides this
 391:./freeRTOS/GCC/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS. */
 392:./freeRTOS/GCC/port.c **** 	prvTaskExitError();
 393:./freeRTOS/GCC/port.c **** 
 394:./freeRTOS/GCC/port.c **** 	/* Should not get here! */
 395:./freeRTOS/GCC/port.c **** 	return 0;
 396:./freeRTOS/GCC/port.c **** }
 397:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 398:./freeRTOS/GCC/port.c **** 
 399:./freeRTOS/GCC/port.c **** void vPortEndScheduler( void )
 400:./freeRTOS/GCC/port.c **** {
 401:./freeRTOS/GCC/port.c **** 	/* Not implemented in ports where there is nothing to return to.
ARM GAS  /tmp/ccBm2bSm.s 			page 14


 402:./freeRTOS/GCC/port.c **** 	Artificially force an assert. */
 403:./freeRTOS/GCC/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 404:./freeRTOS/GCC/port.c **** }
 405:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 406:./freeRTOS/GCC/port.c **** 
 407:./freeRTOS/GCC/port.c **** void vPortEnterCritical( void )
 408:./freeRTOS/GCC/port.c **** {
 409:./freeRTOS/GCC/port.c **** 	portDISABLE_INTERRUPTS();
 410:./freeRTOS/GCC/port.c **** 	uxCriticalNesting++;
 411:./freeRTOS/GCC/port.c **** 
 412:./freeRTOS/GCC/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 413:./freeRTOS/GCC/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 414:./freeRTOS/GCC/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 415:./freeRTOS/GCC/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 416:./freeRTOS/GCC/port.c **** 	assert function also uses a critical section. */
 417:./freeRTOS/GCC/port.c **** 	if( uxCriticalNesting == 1 )
 418:./freeRTOS/GCC/port.c **** 	{
 419:./freeRTOS/GCC/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 420:./freeRTOS/GCC/port.c **** 	}
 421:./freeRTOS/GCC/port.c **** }
 422:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 423:./freeRTOS/GCC/port.c **** 
 424:./freeRTOS/GCC/port.c **** void vPortExitCritical( void )
 425:./freeRTOS/GCC/port.c **** {
 426:./freeRTOS/GCC/port.c **** 	configASSERT( uxCriticalNesting );
 427:./freeRTOS/GCC/port.c **** 	uxCriticalNesting--;
 428:./freeRTOS/GCC/port.c **** 	if( uxCriticalNesting == 0 )
 429:./freeRTOS/GCC/port.c **** 	{
 430:./freeRTOS/GCC/port.c **** 		portENABLE_INTERRUPTS();
 431:./freeRTOS/GCC/port.c **** 	}
 432:./freeRTOS/GCC/port.c **** }
 433:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 434:./freeRTOS/GCC/port.c **** 
 435:./freeRTOS/GCC/port.c **** void xPortPendSVHandler( void )
 436:./freeRTOS/GCC/port.c **** {
 437:./freeRTOS/GCC/port.c **** 	/* This is a naked function. */
 438:./freeRTOS/GCC/port.c **** 
 439:./freeRTOS/GCC/port.c **** 	__asm volatile
 440:./freeRTOS/GCC/port.c **** 	(
 441:./freeRTOS/GCC/port.c **** 	"	mrs r0, psp							\n"
 442:./freeRTOS/GCC/port.c **** 	"	isb									\n"
 443:./freeRTOS/GCC/port.c **** 	"										\n"
 444:./freeRTOS/GCC/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 445:./freeRTOS/GCC/port.c **** 	"	ldr	r2, [r3]						\n"
 446:./freeRTOS/GCC/port.c **** 	"										\n"
 447:./freeRTOS/GCC/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 448:./freeRTOS/GCC/port.c **** 	"	it eq								\n"
 449:./freeRTOS/GCC/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 450:./freeRTOS/GCC/port.c **** 	"										\n"
 451:./freeRTOS/GCC/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 452:./freeRTOS/GCC/port.c **** 	"										\n"
 453:./freeRTOS/GCC/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 454:./freeRTOS/GCC/port.c **** 	"										\n"
 455:./freeRTOS/GCC/port.c **** 	"	stmdb sp!, {r3}						\n"
 456:./freeRTOS/GCC/port.c **** 	"	mov r0, %0 							\n"
 457:./freeRTOS/GCC/port.c **** 	"	msr basepri, r0						\n"
 458:./freeRTOS/GCC/port.c **** 	"	dsb									\n"
ARM GAS  /tmp/ccBm2bSm.s 			page 15


 459:./freeRTOS/GCC/port.c **** 	"	isb									\n"
 460:./freeRTOS/GCC/port.c **** 	"	bl vTaskSwitchContext				\n"
 461:./freeRTOS/GCC/port.c **** 	"	mov r0, #0							\n"
 462:./freeRTOS/GCC/port.c **** 	"	msr basepri, r0						\n"
 463:./freeRTOS/GCC/port.c **** 	"	ldmia sp!, {r3}						\n"
 464:./freeRTOS/GCC/port.c **** 	"										\n"
 465:./freeRTOS/GCC/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 466:./freeRTOS/GCC/port.c **** 	"	ldr r0, [r1]						\n"
 467:./freeRTOS/GCC/port.c **** 	"										\n"
 468:./freeRTOS/GCC/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 469:./freeRTOS/GCC/port.c **** 	"										\n"
 470:./freeRTOS/GCC/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 471:./freeRTOS/GCC/port.c **** 	"	it eq								\n"
 472:./freeRTOS/GCC/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 473:./freeRTOS/GCC/port.c **** 	"										\n"
 474:./freeRTOS/GCC/port.c **** 	"	msr psp, r0							\n"
 475:./freeRTOS/GCC/port.c **** 	"	isb									\n"
 476:./freeRTOS/GCC/port.c **** 	"										\n"
 477:./freeRTOS/GCC/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 478:./freeRTOS/GCC/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
 479:./freeRTOS/GCC/port.c **** 	"			push { r14 }				\n"
 480:./freeRTOS/GCC/port.c **** 	"			pop { pc }					\n"
 481:./freeRTOS/GCC/port.c **** 		#endif
 482:./freeRTOS/GCC/port.c **** 	#endif
 483:./freeRTOS/GCC/port.c **** 	"										\n"
 484:./freeRTOS/GCC/port.c **** 	"	bx r14								\n"
 485:./freeRTOS/GCC/port.c **** 	"										\n"
 486:./freeRTOS/GCC/port.c **** 	"	.align 4							\n"
 487:./freeRTOS/GCC/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 488:./freeRTOS/GCC/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 489:./freeRTOS/GCC/port.c **** 	);
 490:./freeRTOS/GCC/port.c **** }
 491:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 492:./freeRTOS/GCC/port.c **** 
 493:./freeRTOS/GCC/port.c **** void xPortSysTickHandler( void )
 494:./freeRTOS/GCC/port.c **** {
 495:./freeRTOS/GCC/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 496:./freeRTOS/GCC/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 497:./freeRTOS/GCC/port.c **** 	save and then restore the interrupt mask value as its value is already
 498:./freeRTOS/GCC/port.c **** 	known. */
 499:./freeRTOS/GCC/port.c **** 	portDISABLE_INTERRUPTS();
 500:./freeRTOS/GCC/port.c **** 	{
 501:./freeRTOS/GCC/port.c **** 		/* Increment the RTOS tick. */
 502:./freeRTOS/GCC/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 503:./freeRTOS/GCC/port.c **** 		{
 504:./freeRTOS/GCC/port.c **** 			/* A context switch is required.  Context switching is performed in
 505:./freeRTOS/GCC/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 506:./freeRTOS/GCC/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 507:./freeRTOS/GCC/port.c **** 		}
 508:./freeRTOS/GCC/port.c **** 	}
 509:./freeRTOS/GCC/port.c **** 	portENABLE_INTERRUPTS();
 510:./freeRTOS/GCC/port.c **** }
 511:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 512:./freeRTOS/GCC/port.c **** 
 513:./freeRTOS/GCC/port.c **** #if configUSE_TICKLESS_IDLE == 1
 514:./freeRTOS/GCC/port.c **** 
 515:./freeRTOS/GCC/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
ARM GAS  /tmp/ccBm2bSm.s 			page 16


 516:./freeRTOS/GCC/port.c **** 	{
 517:./freeRTOS/GCC/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
 518:./freeRTOS/GCC/port.c **** 	TickType_t xModifiableIdleTime;
 519:./freeRTOS/GCC/port.c **** 
 520:./freeRTOS/GCC/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 521:./freeRTOS/GCC/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 522:./freeRTOS/GCC/port.c **** 		{
 523:./freeRTOS/GCC/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 524:./freeRTOS/GCC/port.c **** 		}
 525:./freeRTOS/GCC/port.c **** 
 526:./freeRTOS/GCC/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 527:./freeRTOS/GCC/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 528:./freeRTOS/GCC/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 529:./freeRTOS/GCC/port.c **** 		kernel with respect to calendar time. */
 530:./freeRTOS/GCC/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 531:./freeRTOS/GCC/port.c **** 
 532:./freeRTOS/GCC/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 533:./freeRTOS/GCC/port.c **** 		tick periods.  -1 is used because this code will execute part way
 534:./freeRTOS/GCC/port.c **** 		through one of the tick periods. */
 535:./freeRTOS/GCC/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 536:./freeRTOS/GCC/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 537:./freeRTOS/GCC/port.c **** 		{
 538:./freeRTOS/GCC/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 539:./freeRTOS/GCC/port.c **** 		}
 540:./freeRTOS/GCC/port.c **** 
 541:./freeRTOS/GCC/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 542:./freeRTOS/GCC/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 543:./freeRTOS/GCC/port.c **** 		__asm volatile( "cpsid i" );
 544:./freeRTOS/GCC/port.c **** 		__asm volatile( "dsb" );
 545:./freeRTOS/GCC/port.c **** 		__asm volatile( "isb" );
 546:./freeRTOS/GCC/port.c **** 
 547:./freeRTOS/GCC/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 548:./freeRTOS/GCC/port.c **** 		to be unsuspended then abandon the low power entry. */
 549:./freeRTOS/GCC/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 550:./freeRTOS/GCC/port.c **** 		{
 551:./freeRTOS/GCC/port.c **** 			/* Restart from whatever is left in the count register to complete
 552:./freeRTOS/GCC/port.c **** 			this tick period. */
 553:./freeRTOS/GCC/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 554:./freeRTOS/GCC/port.c **** 
 555:./freeRTOS/GCC/port.c **** 			/* Restart SysTick. */
 556:./freeRTOS/GCC/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 557:./freeRTOS/GCC/port.c **** 
 558:./freeRTOS/GCC/port.c **** 			/* Reset the reload register to the value required for normal tick
 559:./freeRTOS/GCC/port.c **** 			periods. */
 560:./freeRTOS/GCC/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 561:./freeRTOS/GCC/port.c **** 
 562:./freeRTOS/GCC/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 563:./freeRTOS/GCC/port.c **** 			above. */
 564:./freeRTOS/GCC/port.c **** 			__asm volatile( "cpsie i" );
 565:./freeRTOS/GCC/port.c **** 		}
 566:./freeRTOS/GCC/port.c **** 		else
 567:./freeRTOS/GCC/port.c **** 		{
 568:./freeRTOS/GCC/port.c **** 			/* Set the new reload value. */
 569:./freeRTOS/GCC/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 570:./freeRTOS/GCC/port.c **** 
 571:./freeRTOS/GCC/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 572:./freeRTOS/GCC/port.c **** 			zero. */
ARM GAS  /tmp/ccBm2bSm.s 			page 17


 573:./freeRTOS/GCC/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 574:./freeRTOS/GCC/port.c **** 
 575:./freeRTOS/GCC/port.c **** 			/* Restart SysTick. */
 576:./freeRTOS/GCC/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 577:./freeRTOS/GCC/port.c **** 
 578:./freeRTOS/GCC/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 579:./freeRTOS/GCC/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 580:./freeRTOS/GCC/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 581:./freeRTOS/GCC/port.c **** 			should not be executed again.  However, the original expected idle
 582:./freeRTOS/GCC/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 583:./freeRTOS/GCC/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 584:./freeRTOS/GCC/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 585:./freeRTOS/GCC/port.c **** 			if( xModifiableIdleTime > 0 )
 586:./freeRTOS/GCC/port.c **** 			{
 587:./freeRTOS/GCC/port.c **** 				__asm volatile( "dsb" );
 588:./freeRTOS/GCC/port.c **** 				__asm volatile( "wfi" );
 589:./freeRTOS/GCC/port.c **** 				__asm volatile( "isb" );
 590:./freeRTOS/GCC/port.c **** 			}
 591:./freeRTOS/GCC/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 592:./freeRTOS/GCC/port.c **** 
 593:./freeRTOS/GCC/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 594:./freeRTOS/GCC/port.c **** 			accounted for as best it can be, but using the tickless mode will
 595:./freeRTOS/GCC/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 596:./freeRTOS/GCC/port.c **** 			kernel with respect to calendar time. */
 597:./freeRTOS/GCC/port.c **** 			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 598:./freeRTOS/GCC/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 599:./freeRTOS/GCC/port.c **** 
 600:./freeRTOS/GCC/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 601:./freeRTOS/GCC/port.c **** 			above. */
 602:./freeRTOS/GCC/port.c **** 			__asm volatile( "cpsie i" );
 603:./freeRTOS/GCC/port.c **** 
 604:./freeRTOS/GCC/port.c **** 			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 605:./freeRTOS/GCC/port.c **** 			{
 606:./freeRTOS/GCC/port.c **** 				uint32_t ulCalculatedLoadValue;
 607:./freeRTOS/GCC/port.c **** 
 608:./freeRTOS/GCC/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 609:./freeRTOS/GCC/port.c **** 				count reloaded with ulReloadValue.  Reset the
 610:./freeRTOS/GCC/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 611:./freeRTOS/GCC/port.c **** 				period. */
 612:./freeRTOS/GCC/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 613:./freeRTOS/GCC/port.c **** 
 614:./freeRTOS/GCC/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 615:./freeRTOS/GCC/port.c **** 				underflowed because the post sleep hook did something
 616:./freeRTOS/GCC/port.c **** 				that took too long. */
 617:./freeRTOS/GCC/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 618:./freeRTOS/GCC/port.c **** 				{
 619:./freeRTOS/GCC/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 620:./freeRTOS/GCC/port.c **** 				}
 621:./freeRTOS/GCC/port.c **** 
 622:./freeRTOS/GCC/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 623:./freeRTOS/GCC/port.c **** 
 624:./freeRTOS/GCC/port.c **** 				/* The tick interrupt handler will already have pended the tick
 625:./freeRTOS/GCC/port.c **** 				processing in the kernel.  As the pending tick will be
 626:./freeRTOS/GCC/port.c **** 				processed as soon as this function exits, the tick value
 627:./freeRTOS/GCC/port.c **** 				maintained by the tick is stepped forward by one less than the
 628:./freeRTOS/GCC/port.c **** 				time spent waiting. */
 629:./freeRTOS/GCC/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
ARM GAS  /tmp/ccBm2bSm.s 			page 18


 630:./freeRTOS/GCC/port.c **** 			}
 631:./freeRTOS/GCC/port.c **** 			else
 632:./freeRTOS/GCC/port.c **** 			{
 633:./freeRTOS/GCC/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 634:./freeRTOS/GCC/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 635:./freeRTOS/GCC/port.c **** 				periods (not the ulReload value which accounted for part
 636:./freeRTOS/GCC/port.c **** 				ticks). */
 637:./freeRTOS/GCC/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 638:./freeRTOS/GCC/port.c **** 
 639:./freeRTOS/GCC/port.c **** 				/* How many complete tick periods passed while the processor
 640:./freeRTOS/GCC/port.c **** 				was waiting? */
 641:./freeRTOS/GCC/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 642:./freeRTOS/GCC/port.c **** 
 643:./freeRTOS/GCC/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 644:./freeRTOS/GCC/port.c **** 				period remains. */
 645:./freeRTOS/GCC/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 646:./freeRTOS/GCC/port.c **** 			}
 647:./freeRTOS/GCC/port.c **** 
 648:./freeRTOS/GCC/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 649:./freeRTOS/GCC/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 650:./freeRTOS/GCC/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 651:./freeRTOS/GCC/port.c **** 			can only execute once in the case that the reload register is near
 652:./freeRTOS/GCC/port.c **** 			zero. */
 653:./freeRTOS/GCC/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 654:./freeRTOS/GCC/port.c **** 			portENTER_CRITICAL();
 655:./freeRTOS/GCC/port.c **** 			{
 656:./freeRTOS/GCC/port.c **** 				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 657:./freeRTOS/GCC/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 658:./freeRTOS/GCC/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 659:./freeRTOS/GCC/port.c **** 			}
 660:./freeRTOS/GCC/port.c **** 			portEXIT_CRITICAL();
 661:./freeRTOS/GCC/port.c **** 		}
 662:./freeRTOS/GCC/port.c **** 	}
 663:./freeRTOS/GCC/port.c **** 
 664:./freeRTOS/GCC/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 665:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 666:./freeRTOS/GCC/port.c **** 
 667:./freeRTOS/GCC/port.c **** /*
 668:./freeRTOS/GCC/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 669:./freeRTOS/GCC/port.c ****  * frequency.
 670:./freeRTOS/GCC/port.c ****  */
 671:./freeRTOS/GCC/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 672:./freeRTOS/GCC/port.c **** {
 673:./freeRTOS/GCC/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 674:./freeRTOS/GCC/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 675:./freeRTOS/GCC/port.c **** 	{
 676:./freeRTOS/GCC/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 677:./freeRTOS/GCC/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 678:./freeRTOS/GCC/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 679:./freeRTOS/GCC/port.c **** 	}
 680:./freeRTOS/GCC/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 681:./freeRTOS/GCC/port.c **** 
 682:./freeRTOS/GCC/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 683:./freeRTOS/GCC/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 684:./freeRTOS/GCC/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 685:./freeRTOS/GCC/port.c **** }
 686:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccBm2bSm.s 			page 19


 687:./freeRTOS/GCC/port.c **** 
 688:./freeRTOS/GCC/port.c **** /* This is a naked function. */
 689:./freeRTOS/GCC/port.c **** static void vPortEnableVFP( void )
 690:./freeRTOS/GCC/port.c **** {
 109              		.loc 1 690 1 is_stmt 1 view -0
 110              		.cfi_startproc
 111              		@ Naked Function: prologue and epilogue provided by programmer.
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 691:./freeRTOS/GCC/port.c **** 	__asm volatile
 114              		.loc 1 691 2 view .LVU14
 115              		.syntax unified
 116              	@ 691 "./freeRTOS/GCC/port.c" 1
 117 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 118 0004 0168     		ldr r1, [r0]				
 119              									
 120 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 121 000a 0160     		str r1, [r0]				
 122 000c 7047     		bx r14						
 123              	@ 0 "" 2
 692:./freeRTOS/GCC/port.c **** 	(
 693:./freeRTOS/GCC/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 694:./freeRTOS/GCC/port.c **** 		"	ldr r1, [r0]				\n"
 695:./freeRTOS/GCC/port.c **** 		"								\n"
 696:./freeRTOS/GCC/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 697:./freeRTOS/GCC/port.c **** 		"	str r1, [r0]				\n"
 698:./freeRTOS/GCC/port.c **** 		"	bx r14						"
 699:./freeRTOS/GCC/port.c **** 	);
 700:./freeRTOS/GCC/port.c **** }
 124              		.loc 1 700 1 is_stmt 0 view .LVU15
 125              		.thumb
 126              		.syntax unified
 127              		.cfi_endproc
 128              	.LFE16:
 130 000e 0000     		.section	.text.pxPortInitialiseStack,"ax",%progbits
 131              		.align	1
 132              		.global	pxPortInitialiseStack
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 136              		.fpu fpv4-sp-d16
 138              	pxPortInitialiseStack:
 139              	.LVL1:
 140              	.LFB5:
 230:./freeRTOS/GCC/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 141              		.loc 1 230 1 is_stmt 1 view -0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 236:./freeRTOS/GCC/port.c **** 
 146              		.loc 1 236 2 view .LVU17
 238:./freeRTOS/GCC/port.c **** 	pxTopOfStack--;
 147              		.loc 1 238 2 view .LVU18
 238:./freeRTOS/GCC/port.c **** 	pxTopOfStack--;
 148              		.loc 1 238 16 is_stmt 0 view .LVU19
 149 0000 4FF08073 		mov	r3, #16777216
ARM GAS  /tmp/ccBm2bSm.s 			page 20


 150 0004 40F8043C 		str	r3, [r0, #-4]
 239:./freeRTOS/GCC/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 151              		.loc 1 239 2 is_stmt 1 view .LVU20
 152              	.LVL2:
 240:./freeRTOS/GCC/port.c **** 	pxTopOfStack--;
 153              		.loc 1 240 2 view .LVU21
 240:./freeRTOS/GCC/port.c **** 	pxTopOfStack--;
 154              		.loc 1 240 45 is_stmt 0 view .LVU22
 155 0008 21F00101 		bic	r1, r1, #1
 156              	.LVL3:
 240:./freeRTOS/GCC/port.c **** 	pxTopOfStack--;
 157              		.loc 1 240 16 view .LVU23
 158 000c 40F8081C 		str	r1, [r0, #-8]
 241:./freeRTOS/GCC/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 159              		.loc 1 241 2 is_stmt 1 view .LVU24
 160              	.LVL4:
 242:./freeRTOS/GCC/port.c **** 
 161              		.loc 1 242 2 view .LVU25
 242:./freeRTOS/GCC/port.c **** 
 162              		.loc 1 242 18 is_stmt 0 view .LVU26
 163 0010 054B     		ldr	r3, .L6
 242:./freeRTOS/GCC/port.c **** 
 164              		.loc 1 242 16 view .LVU27
 165 0012 40F80C3C 		str	r3, [r0, #-12]
 245:./freeRTOS/GCC/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 166              		.loc 1 245 2 is_stmt 1 view .LVU28
 167              	.LVL5:
 246:./freeRTOS/GCC/port.c **** 
 168              		.loc 1 246 2 view .LVU29
 246:./freeRTOS/GCC/port.c **** 
 169              		.loc 1 246 16 is_stmt 0 view .LVU30
 170 0016 40F8202C 		str	r2, [r0, #-32]
 250:./freeRTOS/GCC/port.c **** 	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 171              		.loc 1 250 2 is_stmt 1 view .LVU31
 172              	.LVL6:
 251:./freeRTOS/GCC/port.c **** 
 173              		.loc 1 251 2 view .LVU32
 251:./freeRTOS/GCC/port.c **** 
 174              		.loc 1 251 16 is_stmt 0 view .LVU33
 175 001a 6FF00203 		mvn	r3, #2
 176 001e 40F8243C 		str	r3, [r0, #-36]
 253:./freeRTOS/GCC/port.c **** 
 177              		.loc 1 253 2 is_stmt 1 view .LVU34
 178              	.LVL7:
 255:./freeRTOS/GCC/port.c **** }
 179              		.loc 1 255 2 view .LVU35
 256:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 180              		.loc 1 256 1 is_stmt 0 view .LVU36
 181 0022 4438     		subs	r0, r0, #68
 182              	.LVL8:
 256:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 183              		.loc 1 256 1 view .LVU37
 184 0024 7047     		bx	lr
 185              	.L7:
 186 0026 00BF     		.align	2
 187              	.L6:
 188 0028 00000000 		.word	prvTaskExitError
ARM GAS  /tmp/ccBm2bSm.s 			page 21


 189              		.cfi_endproc
 190              	.LFE5:
 192              		.section	.text.SVC_Handler,"ax",%progbits
 193              		.align	1
 194              		.global	SVC_Handler
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 198              		.fpu fpv4-sp-d16
 200              	SVC_Handler:
 201              	.LFB7:
 274:./freeRTOS/GCC/port.c **** 	__asm volatile (
 202              		.loc 1 274 1 is_stmt 1 view -0
 203              		.cfi_startproc
 204              		@ Naked Function: prologue and epilogue provided by programmer.
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 275:./freeRTOS/GCC/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 207              		.loc 1 275 2 view .LVU39
 208              		.syntax unified
 209              	@ 275 "./freeRTOS/GCC/port.c" 1
 210 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 211 0002 1968     		ldr r1, [r3]					
 212 0004 0868     		ldr r0, [r1]					
 213 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 214 000a 80F30988 		msr psp, r0						
 215 000e BFF36F8F 		isb								
 216 0012 4FF00000 		mov r0, #0 						
 217 0016 80F31188 		msr	basepri, r0					
 218 001a 7047     		bx r14							
 219              										
 220 001c AFF30080 		.align 4						
 221 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 222              	
 223              	@ 0 "" 2
 289:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 224              		.loc 1 289 1 is_stmt 0 view .LVU40
 225              		.thumb
 226              		.syntax unified
 227              		.cfi_endproc
 228              	.LFE7:
 230              		.section	.text.vPortEndScheduler,"ax",%progbits
 231              		.align	1
 232              		.global	vPortEndScheduler
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu fpv4-sp-d16
 238              	vPortEndScheduler:
 239              	.LFB10:
 400:./freeRTOS/GCC/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 240              		.loc 1 400 1 is_stmt 1 view -0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 403:./freeRTOS/GCC/port.c **** }
ARM GAS  /tmp/ccBm2bSm.s 			page 22


 245              		.loc 1 403 45 view .LVU42
 404:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 246              		.loc 1 404 1 is_stmt 0 view .LVU43
 247 0000 7047     		bx	lr
 248              		.cfi_endproc
 249              	.LFE10:
 251              		.section	.text.vPortEnterCritical,"ax",%progbits
 252              		.align	1
 253              		.global	vPortEnterCritical
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv4-sp-d16
 259              	vPortEnterCritical:
 260              	.LFB11:
 408:./freeRTOS/GCC/port.c **** 	portDISABLE_INTERRUPTS();
 261              		.loc 1 408 1 is_stmt 1 view -0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265              		@ link register save eliminated.
 409:./freeRTOS/GCC/port.c **** 	uxCriticalNesting++;
 266              		.loc 1 409 2 view .LVU45
 267              	.LBB14:
 268              	.LBI14:
 233:freeRTOS/GCC/portmacro.h **** {
 269              		.loc 2 233 30 view .LVU46
 270              	.LBB15:
 235:freeRTOS/GCC/portmacro.h **** 
 271              		.loc 2 235 1 view .LVU47
 272              		.loc 2 237 2 view .LVU48
 273              		.syntax unified
 274              	@ 237 "freeRTOS/GCC/portmacro.h" 1
 275 0000 4FF0BF03 			mov r3, #191												
 276 0004 83F31188 		msr basepri, r3											
 277 0008 BFF36F8F 		isb														
 278 000c BFF34F8F 		dsb														
 279              	
 280              	@ 0 "" 2
 281              		.thumb
 282              		.syntax unified
 283              	.LBE15:
 284              	.LBE14:
 410:./freeRTOS/GCC/port.c **** 
 285              		.loc 1 410 2 view .LVU49
 410:./freeRTOS/GCC/port.c **** 
 286              		.loc 1 410 19 is_stmt 0 view .LVU50
 287 0010 024A     		ldr	r2, .L11
 288 0012 1368     		ldr	r3, [r2]
 289 0014 0133     		adds	r3, r3, #1
 290 0016 1360     		str	r3, [r2]
 417:./freeRTOS/GCC/port.c **** 	{
 291              		.loc 1 417 2 is_stmt 1 view .LVU51
 419:./freeRTOS/GCC/port.c **** 	}
 292              		.loc 1 419 71 view .LVU52
 421:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 293              		.loc 1 421 1 is_stmt 0 view .LVU53
ARM GAS  /tmp/ccBm2bSm.s 			page 23


 294 0018 7047     		bx	lr
 295              	.L12:
 296 001a 00BF     		.align	2
 297              	.L11:
 298 001c 00000000 		.word	.LANCHOR0
 299              		.cfi_endproc
 300              	.LFE11:
 302              		.section	.text.vPortExitCritical,"ax",%progbits
 303              		.align	1
 304              		.global	vPortExitCritical
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 308              		.fpu fpv4-sp-d16
 310              	vPortExitCritical:
 311              	.LFB12:
 425:./freeRTOS/GCC/port.c **** 	configASSERT( uxCriticalNesting );
 312              		.loc 1 425 1 is_stmt 1 view -0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              		@ link register save eliminated.
 426:./freeRTOS/GCC/port.c **** 	uxCriticalNesting--;
 317              		.loc 1 426 35 view .LVU55
 427:./freeRTOS/GCC/port.c **** 	if( uxCriticalNesting == 0 )
 318              		.loc 1 427 2 view .LVU56
 427:./freeRTOS/GCC/port.c **** 	if( uxCriticalNesting == 0 )
 319              		.loc 1 427 19 is_stmt 0 view .LVU57
 320 0000 034A     		ldr	r2, .L15
 321 0002 1368     		ldr	r3, [r2]
 322 0004 013B     		subs	r3, r3, #1
 323 0006 1360     		str	r3, [r2]
 428:./freeRTOS/GCC/port.c **** 	{
 324              		.loc 1 428 2 is_stmt 1 view .LVU58
 428:./freeRTOS/GCC/port.c **** 	{
 325              		.loc 1 428 4 is_stmt 0 view .LVU59
 326 0008 0BB9     		cbnz	r3, .L13
 430:./freeRTOS/GCC/port.c **** 	}
 327              		.loc 1 430 3 is_stmt 1 view .LVU60
 328              	.LVL9:
 329              	.LBB16:
 330              	.LBI16:
 238:freeRTOS/GCC/portmacro.h **** 	(
 239:freeRTOS/GCC/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:freeRTOS/GCC/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:freeRTOS/GCC/portmacro.h **** 		"	isb														\n" \
 242:freeRTOS/GCC/portmacro.h **** 		"	dsb														\n" \
 243:freeRTOS/GCC/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:freeRTOS/GCC/portmacro.h **** 	);
 245:freeRTOS/GCC/portmacro.h **** }
 246:freeRTOS/GCC/portmacro.h **** 
 247:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 248:freeRTOS/GCC/portmacro.h **** 
 249:freeRTOS/GCC/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:freeRTOS/GCC/portmacro.h **** {
 251:freeRTOS/GCC/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:freeRTOS/GCC/portmacro.h **** 
ARM GAS  /tmp/ccBm2bSm.s 			page 24


 253:freeRTOS/GCC/portmacro.h **** 	__asm volatile
 254:freeRTOS/GCC/portmacro.h **** 	(
 255:freeRTOS/GCC/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:freeRTOS/GCC/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:freeRTOS/GCC/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:freeRTOS/GCC/portmacro.h **** 		"	isb														\n" \
 259:freeRTOS/GCC/portmacro.h **** 		"	dsb														\n" \
 260:freeRTOS/GCC/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:freeRTOS/GCC/portmacro.h **** 	);
 262:freeRTOS/GCC/portmacro.h **** 
 263:freeRTOS/GCC/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:freeRTOS/GCC/portmacro.h **** 	warnings. */
 265:freeRTOS/GCC/portmacro.h **** 	return ulOriginalBASEPRI;
 266:freeRTOS/GCC/portmacro.h **** }
 267:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 268:freeRTOS/GCC/portmacro.h **** 
 269:freeRTOS/GCC/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 331              		.loc 2 269 30 view .LVU61
 332              	.LBB17:
 270:freeRTOS/GCC/portmacro.h **** {
 271:freeRTOS/GCC/portmacro.h **** 	__asm volatile
 333              		.loc 2 271 2 view .LVU62
 334              		.syntax unified
 335              	@ 271 "freeRTOS/GCC/portmacro.h" 1
 336 000a 83F31188 			msr basepri, r3	
 337              	@ 0 "" 2
 338              	.LVL10:
 339              		.thumb
 340              		.syntax unified
 341              	.L13:
 342              		.loc 2 271 2 is_stmt 0 view .LVU63
 343              	.LBE17:
 344              	.LBE16:
 432:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 345              		.loc 1 432 1 view .LVU64
 346 000e 7047     		bx	lr
 347              	.L16:
 348              		.align	2
 349              	.L15:
 350 0010 00000000 		.word	.LANCHOR0
 351              		.cfi_endproc
 352              	.LFE12:
 354              		.section	.text.PendSV_Handler,"ax",%progbits
 355              		.align	1
 356              		.global	PendSV_Handler
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 360              		.fpu fpv4-sp-d16
 362              	PendSV_Handler:
 363              	.LFB13:
 436:./freeRTOS/GCC/port.c **** 	/* This is a naked function. */
 364              		.loc 1 436 1 is_stmt 1 view -0
 365              		.cfi_startproc
 366              		@ Naked Function: prologue and epilogue provided by programmer.
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBm2bSm.s 			page 25


 439:./freeRTOS/GCC/port.c **** 	(
 369              		.loc 1 439 2 view .LVU66
 370              		.syntax unified
 371              	@ 439 "./freeRTOS/GCC/port.c" 1
 372 0000 EFF30980 			mrs r0, psp							
 373 0004 BFF36F8F 		isb									
 374              											
 375 0008 154B     		ldr	r3, pxCurrentTCBConst			
 376 000a 1A68     		ldr	r2, [r3]						
 377              											
 378 000c 1EF0100F 		tst r14, #0x10						
 379 0010 08BF     		it eq								
 380 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 381              											
 382 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 383              											
 384 001a 1060     		str r0, [r2]						
 385              											
 386 001c 4DF8043D 		stmdb sp!, {r3}						
 387 0020 4FF0BF00 		mov r0, #191 							
 388 0024 80F31188 		msr basepri, r0						
 389 0028 BFF34F8F 		dsb									
 390 002c BFF36F8F 		isb									
 391 0030 FFF7FEFF 		bl vTaskSwitchContext				
 392 0034 4FF00000 		mov r0, #0							
 393 0038 80F31188 		msr basepri, r0						
 394 003c 08BC     		ldmia sp!, {r3}						
 395              											
 396 003e 1968     		ldr r1, [r3]						
 397 0040 0868     		ldr r0, [r1]						
 398              											
 399 0042 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 400              											
 401 0046 1EF0100F 		tst r14, #0x10						
 402 004a 08BF     		it eq								
 403 004c B0EC108A 		vldmiaeq r0!, {s16-s31}				
 404              											
 405 0050 80F30988 		msr psp, r0							
 406 0054 BFF36F8F 		isb									
 407              											
 408              											
 409 0058 7047     		bx r14								
 410              											
 411 005a 00BFAFF3 		.align 4							
 411      0080
 412 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 413              	
 414              	@ 0 "" 2
 490:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 415              		.loc 1 490 1 is_stmt 0 view .LVU67
 416              		.thumb
 417              		.syntax unified
 418              		.cfi_endproc
 419              	.LFE13:
 421              		.section	.text.SysTick_Handler,"ax",%progbits
 422              		.align	1
 423              		.global	SysTick_Handler
ARM GAS  /tmp/ccBm2bSm.s 			page 26


 424              		.syntax unified
 425              		.thumb
 426              		.thumb_func
 427              		.fpu fpv4-sp-d16
 429              	SysTick_Handler:
 430              	.LFB14:
 494:./freeRTOS/GCC/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 431              		.loc 1 494 1 is_stmt 1 view -0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435 0000 08B5     		push	{r3, lr}
 436              	.LCFI0:
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 3, -8
 439              		.cfi_offset 14, -4
 499:./freeRTOS/GCC/port.c **** 	{
 440              		.loc 1 499 2 view .LVU69
 441              	.LBB18:
 442              	.LBI18:
 233:freeRTOS/GCC/portmacro.h **** {
 443              		.loc 2 233 30 view .LVU70
 444              	.LBB19:
 235:freeRTOS/GCC/portmacro.h **** 
 445              		.loc 2 235 1 view .LVU71
 237:freeRTOS/GCC/portmacro.h **** 	(
 446              		.loc 2 237 2 view .LVU72
 447              		.syntax unified
 448              	@ 237 "freeRTOS/GCC/portmacro.h" 1
 449 0002 4FF0BF03 			mov r3, #191												
 450 0006 83F31188 		msr basepri, r3											
 451 000a BFF36F8F 		isb														
 452 000e BFF34F8F 		dsb														
 453              	
 454              	@ 0 "" 2
 455              		.thumb
 456              		.syntax unified
 457              	.LBE19:
 458              	.LBE18:
 502:./freeRTOS/GCC/port.c **** 		{
 459              		.loc 1 502 3 view .LVU73
 502:./freeRTOS/GCC/port.c **** 		{
 460              		.loc 1 502 7 is_stmt 0 view .LVU74
 461 0012 FFF7FEFF 		bl	xTaskIncrementTick
 462              	.LVL11:
 502:./freeRTOS/GCC/port.c **** 		{
 463              		.loc 1 502 5 view .LVU75
 464 0016 28B1     		cbz	r0, .L19
 506:./freeRTOS/GCC/port.c **** 		}
 465              		.loc 1 506 4 is_stmt 1 view .LVU76
 506:./freeRTOS/GCC/port.c **** 		}
 466              		.loc 1 506 26 is_stmt 0 view .LVU77
 467 0018 4FF0E023 		mov	r3, #-536813568
 468 001c 4FF08052 		mov	r2, #268435456
 469 0020 C3F8042D 		str	r2, [r3, #3332]
 470              	.L19:
 509:./freeRTOS/GCC/port.c **** }
ARM GAS  /tmp/ccBm2bSm.s 			page 27


 471              		.loc 1 509 2 is_stmt 1 view .LVU78
 472              	.LVL12:
 473              	.LBB20:
 474              	.LBI20:
 269:freeRTOS/GCC/portmacro.h **** {
 475              		.loc 2 269 30 view .LVU79
 476              	.LBB21:
 477              		.loc 2 271 2 view .LVU80
 478 0024 0023     		movs	r3, #0
 479              		.syntax unified
 480              	@ 271 "freeRTOS/GCC/portmacro.h" 1
 481 0026 83F31188 			msr basepri, r3	
 482              	@ 0 "" 2
 483              	.LVL13:
 484              		.loc 2 271 2 is_stmt 0 view .LVU81
 485              		.thumb
 486              		.syntax unified
 487              	.LBE21:
 488              	.LBE20:
 510:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 489              		.loc 1 510 1 view .LVU82
 490 002a 08BD     		pop	{r3, pc}
 491              		.cfi_endproc
 492              	.LFE14:
 494              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 495              		.align	1
 496              		.weak	vPortSetupTimerInterrupt
 497              		.syntax unified
 498              		.thumb
 499              		.thumb_func
 500              		.fpu fpv4-sp-d16
 502              	vPortSetupTimerInterrupt:
 503              	.LFB15:
 672:./freeRTOS/GCC/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 504              		.loc 1 672 1 is_stmt 1 view -0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 0
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 508              		@ link register save eliminated.
 683:./freeRTOS/GCC/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 509              		.loc 1 683 2 view .LVU84
 683:./freeRTOS/GCC/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 510              		.loc 1 683 28 is_stmt 0 view .LVU85
 511 0000 4FF0E023 		mov	r3, #-536813568
 512 0004 024A     		ldr	r2, .L22
 513 0006 5A61     		str	r2, [r3, #20]
 684:./freeRTOS/GCC/port.c **** }
 514              		.loc 1 684 2 is_stmt 1 view .LVU86
 684:./freeRTOS/GCC/port.c **** }
 515              		.loc 1 684 28 is_stmt 0 view .LVU87
 516 0008 0722     		movs	r2, #7
 517 000a 1A61     		str	r2, [r3, #16]
 685:./freeRTOS/GCC/port.c **** /*-----------------------------------------------------------*/
 518              		.loc 1 685 1 view .LVU88
 519 000c 7047     		bx	lr
 520              	.L23:
 521 000e 00BF     		.align	2
ARM GAS  /tmp/ccBm2bSm.s 			page 28


 522              	.L22:
 523 0010 BFD40100 		.word	119999
 524              		.cfi_endproc
 525              	.LFE15:
 527              		.section	.text.xPortStartScheduler,"ax",%progbits
 528              		.align	1
 529              		.global	xPortStartScheduler
 530              		.syntax unified
 531              		.thumb
 532              		.thumb_func
 533              		.fpu fpv4-sp-d16
 535              	xPortStartScheduler:
 536              	.LFB9:
 313:./freeRTOS/GCC/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 537              		.loc 1 313 1 is_stmt 1 view -0
 538              		.cfi_startproc
 539              		@ Volatile: function does not return.
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542 0000 08B5     		push	{r3, lr}
 543              	.LCFI1:
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 3, -8
 546              		.cfi_offset 14, -4
 316:./freeRTOS/GCC/port.c **** 
 547              		.loc 1 316 54 view .LVU90
 321:./freeRTOS/GCC/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 548              		.loc 1 321 52 view .LVU91
 322:./freeRTOS/GCC/port.c **** 
 549              		.loc 1 322 52 view .LVU92
 369:./freeRTOS/GCC/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 550              		.loc 1 369 2 view .LVU93
 369:./freeRTOS/GCC/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 551              		.loc 1 369 23 is_stmt 0 view .LVU94
 552 0002 4FF0E024 		mov	r4, #-536813568
 553 0006 D4F8203D 		ldr	r3, [r4, #3360]
 554 000a 43F47F03 		orr	r3, r3, #16711680
 555 000e C4F8203D 		str	r3, [r4, #3360]
 370:./freeRTOS/GCC/port.c **** 
 556              		.loc 1 370 2 is_stmt 1 view .LVU95
 370:./freeRTOS/GCC/port.c **** 
 557              		.loc 1 370 23 is_stmt 0 view .LVU96
 558 0012 D4F8203D 		ldr	r3, [r4, #3360]
 559 0016 43F07F43 		orr	r3, r3, #-16777216
 560 001a C4F8203D 		str	r3, [r4, #3360]
 374:./freeRTOS/GCC/port.c **** 
 561              		.loc 1 374 2 is_stmt 1 view .LVU97
 562 001e FFF7FEFF 		bl	vPortSetupTimerInterrupt
 563              	.LVL14:
 377:./freeRTOS/GCC/port.c **** 
 564              		.loc 1 377 2 view .LVU98
 377:./freeRTOS/GCC/port.c **** 
 565              		.loc 1 377 20 is_stmt 0 view .LVU99
 566 0022 074B     		ldr	r3, .L26
 567 0024 0022     		movs	r2, #0
 568 0026 1A60     		str	r2, [r3]
 380:./freeRTOS/GCC/port.c **** 
ARM GAS  /tmp/ccBm2bSm.s 			page 29


 569              		.loc 1 380 2 is_stmt 1 view .LVU100
 570 0028 FFF7FEFF 		bl	vPortEnableVFP
 571              	.LVL15:
 383:./freeRTOS/GCC/port.c **** 
 572              		.loc 1 383 2 view .LVU101
 383:./freeRTOS/GCC/port.c **** 
 573              		.loc 1 383 17 is_stmt 0 view .LVU102
 574 002c D4F8343F 		ldr	r3, [r4, #3892]
 575 0030 43F04043 		orr	r3, r3, #-1073741824
 576 0034 C4F8343F 		str	r3, [r4, #3892]
 386:./freeRTOS/GCC/port.c **** 
 577              		.loc 1 386 2 is_stmt 1 view .LVU103
 578 0038 FFF7FEFF 		bl	prvPortStartFirstTask
 579              	.LVL16:
 392:./freeRTOS/GCC/port.c **** 
 580              		.loc 1 392 2 view .LVU104
 581 003c FFF7FEFF 		bl	prvTaskExitError
 582              	.LVL17:
 583              	.L27:
 584              		.align	2
 585              	.L26:
 586 0040 00000000 		.word	.LANCHOR0
 587              		.cfi_endproc
 588              	.LFE9:
 590              		.section	.data.uxCriticalNesting,"aw"
 591              		.align	2
 592              		.set	.LANCHOR0,. + 0
 595              	uxCriticalNesting:
 596 0000 AAAAAAAA 		.word	-1431655766
 597              		.text
 598              	.Letext0:
 599              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 600              		.file 4 "freeRTOS/include/projdefs.h"
 601              		.file 5 "freeRTOS/include/task.h"
ARM GAS  /tmp/ccBm2bSm.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
     /tmp/ccBm2bSm.s:18     .text.prvTaskExitError:0000000000000000 $t
     /tmp/ccBm2bSm.s:25     .text.prvTaskExitError:0000000000000000 prvTaskExitError
     /tmp/ccBm2bSm.s:66     .text.prvPortStartFirstTask:0000000000000000 $t
     /tmp/ccBm2bSm.s:72     .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
     /tmp/ccBm2bSm.s:101    .text.vPortEnableVFP:0000000000000000 $t
     /tmp/ccBm2bSm.s:107    .text.vPortEnableVFP:0000000000000000 vPortEnableVFP
     /tmp/ccBm2bSm.s:131    .text.pxPortInitialiseStack:0000000000000000 $t
     /tmp/ccBm2bSm.s:138    .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
     /tmp/ccBm2bSm.s:188    .text.pxPortInitialiseStack:0000000000000028 $d
     /tmp/ccBm2bSm.s:193    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccBm2bSm.s:200    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccBm2bSm.s:221    .text.SVC_Handler:0000000000000020 pxCurrentTCBConst2
     /tmp/ccBm2bSm.s:221    .text.SVC_Handler:0000000000000020 $d
     /tmp/ccBm2bSm.s:231    .text.vPortEndScheduler:0000000000000000 $t
     /tmp/ccBm2bSm.s:238    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
     /tmp/ccBm2bSm.s:252    .text.vPortEnterCritical:0000000000000000 $t
     /tmp/ccBm2bSm.s:259    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
     /tmp/ccBm2bSm.s:298    .text.vPortEnterCritical:000000000000001c $d
     /tmp/ccBm2bSm.s:303    .text.vPortExitCritical:0000000000000000 $t
     /tmp/ccBm2bSm.s:310    .text.vPortExitCritical:0000000000000000 vPortExitCritical
     /tmp/ccBm2bSm.s:350    .text.vPortExitCritical:0000000000000010 $d
     /tmp/ccBm2bSm.s:355    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccBm2bSm.s:362    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccBm2bSm.s:412    .text.PendSV_Handler:0000000000000060 pxCurrentTCBConst
     /tmp/ccBm2bSm.s:412    .text.PendSV_Handler:0000000000000060 $d
     /tmp/ccBm2bSm.s:422    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccBm2bSm.s:429    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccBm2bSm.s:495    .text.vPortSetupTimerInterrupt:0000000000000000 $t
     /tmp/ccBm2bSm.s:502    .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
     /tmp/ccBm2bSm.s:523    .text.vPortSetupTimerInterrupt:0000000000000010 $d
     /tmp/ccBm2bSm.s:528    .text.xPortStartScheduler:0000000000000000 $t
     /tmp/ccBm2bSm.s:535    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
     /tmp/ccBm2bSm.s:586    .text.xPortStartScheduler:0000000000000040 $d
     /tmp/ccBm2bSm.s:591    .data.uxCriticalNesting:0000000000000000 $d
     /tmp/ccBm2bSm.s:595    .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
     /tmp/ccBm2bSm.s:130    .text.vPortEnableVFP:000000000000000e $d
     /tmp/ccBm2bSm.s:1803   .text.vPortEnableVFP:0000000000000010 $d
     /tmp/ccBm2bSm.s:100    .text.prvPortStartFirstTask:000000000000001a $d
     /tmp/ccBm2bSm.s:1803   .text.prvPortStartFirstTask:000000000000001c $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
