ARM GAS  /tmp/ccxxKxzb.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvIsQueueFull,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvIsQueueFull:
  26              	.LVL0:
  27              	.LFB26:
  28              		.file 1 "./freeRTOS/queue.c"
   1:./freeRTOS/queue.c **** /*
   2:./freeRTOS/queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:./freeRTOS/queue.c ****     All rights reserved
   4:./freeRTOS/queue.c **** 
   5:./freeRTOS/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:./freeRTOS/queue.c **** 
   7:./freeRTOS/queue.c ****     This file is part of the FreeRTOS distribution.
   8:./freeRTOS/queue.c **** 
   9:./freeRTOS/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:./freeRTOS/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:./freeRTOS/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:./freeRTOS/queue.c **** 
  13:./freeRTOS/queue.c ****     ***************************************************************************
  14:./freeRTOS/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:./freeRTOS/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:./freeRTOS/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:./freeRTOS/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:./freeRTOS/queue.c ****     ***************************************************************************
  19:./freeRTOS/queue.c **** 
  20:./freeRTOS/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:./freeRTOS/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:./freeRTOS/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:./freeRTOS/queue.c ****     link: http://www.freertos.org/a00114.html
  24:./freeRTOS/queue.c **** 
  25:./freeRTOS/queue.c ****     ***************************************************************************
  26:./freeRTOS/queue.c ****      *                                                                       *
  27:./freeRTOS/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:./freeRTOS/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:./freeRTOS/queue.c ****      *    platform software that is more than just the market leader, it     *
  30:./freeRTOS/queue.c ****      *    is the industry's de facto standard.                               *
ARM GAS  /tmp/ccxxKxzb.s 			page 2


  31:./freeRTOS/queue.c ****      *                                                                       *
  32:./freeRTOS/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:./freeRTOS/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:./freeRTOS/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:./freeRTOS/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:./freeRTOS/queue.c ****      *                                                                       *
  37:./freeRTOS/queue.c ****     ***************************************************************************
  38:./freeRTOS/queue.c **** 
  39:./freeRTOS/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:./freeRTOS/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:./freeRTOS/queue.c ****     defined configASSERT()?
  42:./freeRTOS/queue.c **** 
  43:./freeRTOS/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:./freeRTOS/queue.c ****     embedded software for free we request you assist our global community by
  45:./freeRTOS/queue.c ****     participating in the support forum.
  46:./freeRTOS/queue.c **** 
  47:./freeRTOS/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:./freeRTOS/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:./freeRTOS/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:./freeRTOS/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:./freeRTOS/queue.c **** 
  52:./freeRTOS/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:./freeRTOS/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:./freeRTOS/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:./freeRTOS/queue.c **** 
  56:./freeRTOS/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:./freeRTOS/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:./freeRTOS/queue.c **** 
  59:./freeRTOS/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:./freeRTOS/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:./freeRTOS/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:./freeRTOS/queue.c **** 
  63:./freeRTOS/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:./freeRTOS/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:./freeRTOS/queue.c ****     mission critical applications that require provable dependability.
  66:./freeRTOS/queue.c **** 
  67:./freeRTOS/queue.c ****     1 tab == 4 spaces!
  68:./freeRTOS/queue.c **** */
  69:./freeRTOS/queue.c **** 
  70:./freeRTOS/queue.c **** #include <stdlib.h>
  71:./freeRTOS/queue.c **** #include <string.h>
  72:./freeRTOS/queue.c **** 
  73:./freeRTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:./freeRTOS/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:./freeRTOS/queue.c **** task.h is included from an application file. */
  76:./freeRTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:./freeRTOS/queue.c **** 
  78:./freeRTOS/queue.c **** #include "FreeRTOS.h"
  79:./freeRTOS/queue.c **** #include "task.h"
  80:./freeRTOS/queue.c **** #include "queue.h"
  81:./freeRTOS/queue.c **** 
  82:./freeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:./freeRTOS/queue.c **** 	#include "croutine.h"
  84:./freeRTOS/queue.c **** #endif
  85:./freeRTOS/queue.c **** 
  86:./freeRTOS/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:./freeRTOS/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
ARM GAS  /tmp/ccxxKxzb.s 			page 3


  88:./freeRTOS/queue.c **** header files above, but not in this file, in order to generate the correct
  89:./freeRTOS/queue.c **** privileged Vs unprivileged linkage and placement. */
  90:./freeRTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:./freeRTOS/queue.c **** 
  92:./freeRTOS/queue.c **** 
  93:./freeRTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  94:./freeRTOS/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  95:./freeRTOS/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  96:./freeRTOS/queue.c **** 
  97:./freeRTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:./freeRTOS/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:./freeRTOS/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:./freeRTOS/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:./freeRTOS/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:./freeRTOS/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:./freeRTOS/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:./freeRTOS/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:./freeRTOS/queue.c **** against the coding standard (although an exception to the standard has been
 106:./freeRTOS/queue.c **** permitted where the dual use also significantly changes the type of the
 107:./freeRTOS/queue.c **** structure member). */
 108:./freeRTOS/queue.c **** #define pxMutexHolder					pcTail
 109:./freeRTOS/queue.c **** #define uxQueueType						pcHead
 110:./freeRTOS/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:./freeRTOS/queue.c **** 
 112:./freeRTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:./freeRTOS/queue.c **** zero. */
 114:./freeRTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:./freeRTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:./freeRTOS/queue.c **** 
 117:./freeRTOS/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:./freeRTOS/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:./freeRTOS/queue.c **** 	performed just because a higher priority task has been woken. */
 120:./freeRTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:./freeRTOS/queue.c **** #else
 122:./freeRTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:./freeRTOS/queue.c **** #endif
 124:./freeRTOS/queue.c **** 
 125:./freeRTOS/queue.c **** /*
 126:./freeRTOS/queue.c ****  * Definition of the queue used by the scheduler.
 127:./freeRTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:./freeRTOS/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:./freeRTOS/queue.c ****  */
 130:./freeRTOS/queue.c **** typedef struct QueueDefinition
 131:./freeRTOS/queue.c **** {
 132:./freeRTOS/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:./freeRTOS/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:./freeRTOS/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:./freeRTOS/queue.c **** 
 136:./freeRTOS/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:./freeRTOS/queue.c **** 	{
 138:./freeRTOS/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:./freeRTOS/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:./freeRTOS/queue.c **** 	} u;
 141:./freeRTOS/queue.c **** 
 142:./freeRTOS/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:./freeRTOS/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 144:./freeRTOS/queue.c **** 
ARM GAS  /tmp/ccxxKxzb.s 			page 4


 145:./freeRTOS/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:./freeRTOS/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 147:./freeRTOS/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:./freeRTOS/queue.c **** 
 149:./freeRTOS/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 150:./freeRTOS/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 151:./freeRTOS/queue.c **** 
 152:./freeRTOS/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 153:./freeRTOS/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 154:./freeRTOS/queue.c **** 	#endif
 155:./freeRTOS/queue.c **** 
 156:./freeRTOS/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 157:./freeRTOS/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 158:./freeRTOS/queue.c **** 	#endif
 159:./freeRTOS/queue.c **** 
 160:./freeRTOS/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 161:./freeRTOS/queue.c **** 		UBaseType_t uxQueueNumber;
 162:./freeRTOS/queue.c **** 		uint8_t ucQueueType;
 163:./freeRTOS/queue.c **** 	#endif
 164:./freeRTOS/queue.c **** 
 165:./freeRTOS/queue.c **** } xQUEUE;
 166:./freeRTOS/queue.c **** 
 167:./freeRTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 168:./freeRTOS/queue.c **** name below to enable the use of older kernel aware debuggers. */
 169:./freeRTOS/queue.c **** typedef xQUEUE Queue_t;
 170:./freeRTOS/queue.c **** 
 171:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 172:./freeRTOS/queue.c **** 
 173:./freeRTOS/queue.c **** /*
 174:./freeRTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 175:./freeRTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 176:./freeRTOS/queue.c ****  */
 177:./freeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 178:./freeRTOS/queue.c **** 
 179:./freeRTOS/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 180:./freeRTOS/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 181:./freeRTOS/queue.c **** 	more user friendly. */
 182:./freeRTOS/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 183:./freeRTOS/queue.c **** 	{
 184:./freeRTOS/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 185:./freeRTOS/queue.c **** 		QueueHandle_t xHandle;
 186:./freeRTOS/queue.c **** 	} xQueueRegistryItem;
 187:./freeRTOS/queue.c **** 
 188:./freeRTOS/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 189:./freeRTOS/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 190:./freeRTOS/queue.c **** 	debuggers. */
 191:./freeRTOS/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 192:./freeRTOS/queue.c **** 
 193:./freeRTOS/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 194:./freeRTOS/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 195:./freeRTOS/queue.c **** 	array position being vacant. */
 196:./freeRTOS/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 197:./freeRTOS/queue.c **** 
 198:./freeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 199:./freeRTOS/queue.c **** 
 200:./freeRTOS/queue.c **** /*
 201:./freeRTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
ARM GAS  /tmp/ccxxKxzb.s 			page 5


 202:./freeRTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 203:./freeRTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 204:./freeRTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 205:./freeRTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 206:./freeRTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 207:./freeRTOS/queue.c ****  */
 208:./freeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 209:./freeRTOS/queue.c **** 
 210:./freeRTOS/queue.c **** /*
 211:./freeRTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 212:./freeRTOS/queue.c ****  *
 213:./freeRTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 214:./freeRTOS/queue.c ****  */
 215:./freeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 216:./freeRTOS/queue.c **** 
 217:./freeRTOS/queue.c **** /*
 218:./freeRTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 219:./freeRTOS/queue.c ****  *
 220:./freeRTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 221:./freeRTOS/queue.c ****  */
 222:./freeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 223:./freeRTOS/queue.c **** 
 224:./freeRTOS/queue.c **** /*
 225:./freeRTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 226:./freeRTOS/queue.c ****  * back of the queue.
 227:./freeRTOS/queue.c ****  */
 228:./freeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 229:./freeRTOS/queue.c **** 
 230:./freeRTOS/queue.c **** /*
 231:./freeRTOS/queue.c ****  * Copies an item out of a queue.
 232:./freeRTOS/queue.c ****  */
 233:./freeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 234:./freeRTOS/queue.c **** 
 235:./freeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 236:./freeRTOS/queue.c **** 	/*
 237:./freeRTOS/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 238:./freeRTOS/queue.c **** 	 * the queue set that the queue contains data.
 239:./freeRTOS/queue.c **** 	 */
 240:./freeRTOS/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 241:./freeRTOS/queue.c **** #endif
 242:./freeRTOS/queue.c **** 
 243:./freeRTOS/queue.c **** /*
 244:./freeRTOS/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 245:./freeRTOS/queue.c ****  * dynamically to fill in the structure's members.
 246:./freeRTOS/queue.c ****  */
 247:./freeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 248:./freeRTOS/queue.c **** 
 249:./freeRTOS/queue.c **** /*
 250:./freeRTOS/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 251:./freeRTOS/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 252:./freeRTOS/queue.c ****  * as a mutex.
 253:./freeRTOS/queue.c ****  */
 254:./freeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
 255:./freeRTOS/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 256:./freeRTOS/queue.c **** #endif
 257:./freeRTOS/queue.c **** 
 258:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccxxKxzb.s 			page 6


 259:./freeRTOS/queue.c **** 
 260:./freeRTOS/queue.c **** /*
 261:./freeRTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 262:./freeRTOS/queue.c ****  * accessing the queue event lists.
 263:./freeRTOS/queue.c ****  */
 264:./freeRTOS/queue.c **** #define prvLockQueue( pxQueue )								\
 265:./freeRTOS/queue.c **** 	taskENTER_CRITICAL();									\
 266:./freeRTOS/queue.c **** 	{														\
 267:./freeRTOS/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 268:./freeRTOS/queue.c **** 		{													\
 269:./freeRTOS/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 270:./freeRTOS/queue.c **** 		}													\
 271:./freeRTOS/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 272:./freeRTOS/queue.c **** 		{													\
 273:./freeRTOS/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 274:./freeRTOS/queue.c **** 		}													\
 275:./freeRTOS/queue.c **** 	}														\
 276:./freeRTOS/queue.c **** 	taskEXIT_CRITICAL()
 277:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 278:./freeRTOS/queue.c **** 
 279:./freeRTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 280:./freeRTOS/queue.c **** {
 281:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 282:./freeRTOS/queue.c **** 
 283:./freeRTOS/queue.c **** 	configASSERT( pxQueue );
 284:./freeRTOS/queue.c **** 
 285:./freeRTOS/queue.c **** 	taskENTER_CRITICAL();
 286:./freeRTOS/queue.c **** 	{
 287:./freeRTOS/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 288:./freeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 289:./freeRTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 290:./freeRTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 291:./freeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 292:./freeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 293:./freeRTOS/queue.c **** 
 294:./freeRTOS/queue.c **** 		if( xNewQueue == pdFALSE )
 295:./freeRTOS/queue.c **** 		{
 296:./freeRTOS/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:./freeRTOS/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:./freeRTOS/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 299:./freeRTOS/queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:./freeRTOS/queue.c **** 			it will be possible to write to it. */
 301:./freeRTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 302:./freeRTOS/queue.c **** 			{
 303:./freeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 304:./freeRTOS/queue.c **** 				{
 305:./freeRTOS/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 306:./freeRTOS/queue.c **** 				}
 307:./freeRTOS/queue.c **** 				else
 308:./freeRTOS/queue.c **** 				{
 309:./freeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 310:./freeRTOS/queue.c **** 				}
 311:./freeRTOS/queue.c **** 			}
 312:./freeRTOS/queue.c **** 			else
 313:./freeRTOS/queue.c **** 			{
 314:./freeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 315:./freeRTOS/queue.c **** 			}
ARM GAS  /tmp/ccxxKxzb.s 			page 7


 316:./freeRTOS/queue.c **** 		}
 317:./freeRTOS/queue.c **** 		else
 318:./freeRTOS/queue.c **** 		{
 319:./freeRTOS/queue.c **** 			/* Ensure the event queues start in the correct state. */
 320:./freeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 321:./freeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 322:./freeRTOS/queue.c **** 		}
 323:./freeRTOS/queue.c **** 	}
 324:./freeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 325:./freeRTOS/queue.c **** 
 326:./freeRTOS/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 327:./freeRTOS/queue.c **** 	versions. */
 328:./freeRTOS/queue.c **** 	return pdPASS;
 329:./freeRTOS/queue.c **** }
 330:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 331:./freeRTOS/queue.c **** 
 332:./freeRTOS/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 333:./freeRTOS/queue.c **** 
 334:./freeRTOS/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 335:./freeRTOS/queue.c **** 	{
 336:./freeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 337:./freeRTOS/queue.c **** 
 338:./freeRTOS/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 339:./freeRTOS/queue.c **** 
 340:./freeRTOS/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 341:./freeRTOS/queue.c **** 		supplied. */
 342:./freeRTOS/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 343:./freeRTOS/queue.c **** 
 344:./freeRTOS/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 345:./freeRTOS/queue.c **** 		should not be provided if the item size is 0. */
 346:./freeRTOS/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 347:./freeRTOS/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 348:./freeRTOS/queue.c **** 
 349:./freeRTOS/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 350:./freeRTOS/queue.c **** 		{
 351:./freeRTOS/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 352:./freeRTOS/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 353:./freeRTOS/queue.c **** 			the real queue and semaphore structures. */
 354:./freeRTOS/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 355:./freeRTOS/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 356:./freeRTOS/queue.c **** 		}
 357:./freeRTOS/queue.c **** 		#endif /* configASSERT_DEFINED */
 358:./freeRTOS/queue.c **** 
 359:./freeRTOS/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 360:./freeRTOS/queue.c **** 		The address of a statically allocated storage area was also passed in
 361:./freeRTOS/queue.c **** 		but is already set. */
 362:./freeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 363:./freeRTOS/queue.c **** 
 364:./freeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 365:./freeRTOS/queue.c **** 		{
 366:./freeRTOS/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:./freeRTOS/queue.c **** 			{
 368:./freeRTOS/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 369:./freeRTOS/queue.c **** 				note this queue was allocated statically in case the queue is
 370:./freeRTOS/queue.c **** 				later deleted. */
 371:./freeRTOS/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 372:./freeRTOS/queue.c **** 			}
ARM GAS  /tmp/ccxxKxzb.s 			page 8


 373:./freeRTOS/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 374:./freeRTOS/queue.c **** 
 375:./freeRTOS/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 376:./freeRTOS/queue.c **** 		}
 377:./freeRTOS/queue.c **** 
 378:./freeRTOS/queue.c **** 		return pxNewQueue;
 379:./freeRTOS/queue.c **** 	}
 380:./freeRTOS/queue.c **** 
 381:./freeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 382:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 383:./freeRTOS/queue.c **** 
 384:./freeRTOS/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 385:./freeRTOS/queue.c **** 
 386:./freeRTOS/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 387:./freeRTOS/queue.c **** 	{
 388:./freeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 389:./freeRTOS/queue.c **** 	size_t xQueueSizeInBytes;
 390:./freeRTOS/queue.c **** 	uint8_t *pucQueueStorage;
 391:./freeRTOS/queue.c **** 
 392:./freeRTOS/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 393:./freeRTOS/queue.c **** 
 394:./freeRTOS/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 395:./freeRTOS/queue.c **** 		{
 396:./freeRTOS/queue.c **** 			/* There is not going to be a queue storage area. */
 397:./freeRTOS/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 398:./freeRTOS/queue.c **** 		}
 399:./freeRTOS/queue.c **** 		else
 400:./freeRTOS/queue.c **** 		{
 401:./freeRTOS/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 402:./freeRTOS/queue.c **** 			can be in the queue at any time. */
 403:./freeRTOS/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 404:./freeRTOS/queue.c **** 		}
 405:./freeRTOS/queue.c **** 
 406:./freeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 407:./freeRTOS/queue.c **** 
 408:./freeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 409:./freeRTOS/queue.c **** 		{
 410:./freeRTOS/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 411:./freeRTOS/queue.c **** 			storage area. */
 412:./freeRTOS/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 413:./freeRTOS/queue.c **** 
 414:./freeRTOS/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:./freeRTOS/queue.c **** 			{
 416:./freeRTOS/queue.c **** 				/* Queues can be created either statically or dynamically, so
 417:./freeRTOS/queue.c **** 				note this task was created dynamically in case it is later
 418:./freeRTOS/queue.c **** 				deleted. */
 419:./freeRTOS/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 420:./freeRTOS/queue.c **** 			}
 421:./freeRTOS/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 422:./freeRTOS/queue.c **** 
 423:./freeRTOS/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 424:./freeRTOS/queue.c **** 		}
 425:./freeRTOS/queue.c **** 
 426:./freeRTOS/queue.c **** 		return pxNewQueue;
 427:./freeRTOS/queue.c **** 	}
 428:./freeRTOS/queue.c **** 
 429:./freeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
ARM GAS  /tmp/ccxxKxzb.s 			page 9


 430:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 431:./freeRTOS/queue.c **** 
 432:./freeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 433:./freeRTOS/queue.c **** {
 434:./freeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 435:./freeRTOS/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 436:./freeRTOS/queue.c **** 	( void ) ucQueueType;
 437:./freeRTOS/queue.c **** 
 438:./freeRTOS/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 439:./freeRTOS/queue.c **** 	{
 440:./freeRTOS/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 441:./freeRTOS/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 442:./freeRTOS/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 443:./freeRTOS/queue.c **** 		value that is known to be within the memory map. */
 444:./freeRTOS/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 445:./freeRTOS/queue.c **** 	}
 446:./freeRTOS/queue.c **** 	else
 447:./freeRTOS/queue.c **** 	{
 448:./freeRTOS/queue.c **** 		/* Set the head to the start of the queue storage area. */
 449:./freeRTOS/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 450:./freeRTOS/queue.c **** 	}
 451:./freeRTOS/queue.c **** 
 452:./freeRTOS/queue.c **** 	/* Initialise the queue members as described where the queue type is
 453:./freeRTOS/queue.c **** 	defined. */
 454:./freeRTOS/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 455:./freeRTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 456:./freeRTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 457:./freeRTOS/queue.c **** 
 458:./freeRTOS/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 459:./freeRTOS/queue.c **** 	{
 460:./freeRTOS/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 461:./freeRTOS/queue.c **** 	}
 462:./freeRTOS/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 463:./freeRTOS/queue.c **** 
 464:./freeRTOS/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 465:./freeRTOS/queue.c **** 	{
 466:./freeRTOS/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 467:./freeRTOS/queue.c **** 	}
 468:./freeRTOS/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 469:./freeRTOS/queue.c **** 
 470:./freeRTOS/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 471:./freeRTOS/queue.c **** }
 472:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 473:./freeRTOS/queue.c **** 
 474:./freeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
 475:./freeRTOS/queue.c **** 
 476:./freeRTOS/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 477:./freeRTOS/queue.c **** 	{
 478:./freeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 479:./freeRTOS/queue.c **** 		{
 480:./freeRTOS/queue.c **** 			/* The queue create function will set all the queue structure members
 481:./freeRTOS/queue.c **** 			correctly for a generic queue, but this function is creating a
 482:./freeRTOS/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 483:./freeRTOS/queue.c **** 			in particular the information required for priority inheritance. */
 484:./freeRTOS/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 485:./freeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 486:./freeRTOS/queue.c **** 
ARM GAS  /tmp/ccxxKxzb.s 			page 10


 487:./freeRTOS/queue.c **** 			/* In case this is a recursive mutex. */
 488:./freeRTOS/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 489:./freeRTOS/queue.c **** 
 490:./freeRTOS/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 491:./freeRTOS/queue.c **** 
 492:./freeRTOS/queue.c **** 			/* Start with the semaphore in the expected state. */
 493:./freeRTOS/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 494:./freeRTOS/queue.c **** 		}
 495:./freeRTOS/queue.c **** 		else
 496:./freeRTOS/queue.c **** 		{
 497:./freeRTOS/queue.c **** 			traceCREATE_MUTEX_FAILED();
 498:./freeRTOS/queue.c **** 		}
 499:./freeRTOS/queue.c **** 	}
 500:./freeRTOS/queue.c **** 
 501:./freeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 502:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 503:./freeRTOS/queue.c **** 
 504:./freeRTOS/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 505:./freeRTOS/queue.c **** 
 506:./freeRTOS/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 507:./freeRTOS/queue.c **** 	{
 508:./freeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 509:./freeRTOS/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 510:./freeRTOS/queue.c **** 
 511:./freeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 512:./freeRTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 513:./freeRTOS/queue.c **** 
 514:./freeRTOS/queue.c **** 		return pxNewQueue;
 515:./freeRTOS/queue.c **** 	}
 516:./freeRTOS/queue.c **** 
 517:./freeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 518:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 519:./freeRTOS/queue.c **** 
 520:./freeRTOS/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 521:./freeRTOS/queue.c **** 
 522:./freeRTOS/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 523:./freeRTOS/queue.c **** 	{
 524:./freeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 525:./freeRTOS/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:./freeRTOS/queue.c **** 
 527:./freeRTOS/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 528:./freeRTOS/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 529:./freeRTOS/queue.c **** 		( void ) ucQueueType;
 530:./freeRTOS/queue.c **** 
 531:./freeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 532:./freeRTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 533:./freeRTOS/queue.c **** 
 534:./freeRTOS/queue.c **** 		return pxNewQueue;
 535:./freeRTOS/queue.c **** 	}
 536:./freeRTOS/queue.c **** 
 537:./freeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 538:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 539:./freeRTOS/queue.c **** 
 540:./freeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 541:./freeRTOS/queue.c **** 
 542:./freeRTOS/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 543:./freeRTOS/queue.c **** 	{
ARM GAS  /tmp/ccxxKxzb.s 			page 11


 544:./freeRTOS/queue.c **** 	void *pxReturn;
 545:./freeRTOS/queue.c **** 
 546:./freeRTOS/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 547:./freeRTOS/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 548:./freeRTOS/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 549:./freeRTOS/queue.c **** 		identity of the mutex holder, as the holder may change between the
 550:./freeRTOS/queue.c **** 		following critical section exiting and the function returning. */
 551:./freeRTOS/queue.c **** 		taskENTER_CRITICAL();
 552:./freeRTOS/queue.c **** 		{
 553:./freeRTOS/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 554:./freeRTOS/queue.c **** 			{
 555:./freeRTOS/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 556:./freeRTOS/queue.c **** 			}
 557:./freeRTOS/queue.c **** 			else
 558:./freeRTOS/queue.c **** 			{
 559:./freeRTOS/queue.c **** 				pxReturn = NULL;
 560:./freeRTOS/queue.c **** 			}
 561:./freeRTOS/queue.c **** 		}
 562:./freeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 563:./freeRTOS/queue.c **** 
 564:./freeRTOS/queue.c **** 		return pxReturn;
 565:./freeRTOS/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 566:./freeRTOS/queue.c **** 
 567:./freeRTOS/queue.c **** #endif
 568:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 569:./freeRTOS/queue.c **** 
 570:./freeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 571:./freeRTOS/queue.c **** 
 572:./freeRTOS/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 573:./freeRTOS/queue.c **** 	{
 574:./freeRTOS/queue.c **** 	BaseType_t xReturn;
 575:./freeRTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 576:./freeRTOS/queue.c **** 
 577:./freeRTOS/queue.c **** 		configASSERT( pxMutex );
 578:./freeRTOS/queue.c **** 
 579:./freeRTOS/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 580:./freeRTOS/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 581:./freeRTOS/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 582:./freeRTOS/queue.c **** 		this is the only condition we are interested in it does not matter if
 583:./freeRTOS/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 584:./freeRTOS/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 585:./freeRTOS/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 586:./freeRTOS/queue.c **** 		{
 587:./freeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 588:./freeRTOS/queue.c **** 
 589:./freeRTOS/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 590:./freeRTOS/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 591:./freeRTOS/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 592:./freeRTOS/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 593:./freeRTOS/queue.c **** 			uxRecursiveCallCount member. */
 594:./freeRTOS/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 595:./freeRTOS/queue.c **** 
 596:./freeRTOS/queue.c **** 			/* Has the recursive call count unwound to 0? */
 597:./freeRTOS/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 598:./freeRTOS/queue.c **** 			{
 599:./freeRTOS/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 600:./freeRTOS/queue.c **** 				task that might be waiting to access the mutex. */
ARM GAS  /tmp/ccxxKxzb.s 			page 12


 601:./freeRTOS/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 602:./freeRTOS/queue.c **** 			}
 603:./freeRTOS/queue.c **** 			else
 604:./freeRTOS/queue.c **** 			{
 605:./freeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 606:./freeRTOS/queue.c **** 			}
 607:./freeRTOS/queue.c **** 
 608:./freeRTOS/queue.c **** 			xReturn = pdPASS;
 609:./freeRTOS/queue.c **** 		}
 610:./freeRTOS/queue.c **** 		else
 611:./freeRTOS/queue.c **** 		{
 612:./freeRTOS/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 613:./freeRTOS/queue.c **** 			holder. */
 614:./freeRTOS/queue.c **** 			xReturn = pdFAIL;
 615:./freeRTOS/queue.c **** 
 616:./freeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 617:./freeRTOS/queue.c **** 		}
 618:./freeRTOS/queue.c **** 
 619:./freeRTOS/queue.c **** 		return xReturn;
 620:./freeRTOS/queue.c **** 	}
 621:./freeRTOS/queue.c **** 
 622:./freeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 623:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 624:./freeRTOS/queue.c **** 
 625:./freeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 626:./freeRTOS/queue.c **** 
 627:./freeRTOS/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 628:./freeRTOS/queue.c **** 	{
 629:./freeRTOS/queue.c **** 	BaseType_t xReturn;
 630:./freeRTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 631:./freeRTOS/queue.c **** 
 632:./freeRTOS/queue.c **** 		configASSERT( pxMutex );
 633:./freeRTOS/queue.c **** 
 634:./freeRTOS/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 635:./freeRTOS/queue.c **** 		xQueueGiveMutexRecursive(). */
 636:./freeRTOS/queue.c **** 
 637:./freeRTOS/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 638:./freeRTOS/queue.c **** 
 639:./freeRTOS/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 640:./freeRTOS/queue.c **** 		{
 641:./freeRTOS/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 642:./freeRTOS/queue.c **** 			xReturn = pdPASS;
 643:./freeRTOS/queue.c **** 		}
 644:./freeRTOS/queue.c **** 		else
 645:./freeRTOS/queue.c **** 		{
 646:./freeRTOS/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 647:./freeRTOS/queue.c **** 
 648:./freeRTOS/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 649:./freeRTOS/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 650:./freeRTOS/queue.c **** 			before reaching here. */
 651:./freeRTOS/queue.c **** 			if( xReturn != pdFAIL )
 652:./freeRTOS/queue.c **** 			{
 653:./freeRTOS/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 654:./freeRTOS/queue.c **** 			}
 655:./freeRTOS/queue.c **** 			else
 656:./freeRTOS/queue.c **** 			{
 657:./freeRTOS/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
ARM GAS  /tmp/ccxxKxzb.s 			page 13


 658:./freeRTOS/queue.c **** 			}
 659:./freeRTOS/queue.c **** 		}
 660:./freeRTOS/queue.c **** 
 661:./freeRTOS/queue.c **** 		return xReturn;
 662:./freeRTOS/queue.c **** 	}
 663:./freeRTOS/queue.c **** 
 664:./freeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 665:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 666:./freeRTOS/queue.c **** 
 667:./freeRTOS/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 668:./freeRTOS/queue.c **** 
 669:./freeRTOS/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 670:./freeRTOS/queue.c **** 	{
 671:./freeRTOS/queue.c **** 	QueueHandle_t xHandle;
 672:./freeRTOS/queue.c **** 
 673:./freeRTOS/queue.c **** 		configASSERT( uxMaxCount != 0 );
 674:./freeRTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 675:./freeRTOS/queue.c **** 
 676:./freeRTOS/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 677:./freeRTOS/queue.c **** 
 678:./freeRTOS/queue.c **** 		if( xHandle != NULL )
 679:./freeRTOS/queue.c **** 		{
 680:./freeRTOS/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 681:./freeRTOS/queue.c **** 
 682:./freeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 683:./freeRTOS/queue.c **** 		}
 684:./freeRTOS/queue.c **** 		else
 685:./freeRTOS/queue.c **** 		{
 686:./freeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 687:./freeRTOS/queue.c **** 		}
 688:./freeRTOS/queue.c **** 
 689:./freeRTOS/queue.c **** 		return xHandle;
 690:./freeRTOS/queue.c **** 	}
 691:./freeRTOS/queue.c **** 
 692:./freeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 693:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 694:./freeRTOS/queue.c **** 
 695:./freeRTOS/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 696:./freeRTOS/queue.c **** 
 697:./freeRTOS/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 698:./freeRTOS/queue.c **** 	{
 699:./freeRTOS/queue.c **** 	QueueHandle_t xHandle;
 700:./freeRTOS/queue.c **** 
 701:./freeRTOS/queue.c **** 		configASSERT( uxMaxCount != 0 );
 702:./freeRTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 703:./freeRTOS/queue.c **** 
 704:./freeRTOS/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 705:./freeRTOS/queue.c **** 
 706:./freeRTOS/queue.c **** 		if( xHandle != NULL )
 707:./freeRTOS/queue.c **** 		{
 708:./freeRTOS/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 709:./freeRTOS/queue.c **** 
 710:./freeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 711:./freeRTOS/queue.c **** 		}
 712:./freeRTOS/queue.c **** 		else
 713:./freeRTOS/queue.c **** 		{
 714:./freeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
ARM GAS  /tmp/ccxxKxzb.s 			page 14


 715:./freeRTOS/queue.c **** 		}
 716:./freeRTOS/queue.c **** 
 717:./freeRTOS/queue.c **** 		return xHandle;
 718:./freeRTOS/queue.c **** 	}
 719:./freeRTOS/queue.c **** 
 720:./freeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 721:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 722:./freeRTOS/queue.c **** 
 723:./freeRTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 724:./freeRTOS/queue.c **** {
 725:./freeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 726:./freeRTOS/queue.c **** TimeOut_t xTimeOut;
 727:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 728:./freeRTOS/queue.c **** 
 729:./freeRTOS/queue.c **** 	configASSERT( pxQueue );
 730:./freeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 731:./freeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 732:./freeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733:./freeRTOS/queue.c **** 	{
 734:./freeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 735:./freeRTOS/queue.c **** 	}
 736:./freeRTOS/queue.c **** 	#endif
 737:./freeRTOS/queue.c **** 
 738:./freeRTOS/queue.c **** 
 739:./freeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 740:./freeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
 741:./freeRTOS/queue.c **** 	of execution time efficiency. */
 742:./freeRTOS/queue.c **** 	for( ;; )
 743:./freeRTOS/queue.c **** 	{
 744:./freeRTOS/queue.c **** 		taskENTER_CRITICAL();
 745:./freeRTOS/queue.c **** 		{
 746:./freeRTOS/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 747:./freeRTOS/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 748:./freeRTOS/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 749:./freeRTOS/queue.c **** 			queue is full. */
 750:./freeRTOS/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 751:./freeRTOS/queue.c **** 			{
 752:./freeRTOS/queue.c **** 				traceQUEUE_SEND( pxQueue );
 753:./freeRTOS/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 754:./freeRTOS/queue.c **** 
 755:./freeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 756:./freeRTOS/queue.c **** 				{
 757:./freeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 758:./freeRTOS/queue.c **** 					{
 759:./freeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 760:./freeRTOS/queue.c **** 						{
 761:./freeRTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
 762:./freeRTOS/queue.c **** 							to the queue set caused a higher priority task to
 763:./freeRTOS/queue.c **** 							unblock. A context switch is required. */
 764:./freeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 765:./freeRTOS/queue.c **** 						}
 766:./freeRTOS/queue.c **** 						else
 767:./freeRTOS/queue.c **** 						{
 768:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 769:./freeRTOS/queue.c **** 						}
 770:./freeRTOS/queue.c **** 					}
 771:./freeRTOS/queue.c **** 					else
ARM GAS  /tmp/ccxxKxzb.s 			page 15


 772:./freeRTOS/queue.c **** 					{
 773:./freeRTOS/queue.c **** 						/* If there was a task waiting for data to arrive on the
 774:./freeRTOS/queue.c **** 						queue then unblock it now. */
 775:./freeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 776:./freeRTOS/queue.c **** 						{
 777:./freeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 778:./freeRTOS/queue.c **** 							{
 779:./freeRTOS/queue.c **** 								/* The unblocked task has a priority higher than
 780:./freeRTOS/queue.c **** 								our own so yield immediately.  Yes it is ok to
 781:./freeRTOS/queue.c **** 								do this from within the critical section - the
 782:./freeRTOS/queue.c **** 								kernel takes care of that. */
 783:./freeRTOS/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 784:./freeRTOS/queue.c **** 							}
 785:./freeRTOS/queue.c **** 							else
 786:./freeRTOS/queue.c **** 							{
 787:./freeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 788:./freeRTOS/queue.c **** 							}
 789:./freeRTOS/queue.c **** 						}
 790:./freeRTOS/queue.c **** 						else if( xYieldRequired != pdFALSE )
 791:./freeRTOS/queue.c **** 						{
 792:./freeRTOS/queue.c **** 							/* This path is a special case that will only get
 793:./freeRTOS/queue.c **** 							executed if the task was holding multiple mutexes
 794:./freeRTOS/queue.c **** 							and the mutexes were given back in an order that is
 795:./freeRTOS/queue.c **** 							different to that in which they were taken. */
 796:./freeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 797:./freeRTOS/queue.c **** 						}
 798:./freeRTOS/queue.c **** 						else
 799:./freeRTOS/queue.c **** 						{
 800:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 801:./freeRTOS/queue.c **** 						}
 802:./freeRTOS/queue.c **** 					}
 803:./freeRTOS/queue.c **** 				}
 804:./freeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 805:./freeRTOS/queue.c **** 				{
 806:./freeRTOS/queue.c **** 					/* If there was a task waiting for data to arrive on the
 807:./freeRTOS/queue.c **** 					queue then unblock it now. */
 808:./freeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 809:./freeRTOS/queue.c **** 					{
 810:./freeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 811:./freeRTOS/queue.c **** 						{
 812:./freeRTOS/queue.c **** 							/* The unblocked task has a priority higher than
 813:./freeRTOS/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 814:./freeRTOS/queue.c **** 							this from within the critical section - the kernel
 815:./freeRTOS/queue.c **** 							takes care of that. */
 816:./freeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 817:./freeRTOS/queue.c **** 						}
 818:./freeRTOS/queue.c **** 						else
 819:./freeRTOS/queue.c **** 						{
 820:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 821:./freeRTOS/queue.c **** 						}
 822:./freeRTOS/queue.c **** 					}
 823:./freeRTOS/queue.c **** 					else if( xYieldRequired != pdFALSE )
 824:./freeRTOS/queue.c **** 					{
 825:./freeRTOS/queue.c **** 						/* This path is a special case that will only get
 826:./freeRTOS/queue.c **** 						executed if the task was holding multiple mutexes and
 827:./freeRTOS/queue.c **** 						the mutexes were given back in an order that is
 828:./freeRTOS/queue.c **** 						different to that in which they were taken. */
ARM GAS  /tmp/ccxxKxzb.s 			page 16


 829:./freeRTOS/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 830:./freeRTOS/queue.c **** 					}
 831:./freeRTOS/queue.c **** 					else
 832:./freeRTOS/queue.c **** 					{
 833:./freeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 834:./freeRTOS/queue.c **** 					}
 835:./freeRTOS/queue.c **** 				}
 836:./freeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 837:./freeRTOS/queue.c **** 
 838:./freeRTOS/queue.c **** 				taskEXIT_CRITICAL();
 839:./freeRTOS/queue.c **** 				return pdPASS;
 840:./freeRTOS/queue.c **** 			}
 841:./freeRTOS/queue.c **** 			else
 842:./freeRTOS/queue.c **** 			{
 843:./freeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 844:./freeRTOS/queue.c **** 				{
 845:./freeRTOS/queue.c **** 					/* The queue was full and no block time is specified (or
 846:./freeRTOS/queue.c **** 					the block time has expired) so leave now. */
 847:./freeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 848:./freeRTOS/queue.c **** 
 849:./freeRTOS/queue.c **** 					/* Return to the original privilege level before exiting
 850:./freeRTOS/queue.c **** 					the function. */
 851:./freeRTOS/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 852:./freeRTOS/queue.c **** 					return errQUEUE_FULL;
 853:./freeRTOS/queue.c **** 				}
 854:./freeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 855:./freeRTOS/queue.c **** 				{
 856:./freeRTOS/queue.c **** 					/* The queue was full and a block time was specified so
 857:./freeRTOS/queue.c **** 					configure the timeout structure. */
 858:./freeRTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 859:./freeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 860:./freeRTOS/queue.c **** 				}
 861:./freeRTOS/queue.c **** 				else
 862:./freeRTOS/queue.c **** 				{
 863:./freeRTOS/queue.c **** 					/* Entry time was already set. */
 864:./freeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 865:./freeRTOS/queue.c **** 				}
 866:./freeRTOS/queue.c **** 			}
 867:./freeRTOS/queue.c **** 		}
 868:./freeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 869:./freeRTOS/queue.c **** 
 870:./freeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 871:./freeRTOS/queue.c **** 		now the critical section has been exited. */
 872:./freeRTOS/queue.c **** 
 873:./freeRTOS/queue.c **** 		vTaskSuspendAll();
 874:./freeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 875:./freeRTOS/queue.c **** 
 876:./freeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 877:./freeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 878:./freeRTOS/queue.c **** 		{
 879:./freeRTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 880:./freeRTOS/queue.c **** 			{
 881:./freeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 882:./freeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 883:./freeRTOS/queue.c **** 
 884:./freeRTOS/queue.c **** 				/* Unlocking the queue means queue events can effect the
 885:./freeRTOS/queue.c **** 				event list.  It is possible	that interrupts occurring now
ARM GAS  /tmp/ccxxKxzb.s 			page 17


 886:./freeRTOS/queue.c **** 				remove this task from the event	list again - but as the
 887:./freeRTOS/queue.c **** 				scheduler is suspended the task will go onto the pending
 888:./freeRTOS/queue.c **** 				ready last instead of the actual ready list. */
 889:./freeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 890:./freeRTOS/queue.c **** 
 891:./freeRTOS/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 892:./freeRTOS/queue.c **** 				ready list into the ready list - so it is feasible that this
 893:./freeRTOS/queue.c **** 				task is already in a ready list before it yields - in which
 894:./freeRTOS/queue.c **** 				case the yield will not cause a context switch unless there
 895:./freeRTOS/queue.c **** 				is also a higher priority task in the pending ready list. */
 896:./freeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 897:./freeRTOS/queue.c **** 				{
 898:./freeRTOS/queue.c **** 					portYIELD_WITHIN_API();
 899:./freeRTOS/queue.c **** 				}
 900:./freeRTOS/queue.c **** 			}
 901:./freeRTOS/queue.c **** 			else
 902:./freeRTOS/queue.c **** 			{
 903:./freeRTOS/queue.c **** 				/* Try again. */
 904:./freeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 905:./freeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 906:./freeRTOS/queue.c **** 			}
 907:./freeRTOS/queue.c **** 		}
 908:./freeRTOS/queue.c **** 		else
 909:./freeRTOS/queue.c **** 		{
 910:./freeRTOS/queue.c **** 			/* The timeout has expired. */
 911:./freeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
 912:./freeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 913:./freeRTOS/queue.c **** 
 914:./freeRTOS/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 915:./freeRTOS/queue.c **** 			return errQUEUE_FULL;
 916:./freeRTOS/queue.c **** 		}
 917:./freeRTOS/queue.c **** 	}
 918:./freeRTOS/queue.c **** }
 919:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 920:./freeRTOS/queue.c **** 
 921:./freeRTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 922:./freeRTOS/queue.c **** {
 923:./freeRTOS/queue.c **** BaseType_t xReturn;
 924:./freeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
 925:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 926:./freeRTOS/queue.c **** 
 927:./freeRTOS/queue.c **** 	configASSERT( pxQueue );
 928:./freeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 929:./freeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 930:./freeRTOS/queue.c **** 
 931:./freeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 932:./freeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 933:./freeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 934:./freeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 935:./freeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 936:./freeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 937:./freeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 938:./freeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
 939:./freeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 940:./freeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 941:./freeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 942:./freeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
ARM GAS  /tmp/ccxxKxzb.s 			page 18


 943:./freeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 944:./freeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 945:./freeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 946:./freeRTOS/queue.c **** 
 947:./freeRTOS/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 948:./freeRTOS/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 949:./freeRTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 950:./freeRTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 951:./freeRTOS/queue.c **** 	post). */
 952:./freeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 953:./freeRTOS/queue.c **** 	{
 954:./freeRTOS/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 955:./freeRTOS/queue.c **** 		{
 956:./freeRTOS/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 957:./freeRTOS/queue.c **** 
 958:./freeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 959:./freeRTOS/queue.c **** 
 960:./freeRTOS/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 961:./freeRTOS/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 962:./freeRTOS/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 963:./freeRTOS/queue.c **** 			called here even though the disinherit function does not check if
 964:./freeRTOS/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 965:./freeRTOS/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 966:./freeRTOS/queue.c **** 
 967:./freeRTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 968:./freeRTOS/queue.c **** 			be done when the queue is unlocked later. */
 969:./freeRTOS/queue.c **** 			if( cTxLock == queueUNLOCKED )
 970:./freeRTOS/queue.c **** 			{
 971:./freeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 972:./freeRTOS/queue.c **** 				{
 973:./freeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 974:./freeRTOS/queue.c **** 					{
 975:./freeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 976:./freeRTOS/queue.c **** 						{
 977:./freeRTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
 978:./freeRTOS/queue.c **** 							to the queue set caused a higher priority task to
 979:./freeRTOS/queue.c **** 							unblock.  A context switch is required. */
 980:./freeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 981:./freeRTOS/queue.c **** 							{
 982:./freeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 983:./freeRTOS/queue.c **** 							}
 984:./freeRTOS/queue.c **** 							else
 985:./freeRTOS/queue.c **** 							{
 986:./freeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 987:./freeRTOS/queue.c **** 							}
 988:./freeRTOS/queue.c **** 						}
 989:./freeRTOS/queue.c **** 						else
 990:./freeRTOS/queue.c **** 						{
 991:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 992:./freeRTOS/queue.c **** 						}
 993:./freeRTOS/queue.c **** 					}
 994:./freeRTOS/queue.c **** 					else
 995:./freeRTOS/queue.c **** 					{
 996:./freeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 997:./freeRTOS/queue.c **** 						{
 998:./freeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 999:./freeRTOS/queue.c **** 							{
ARM GAS  /tmp/ccxxKxzb.s 			page 19


1000:./freeRTOS/queue.c **** 								/* The task waiting has a higher priority so
1001:./freeRTOS/queue.c **** 								record that a context switch is required. */
1002:./freeRTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1003:./freeRTOS/queue.c **** 								{
1004:./freeRTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1005:./freeRTOS/queue.c **** 								}
1006:./freeRTOS/queue.c **** 								else
1007:./freeRTOS/queue.c **** 								{
1008:./freeRTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1009:./freeRTOS/queue.c **** 								}
1010:./freeRTOS/queue.c **** 							}
1011:./freeRTOS/queue.c **** 							else
1012:./freeRTOS/queue.c **** 							{
1013:./freeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1014:./freeRTOS/queue.c **** 							}
1015:./freeRTOS/queue.c **** 						}
1016:./freeRTOS/queue.c **** 						else
1017:./freeRTOS/queue.c **** 						{
1018:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1019:./freeRTOS/queue.c **** 						}
1020:./freeRTOS/queue.c **** 					}
1021:./freeRTOS/queue.c **** 				}
1022:./freeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1023:./freeRTOS/queue.c **** 				{
1024:./freeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1025:./freeRTOS/queue.c **** 					{
1026:./freeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1027:./freeRTOS/queue.c **** 						{
1028:./freeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1029:./freeRTOS/queue.c **** 							context	switch is required. */
1030:./freeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1031:./freeRTOS/queue.c **** 							{
1032:./freeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1033:./freeRTOS/queue.c **** 							}
1034:./freeRTOS/queue.c **** 							else
1035:./freeRTOS/queue.c **** 							{
1036:./freeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1037:./freeRTOS/queue.c **** 							}
1038:./freeRTOS/queue.c **** 						}
1039:./freeRTOS/queue.c **** 						else
1040:./freeRTOS/queue.c **** 						{
1041:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1042:./freeRTOS/queue.c **** 						}
1043:./freeRTOS/queue.c **** 					}
1044:./freeRTOS/queue.c **** 					else
1045:./freeRTOS/queue.c **** 					{
1046:./freeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1047:./freeRTOS/queue.c **** 					}
1048:./freeRTOS/queue.c **** 				}
1049:./freeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1050:./freeRTOS/queue.c **** 			}
1051:./freeRTOS/queue.c **** 			else
1052:./freeRTOS/queue.c **** 			{
1053:./freeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1054:./freeRTOS/queue.c **** 				knows that data was posted while it was locked. */
1055:./freeRTOS/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1056:./freeRTOS/queue.c **** 			}
ARM GAS  /tmp/ccxxKxzb.s 			page 20


1057:./freeRTOS/queue.c **** 
1058:./freeRTOS/queue.c **** 			xReturn = pdPASS;
1059:./freeRTOS/queue.c **** 		}
1060:./freeRTOS/queue.c **** 		else
1061:./freeRTOS/queue.c **** 		{
1062:./freeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1063:./freeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
1064:./freeRTOS/queue.c **** 		}
1065:./freeRTOS/queue.c **** 	}
1066:./freeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1067:./freeRTOS/queue.c **** 
1068:./freeRTOS/queue.c **** 	return xReturn;
1069:./freeRTOS/queue.c **** }
1070:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1071:./freeRTOS/queue.c **** 
1072:./freeRTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1073:./freeRTOS/queue.c **** {
1074:./freeRTOS/queue.c **** BaseType_t xReturn;
1075:./freeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1076:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1077:./freeRTOS/queue.c **** 
1078:./freeRTOS/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1079:./freeRTOS/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1080:./freeRTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1081:./freeRTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1082:./freeRTOS/queue.c **** 	post). */
1083:./freeRTOS/queue.c **** 
1084:./freeRTOS/queue.c **** 	configASSERT( pxQueue );
1085:./freeRTOS/queue.c **** 
1086:./freeRTOS/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1087:./freeRTOS/queue.c **** 	if the item size is not 0. */
1088:./freeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1089:./freeRTOS/queue.c **** 
1090:./freeRTOS/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1091:./freeRTOS/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1092:./freeRTOS/queue.c **** 	interrupts, only tasks. */
1093:./freeRTOS/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1094:./freeRTOS/queue.c **** 
1095:./freeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1096:./freeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1097:./freeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1098:./freeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1099:./freeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1100:./freeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1101:./freeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1102:./freeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1103:./freeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1104:./freeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1105:./freeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1106:./freeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1107:./freeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1108:./freeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1109:./freeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1110:./freeRTOS/queue.c **** 
1111:./freeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1112:./freeRTOS/queue.c **** 	{
1113:./freeRTOS/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
ARM GAS  /tmp/ccxxKxzb.s 			page 21


1114:./freeRTOS/queue.c **** 
1115:./freeRTOS/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1116:./freeRTOS/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1117:./freeRTOS/queue.c **** 		space'. */
1118:./freeRTOS/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1119:./freeRTOS/queue.c **** 		{
1120:./freeRTOS/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1121:./freeRTOS/queue.c **** 
1122:./freeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1123:./freeRTOS/queue.c **** 
1124:./freeRTOS/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1125:./freeRTOS/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1126:./freeRTOS/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1127:./freeRTOS/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1128:./freeRTOS/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1129:./freeRTOS/queue.c **** 			messages (semaphores) available. */
1130:./freeRTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1131:./freeRTOS/queue.c **** 
1132:./freeRTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1133:./freeRTOS/queue.c **** 			be done when the queue is unlocked later. */
1134:./freeRTOS/queue.c **** 			if( cTxLock == queueUNLOCKED )
1135:./freeRTOS/queue.c **** 			{
1136:./freeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1137:./freeRTOS/queue.c **** 				{
1138:./freeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1139:./freeRTOS/queue.c **** 					{
1140:./freeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1141:./freeRTOS/queue.c **** 						{
1142:./freeRTOS/queue.c **** 							/* The semaphore is a member of a queue set, and
1143:./freeRTOS/queue.c **** 							posting	to the queue set caused a higher priority
1144:./freeRTOS/queue.c **** 							task to	unblock.  A context switch is required. */
1145:./freeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1146:./freeRTOS/queue.c **** 							{
1147:./freeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1148:./freeRTOS/queue.c **** 							}
1149:./freeRTOS/queue.c **** 							else
1150:./freeRTOS/queue.c **** 							{
1151:./freeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1152:./freeRTOS/queue.c **** 							}
1153:./freeRTOS/queue.c **** 						}
1154:./freeRTOS/queue.c **** 						else
1155:./freeRTOS/queue.c **** 						{
1156:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1157:./freeRTOS/queue.c **** 						}
1158:./freeRTOS/queue.c **** 					}
1159:./freeRTOS/queue.c **** 					else
1160:./freeRTOS/queue.c **** 					{
1161:./freeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:./freeRTOS/queue.c **** 						{
1163:./freeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1164:./freeRTOS/queue.c **** 							{
1165:./freeRTOS/queue.c **** 								/* The task waiting has a higher priority so
1166:./freeRTOS/queue.c **** 								record that a context switch is required. */
1167:./freeRTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1168:./freeRTOS/queue.c **** 								{
1169:./freeRTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1170:./freeRTOS/queue.c **** 								}
ARM GAS  /tmp/ccxxKxzb.s 			page 22


1171:./freeRTOS/queue.c **** 								else
1172:./freeRTOS/queue.c **** 								{
1173:./freeRTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1174:./freeRTOS/queue.c **** 								}
1175:./freeRTOS/queue.c **** 							}
1176:./freeRTOS/queue.c **** 							else
1177:./freeRTOS/queue.c **** 							{
1178:./freeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1179:./freeRTOS/queue.c **** 							}
1180:./freeRTOS/queue.c **** 						}
1181:./freeRTOS/queue.c **** 						else
1182:./freeRTOS/queue.c **** 						{
1183:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1184:./freeRTOS/queue.c **** 						}
1185:./freeRTOS/queue.c **** 					}
1186:./freeRTOS/queue.c **** 				}
1187:./freeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1188:./freeRTOS/queue.c **** 				{
1189:./freeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1190:./freeRTOS/queue.c **** 					{
1191:./freeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1192:./freeRTOS/queue.c **** 						{
1193:./freeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1194:./freeRTOS/queue.c **** 							context	switch is required. */
1195:./freeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1196:./freeRTOS/queue.c **** 							{
1197:./freeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1198:./freeRTOS/queue.c **** 							}
1199:./freeRTOS/queue.c **** 							else
1200:./freeRTOS/queue.c **** 							{
1201:./freeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1202:./freeRTOS/queue.c **** 							}
1203:./freeRTOS/queue.c **** 						}
1204:./freeRTOS/queue.c **** 						else
1205:./freeRTOS/queue.c **** 						{
1206:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1207:./freeRTOS/queue.c **** 						}
1208:./freeRTOS/queue.c **** 					}
1209:./freeRTOS/queue.c **** 					else
1210:./freeRTOS/queue.c **** 					{
1211:./freeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1212:./freeRTOS/queue.c **** 					}
1213:./freeRTOS/queue.c **** 				}
1214:./freeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1215:./freeRTOS/queue.c **** 			}
1216:./freeRTOS/queue.c **** 			else
1217:./freeRTOS/queue.c **** 			{
1218:./freeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1219:./freeRTOS/queue.c **** 				knows that data was posted while it was locked. */
1220:./freeRTOS/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1221:./freeRTOS/queue.c **** 			}
1222:./freeRTOS/queue.c **** 
1223:./freeRTOS/queue.c **** 			xReturn = pdPASS;
1224:./freeRTOS/queue.c **** 		}
1225:./freeRTOS/queue.c **** 		else
1226:./freeRTOS/queue.c **** 		{
1227:./freeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
ARM GAS  /tmp/ccxxKxzb.s 			page 23


1228:./freeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
1229:./freeRTOS/queue.c **** 		}
1230:./freeRTOS/queue.c **** 	}
1231:./freeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1232:./freeRTOS/queue.c **** 
1233:./freeRTOS/queue.c **** 	return xReturn;
1234:./freeRTOS/queue.c **** }
1235:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1236:./freeRTOS/queue.c **** 
1237:./freeRTOS/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1238:./freeRTOS/queue.c **** {
1239:./freeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1240:./freeRTOS/queue.c **** TimeOut_t xTimeOut;
1241:./freeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
1242:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1243:./freeRTOS/queue.c **** 
1244:./freeRTOS/queue.c **** 	configASSERT( pxQueue );
1245:./freeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1246:./freeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1247:./freeRTOS/queue.c **** 	{
1248:./freeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1249:./freeRTOS/queue.c **** 	}
1250:./freeRTOS/queue.c **** 	#endif
1251:./freeRTOS/queue.c **** 
1252:./freeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1253:./freeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
1254:./freeRTOS/queue.c **** 	of execution time efficiency. */
1255:./freeRTOS/queue.c **** 
1256:./freeRTOS/queue.c **** 	for( ;; )
1257:./freeRTOS/queue.c **** 	{
1258:./freeRTOS/queue.c **** 		taskENTER_CRITICAL();
1259:./freeRTOS/queue.c **** 		{
1260:./freeRTOS/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1261:./freeRTOS/queue.c **** 
1262:./freeRTOS/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1263:./freeRTOS/queue.c **** 			must be the highest priority task wanting to access the queue. */
1264:./freeRTOS/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1265:./freeRTOS/queue.c **** 			{
1266:./freeRTOS/queue.c **** 				/* Remember the read position in case the queue is only being
1267:./freeRTOS/queue.c **** 				peeked. */
1268:./freeRTOS/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1269:./freeRTOS/queue.c **** 
1270:./freeRTOS/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1271:./freeRTOS/queue.c **** 
1272:./freeRTOS/queue.c **** 				if( xJustPeeking == pdFALSE )
1273:./freeRTOS/queue.c **** 				{
1274:./freeRTOS/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1275:./freeRTOS/queue.c **** 
1276:./freeRTOS/queue.c **** 					/* Actually removing data, not just peeking. */
1277:./freeRTOS/queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1278:./freeRTOS/queue.c **** 
1279:./freeRTOS/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1280:./freeRTOS/queue.c **** 					{
1281:./freeRTOS/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1282:./freeRTOS/queue.c **** 						{
1283:./freeRTOS/queue.c **** 							/* Record the information required to implement
1284:./freeRTOS/queue.c **** 							priority inheritance should it become necessary. */
ARM GAS  /tmp/ccxxKxzb.s 			page 24


1285:./freeRTOS/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
1286:./freeRTOS/queue.c **** 						}
1287:./freeRTOS/queue.c **** 						else
1288:./freeRTOS/queue.c **** 						{
1289:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1290:./freeRTOS/queue.c **** 						}
1291:./freeRTOS/queue.c **** 					}
1292:./freeRTOS/queue.c **** 					#endif /* configUSE_MUTEXES */
1293:./freeRTOS/queue.c **** 
1294:./freeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1295:./freeRTOS/queue.c **** 					{
1296:./freeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1297:./freeRTOS/queue.c **** 						{
1298:./freeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1299:./freeRTOS/queue.c **** 						}
1300:./freeRTOS/queue.c **** 						else
1301:./freeRTOS/queue.c **** 						{
1302:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1303:./freeRTOS/queue.c **** 						}
1304:./freeRTOS/queue.c **** 					}
1305:./freeRTOS/queue.c **** 					else
1306:./freeRTOS/queue.c **** 					{
1307:./freeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1308:./freeRTOS/queue.c **** 					}
1309:./freeRTOS/queue.c **** 				}
1310:./freeRTOS/queue.c **** 				else
1311:./freeRTOS/queue.c **** 				{
1312:./freeRTOS/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1313:./freeRTOS/queue.c **** 
1314:./freeRTOS/queue.c **** 					/* The data is not being removed, so reset the read
1315:./freeRTOS/queue.c **** 					pointer. */
1316:./freeRTOS/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1317:./freeRTOS/queue.c **** 
1318:./freeRTOS/queue.c **** 					/* The data is being left in the queue, so see if there are
1319:./freeRTOS/queue.c **** 					any other tasks waiting for the data. */
1320:./freeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1321:./freeRTOS/queue.c **** 					{
1322:./freeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1323:./freeRTOS/queue.c **** 						{
1324:./freeRTOS/queue.c **** 							/* The task waiting has a higher priority than this task. */
1325:./freeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1326:./freeRTOS/queue.c **** 						}
1327:./freeRTOS/queue.c **** 						else
1328:./freeRTOS/queue.c **** 						{
1329:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1330:./freeRTOS/queue.c **** 						}
1331:./freeRTOS/queue.c **** 					}
1332:./freeRTOS/queue.c **** 					else
1333:./freeRTOS/queue.c **** 					{
1334:./freeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1335:./freeRTOS/queue.c **** 					}
1336:./freeRTOS/queue.c **** 				}
1337:./freeRTOS/queue.c **** 
1338:./freeRTOS/queue.c **** 				taskEXIT_CRITICAL();
1339:./freeRTOS/queue.c **** 				return pdPASS;
1340:./freeRTOS/queue.c **** 			}
1341:./freeRTOS/queue.c **** 			else
ARM GAS  /tmp/ccxxKxzb.s 			page 25


1342:./freeRTOS/queue.c **** 			{
1343:./freeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1344:./freeRTOS/queue.c **** 				{
1345:./freeRTOS/queue.c **** 					/* The queue was empty and no block time is specified (or
1346:./freeRTOS/queue.c **** 					the block time has expired) so leave now. */
1347:./freeRTOS/queue.c **** 					taskEXIT_CRITICAL();
1348:./freeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1349:./freeRTOS/queue.c **** 					return errQUEUE_EMPTY;
1350:./freeRTOS/queue.c **** 				}
1351:./freeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1352:./freeRTOS/queue.c **** 				{
1353:./freeRTOS/queue.c **** 					/* The queue was empty and a block time was specified so
1354:./freeRTOS/queue.c **** 					configure the timeout structure. */
1355:./freeRTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1356:./freeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
1357:./freeRTOS/queue.c **** 				}
1358:./freeRTOS/queue.c **** 				else
1359:./freeRTOS/queue.c **** 				{
1360:./freeRTOS/queue.c **** 					/* Entry time was already set. */
1361:./freeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1362:./freeRTOS/queue.c **** 				}
1363:./freeRTOS/queue.c **** 			}
1364:./freeRTOS/queue.c **** 		}
1365:./freeRTOS/queue.c **** 		taskEXIT_CRITICAL();
1366:./freeRTOS/queue.c **** 
1367:./freeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1368:./freeRTOS/queue.c **** 		now the critical section has been exited. */
1369:./freeRTOS/queue.c **** 
1370:./freeRTOS/queue.c **** 		vTaskSuspendAll();
1371:./freeRTOS/queue.c **** 		prvLockQueue( pxQueue );
1372:./freeRTOS/queue.c **** 
1373:./freeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1374:./freeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1375:./freeRTOS/queue.c **** 		{
1376:./freeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1377:./freeRTOS/queue.c **** 			{
1378:./freeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1379:./freeRTOS/queue.c **** 
1380:./freeRTOS/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1381:./freeRTOS/queue.c **** 				{
1382:./freeRTOS/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1383:./freeRTOS/queue.c **** 					{
1384:./freeRTOS/queue.c **** 						taskENTER_CRITICAL();
1385:./freeRTOS/queue.c **** 						{
1386:./freeRTOS/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1387:./freeRTOS/queue.c **** 						}
1388:./freeRTOS/queue.c **** 						taskEXIT_CRITICAL();
1389:./freeRTOS/queue.c **** 					}
1390:./freeRTOS/queue.c **** 					else
1391:./freeRTOS/queue.c **** 					{
1392:./freeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1393:./freeRTOS/queue.c **** 					}
1394:./freeRTOS/queue.c **** 				}
1395:./freeRTOS/queue.c **** 				#endif
1396:./freeRTOS/queue.c **** 
1397:./freeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1398:./freeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
ARM GAS  /tmp/ccxxKxzb.s 			page 26


1399:./freeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1400:./freeRTOS/queue.c **** 				{
1401:./freeRTOS/queue.c **** 					portYIELD_WITHIN_API();
1402:./freeRTOS/queue.c **** 				}
1403:./freeRTOS/queue.c **** 				else
1404:./freeRTOS/queue.c **** 				{
1405:./freeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1406:./freeRTOS/queue.c **** 				}
1407:./freeRTOS/queue.c **** 			}
1408:./freeRTOS/queue.c **** 			else
1409:./freeRTOS/queue.c **** 			{
1410:./freeRTOS/queue.c **** 				/* Try again. */
1411:./freeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1412:./freeRTOS/queue.c **** 				( void ) xTaskResumeAll();
1413:./freeRTOS/queue.c **** 			}
1414:./freeRTOS/queue.c **** 		}
1415:./freeRTOS/queue.c **** 		else
1416:./freeRTOS/queue.c **** 		{
1417:./freeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
1418:./freeRTOS/queue.c **** 			( void ) xTaskResumeAll();
1419:./freeRTOS/queue.c **** 
1420:./freeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1421:./freeRTOS/queue.c **** 			{
1422:./freeRTOS/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1423:./freeRTOS/queue.c **** 				return errQUEUE_EMPTY;
1424:./freeRTOS/queue.c **** 			}
1425:./freeRTOS/queue.c **** 			else
1426:./freeRTOS/queue.c **** 			{
1427:./freeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1428:./freeRTOS/queue.c **** 			}
1429:./freeRTOS/queue.c **** 		}
1430:./freeRTOS/queue.c **** 	}
1431:./freeRTOS/queue.c **** }
1432:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1433:./freeRTOS/queue.c **** 
1434:./freeRTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1435:./freeRTOS/queue.c **** {
1436:./freeRTOS/queue.c **** BaseType_t xReturn;
1437:./freeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1438:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1439:./freeRTOS/queue.c **** 
1440:./freeRTOS/queue.c **** 	configASSERT( pxQueue );
1441:./freeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1442:./freeRTOS/queue.c **** 
1443:./freeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1444:./freeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1445:./freeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1446:./freeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1447:./freeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1448:./freeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1449:./freeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1450:./freeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1451:./freeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1452:./freeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1453:./freeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1454:./freeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1455:./freeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
ARM GAS  /tmp/ccxxKxzb.s 			page 27


1456:./freeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1457:./freeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1458:./freeRTOS/queue.c **** 
1459:./freeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1460:./freeRTOS/queue.c **** 	{
1461:./freeRTOS/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1462:./freeRTOS/queue.c **** 
1463:./freeRTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1464:./freeRTOS/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1465:./freeRTOS/queue.c **** 		{
1466:./freeRTOS/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1467:./freeRTOS/queue.c **** 
1468:./freeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1469:./freeRTOS/queue.c **** 
1470:./freeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1471:./freeRTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1472:./freeRTOS/queue.c **** 
1473:./freeRTOS/queue.c **** 			/* If the queue is locked the event list will not be modified.
1474:./freeRTOS/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1475:./freeRTOS/queue.c **** 			will know that an ISR has removed data while the queue was
1476:./freeRTOS/queue.c **** 			locked. */
1477:./freeRTOS/queue.c **** 			if( cRxLock == queueUNLOCKED )
1478:./freeRTOS/queue.c **** 			{
1479:./freeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1480:./freeRTOS/queue.c **** 				{
1481:./freeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1482:./freeRTOS/queue.c **** 					{
1483:./freeRTOS/queue.c **** 						/* The task waiting has a higher priority than us so
1484:./freeRTOS/queue.c **** 						force a context switch. */
1485:./freeRTOS/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1486:./freeRTOS/queue.c **** 						{
1487:./freeRTOS/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1488:./freeRTOS/queue.c **** 						}
1489:./freeRTOS/queue.c **** 						else
1490:./freeRTOS/queue.c **** 						{
1491:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1492:./freeRTOS/queue.c **** 						}
1493:./freeRTOS/queue.c **** 					}
1494:./freeRTOS/queue.c **** 					else
1495:./freeRTOS/queue.c **** 					{
1496:./freeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1497:./freeRTOS/queue.c **** 					}
1498:./freeRTOS/queue.c **** 				}
1499:./freeRTOS/queue.c **** 				else
1500:./freeRTOS/queue.c **** 				{
1501:./freeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1502:./freeRTOS/queue.c **** 				}
1503:./freeRTOS/queue.c **** 			}
1504:./freeRTOS/queue.c **** 			else
1505:./freeRTOS/queue.c **** 			{
1506:./freeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1507:./freeRTOS/queue.c **** 				knows that data was removed while it was locked. */
1508:./freeRTOS/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1509:./freeRTOS/queue.c **** 			}
1510:./freeRTOS/queue.c **** 
1511:./freeRTOS/queue.c **** 			xReturn = pdPASS;
1512:./freeRTOS/queue.c **** 		}
ARM GAS  /tmp/ccxxKxzb.s 			page 28


1513:./freeRTOS/queue.c **** 		else
1514:./freeRTOS/queue.c **** 		{
1515:./freeRTOS/queue.c **** 			xReturn = pdFAIL;
1516:./freeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1517:./freeRTOS/queue.c **** 		}
1518:./freeRTOS/queue.c **** 	}
1519:./freeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1520:./freeRTOS/queue.c **** 
1521:./freeRTOS/queue.c **** 	return xReturn;
1522:./freeRTOS/queue.c **** }
1523:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1524:./freeRTOS/queue.c **** 
1525:./freeRTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1526:./freeRTOS/queue.c **** {
1527:./freeRTOS/queue.c **** BaseType_t xReturn;
1528:./freeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1529:./freeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
1530:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1531:./freeRTOS/queue.c **** 
1532:./freeRTOS/queue.c **** 	configASSERT( pxQueue );
1533:./freeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1534:./freeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1535:./freeRTOS/queue.c **** 
1536:./freeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1537:./freeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1538:./freeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1539:./freeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1540:./freeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1541:./freeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1542:./freeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1543:./freeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1544:./freeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1545:./freeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1546:./freeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1547:./freeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1548:./freeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1549:./freeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1550:./freeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1551:./freeRTOS/queue.c **** 
1552:./freeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1553:./freeRTOS/queue.c **** 	{
1554:./freeRTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1555:./freeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1556:./freeRTOS/queue.c **** 		{
1557:./freeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1558:./freeRTOS/queue.c **** 
1559:./freeRTOS/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1560:./freeRTOS/queue.c **** 			actually being removed from the queue. */
1561:./freeRTOS/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1562:./freeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1563:./freeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1564:./freeRTOS/queue.c **** 
1565:./freeRTOS/queue.c **** 			xReturn = pdPASS;
1566:./freeRTOS/queue.c **** 		}
1567:./freeRTOS/queue.c **** 		else
1568:./freeRTOS/queue.c **** 		{
1569:./freeRTOS/queue.c **** 			xReturn = pdFAIL;
ARM GAS  /tmp/ccxxKxzb.s 			page 29


1570:./freeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1571:./freeRTOS/queue.c **** 		}
1572:./freeRTOS/queue.c **** 	}
1573:./freeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1574:./freeRTOS/queue.c **** 
1575:./freeRTOS/queue.c **** 	return xReturn;
1576:./freeRTOS/queue.c **** }
1577:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1578:./freeRTOS/queue.c **** 
1579:./freeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1580:./freeRTOS/queue.c **** {
1581:./freeRTOS/queue.c **** UBaseType_t uxReturn;
1582:./freeRTOS/queue.c **** 
1583:./freeRTOS/queue.c **** 	configASSERT( xQueue );
1584:./freeRTOS/queue.c **** 
1585:./freeRTOS/queue.c **** 	taskENTER_CRITICAL();
1586:./freeRTOS/queue.c **** 	{
1587:./freeRTOS/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1588:./freeRTOS/queue.c **** 	}
1589:./freeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1590:./freeRTOS/queue.c **** 
1591:./freeRTOS/queue.c **** 	return uxReturn;
1592:./freeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1593:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1594:./freeRTOS/queue.c **** 
1595:./freeRTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1596:./freeRTOS/queue.c **** {
1597:./freeRTOS/queue.c **** UBaseType_t uxReturn;
1598:./freeRTOS/queue.c **** Queue_t *pxQueue;
1599:./freeRTOS/queue.c **** 
1600:./freeRTOS/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1601:./freeRTOS/queue.c **** 	configASSERT( pxQueue );
1602:./freeRTOS/queue.c **** 
1603:./freeRTOS/queue.c **** 	taskENTER_CRITICAL();
1604:./freeRTOS/queue.c **** 	{
1605:./freeRTOS/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1606:./freeRTOS/queue.c **** 	}
1607:./freeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1608:./freeRTOS/queue.c **** 
1609:./freeRTOS/queue.c **** 	return uxReturn;
1610:./freeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1611:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1612:./freeRTOS/queue.c **** 
1613:./freeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1614:./freeRTOS/queue.c **** {
1615:./freeRTOS/queue.c **** UBaseType_t uxReturn;
1616:./freeRTOS/queue.c **** 
1617:./freeRTOS/queue.c **** 	configASSERT( xQueue );
1618:./freeRTOS/queue.c **** 
1619:./freeRTOS/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1620:./freeRTOS/queue.c **** 
1621:./freeRTOS/queue.c **** 	return uxReturn;
1622:./freeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1623:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1624:./freeRTOS/queue.c **** 
1625:./freeRTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1626:./freeRTOS/queue.c **** {
ARM GAS  /tmp/ccxxKxzb.s 			page 30


1627:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1628:./freeRTOS/queue.c **** 
1629:./freeRTOS/queue.c **** 	configASSERT( pxQueue );
1630:./freeRTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1631:./freeRTOS/queue.c **** 
1632:./freeRTOS/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1633:./freeRTOS/queue.c **** 	{
1634:./freeRTOS/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1635:./freeRTOS/queue.c **** 	}
1636:./freeRTOS/queue.c **** 	#endif
1637:./freeRTOS/queue.c **** 
1638:./freeRTOS/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1639:./freeRTOS/queue.c **** 	{
1640:./freeRTOS/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1641:./freeRTOS/queue.c **** 		again. */
1642:./freeRTOS/queue.c **** 		vPortFree( pxQueue );
1643:./freeRTOS/queue.c **** 	}
1644:./freeRTOS/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1645:./freeRTOS/queue.c **** 	{
1646:./freeRTOS/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1647:./freeRTOS/queue.c **** 		check before attempting to free the memory. */
1648:./freeRTOS/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1649:./freeRTOS/queue.c **** 		{
1650:./freeRTOS/queue.c **** 			vPortFree( pxQueue );
1651:./freeRTOS/queue.c **** 		}
1652:./freeRTOS/queue.c **** 		else
1653:./freeRTOS/queue.c **** 		{
1654:./freeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1655:./freeRTOS/queue.c **** 		}
1656:./freeRTOS/queue.c **** 	}
1657:./freeRTOS/queue.c **** 	#else
1658:./freeRTOS/queue.c **** 	{
1659:./freeRTOS/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1660:./freeRTOS/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1661:./freeRTOS/queue.c **** 		( void ) pxQueue;
1662:./freeRTOS/queue.c **** 	}
1663:./freeRTOS/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1664:./freeRTOS/queue.c **** }
1665:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1666:./freeRTOS/queue.c **** 
1667:./freeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1668:./freeRTOS/queue.c **** 
1669:./freeRTOS/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1670:./freeRTOS/queue.c **** 	{
1671:./freeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1672:./freeRTOS/queue.c **** 	}
1673:./freeRTOS/queue.c **** 
1674:./freeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1675:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1676:./freeRTOS/queue.c **** 
1677:./freeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1678:./freeRTOS/queue.c **** 
1679:./freeRTOS/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1680:./freeRTOS/queue.c **** 	{
1681:./freeRTOS/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1682:./freeRTOS/queue.c **** 	}
1683:./freeRTOS/queue.c **** 
ARM GAS  /tmp/ccxxKxzb.s 			page 31


1684:./freeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1685:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1686:./freeRTOS/queue.c **** 
1687:./freeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1688:./freeRTOS/queue.c **** 
1689:./freeRTOS/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1690:./freeRTOS/queue.c **** 	{
1691:./freeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1692:./freeRTOS/queue.c **** 	}
1693:./freeRTOS/queue.c **** 
1694:./freeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1695:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1696:./freeRTOS/queue.c **** 
1697:./freeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1698:./freeRTOS/queue.c **** {
1699:./freeRTOS/queue.c **** BaseType_t xReturn = pdFALSE;
1700:./freeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
1701:./freeRTOS/queue.c **** 
1702:./freeRTOS/queue.c **** 	/* This function is called from a critical section. */
1703:./freeRTOS/queue.c **** 
1704:./freeRTOS/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1705:./freeRTOS/queue.c **** 
1706:./freeRTOS/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1707:./freeRTOS/queue.c **** 	{
1708:./freeRTOS/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1709:./freeRTOS/queue.c **** 		{
1710:./freeRTOS/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1711:./freeRTOS/queue.c **** 			{
1712:./freeRTOS/queue.c **** 				/* The mutex is no longer being held. */
1713:./freeRTOS/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1714:./freeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
1715:./freeRTOS/queue.c **** 			}
1716:./freeRTOS/queue.c **** 			else
1717:./freeRTOS/queue.c **** 			{
1718:./freeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1719:./freeRTOS/queue.c **** 			}
1720:./freeRTOS/queue.c **** 		}
1721:./freeRTOS/queue.c **** 		#endif /* configUSE_MUTEXES */
1722:./freeRTOS/queue.c **** 	}
1723:./freeRTOS/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1724:./freeRTOS/queue.c **** 	{
1725:./freeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
1726:./freeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1727:./freeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
1728:./freeRTOS/queue.c **** 		{
1729:./freeRTOS/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1730:./freeRTOS/queue.c **** 		}
1731:./freeRTOS/queue.c **** 		else
1732:./freeRTOS/queue.c **** 		{
1733:./freeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1734:./freeRTOS/queue.c **** 		}
1735:./freeRTOS/queue.c **** 	}
1736:./freeRTOS/queue.c **** 	else
1737:./freeRTOS/queue.c **** 	{
1738:./freeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
1739:./freeRTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1740:./freeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
ARM GAS  /tmp/ccxxKxzb.s 			page 32


1741:./freeRTOS/queue.c **** 		{
1742:./freeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1743:./freeRTOS/queue.c **** 		}
1744:./freeRTOS/queue.c **** 		else
1745:./freeRTOS/queue.c **** 		{
1746:./freeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1747:./freeRTOS/queue.c **** 		}
1748:./freeRTOS/queue.c **** 
1749:./freeRTOS/queue.c **** 		if( xPosition == queueOVERWRITE )
1750:./freeRTOS/queue.c **** 		{
1751:./freeRTOS/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1752:./freeRTOS/queue.c **** 			{
1753:./freeRTOS/queue.c **** 				/* An item is not being added but overwritten, so subtract
1754:./freeRTOS/queue.c **** 				one from the recorded number of items in the queue so when
1755:./freeRTOS/queue.c **** 				one is added again below the number of recorded items remains
1756:./freeRTOS/queue.c **** 				correct. */
1757:./freeRTOS/queue.c **** 				--uxMessagesWaiting;
1758:./freeRTOS/queue.c **** 			}
1759:./freeRTOS/queue.c **** 			else
1760:./freeRTOS/queue.c **** 			{
1761:./freeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1762:./freeRTOS/queue.c **** 			}
1763:./freeRTOS/queue.c **** 		}
1764:./freeRTOS/queue.c **** 		else
1765:./freeRTOS/queue.c **** 		{
1766:./freeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1767:./freeRTOS/queue.c **** 		}
1768:./freeRTOS/queue.c **** 	}
1769:./freeRTOS/queue.c **** 
1770:./freeRTOS/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1771:./freeRTOS/queue.c **** 
1772:./freeRTOS/queue.c **** 	return xReturn;
1773:./freeRTOS/queue.c **** }
1774:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1775:./freeRTOS/queue.c **** 
1776:./freeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1777:./freeRTOS/queue.c **** {
1778:./freeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1779:./freeRTOS/queue.c **** 	{
1780:./freeRTOS/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1781:./freeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
1782:./freeRTOS/queue.c **** 		{
1783:./freeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1784:./freeRTOS/queue.c **** 		}
1785:./freeRTOS/queue.c **** 		else
1786:./freeRTOS/queue.c **** 		{
1787:./freeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1788:./freeRTOS/queue.c **** 		}
1789:./freeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1790:./freeRTOS/queue.c **** 	}
1791:./freeRTOS/queue.c **** }
1792:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1793:./freeRTOS/queue.c **** 
1794:./freeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1795:./freeRTOS/queue.c **** {
1796:./freeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1797:./freeRTOS/queue.c **** 
ARM GAS  /tmp/ccxxKxzb.s 			page 33


1798:./freeRTOS/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1799:./freeRTOS/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1800:./freeRTOS/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1801:./freeRTOS/queue.c **** 	updated. */
1802:./freeRTOS/queue.c **** 	taskENTER_CRITICAL();
1803:./freeRTOS/queue.c **** 	{
1804:./freeRTOS/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
1805:./freeRTOS/queue.c **** 
1806:./freeRTOS/queue.c **** 		/* See if data was added to the queue while it was locked. */
1807:./freeRTOS/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
1808:./freeRTOS/queue.c **** 		{
1809:./freeRTOS/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1810:./freeRTOS/queue.c **** 			blocked waiting for data to become available? */
1811:./freeRTOS/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1812:./freeRTOS/queue.c **** 			{
1813:./freeRTOS/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1814:./freeRTOS/queue.c **** 				{
1815:./freeRTOS/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1816:./freeRTOS/queue.c **** 					{
1817:./freeRTOS/queue.c **** 						/* The queue is a member of a queue set, and posting to
1818:./freeRTOS/queue.c **** 						the queue set caused a higher priority task to unblock.
1819:./freeRTOS/queue.c **** 						A context switch is required. */
1820:./freeRTOS/queue.c **** 						vTaskMissedYield();
1821:./freeRTOS/queue.c **** 					}
1822:./freeRTOS/queue.c **** 					else
1823:./freeRTOS/queue.c **** 					{
1824:./freeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1825:./freeRTOS/queue.c **** 					}
1826:./freeRTOS/queue.c **** 				}
1827:./freeRTOS/queue.c **** 				else
1828:./freeRTOS/queue.c **** 				{
1829:./freeRTOS/queue.c **** 					/* Tasks that are removed from the event list will get
1830:./freeRTOS/queue.c **** 					added to the pending ready list as the scheduler is still
1831:./freeRTOS/queue.c **** 					suspended. */
1832:./freeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1833:./freeRTOS/queue.c **** 					{
1834:./freeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1835:./freeRTOS/queue.c **** 						{
1836:./freeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1837:./freeRTOS/queue.c **** 							context	switch is required. */
1838:./freeRTOS/queue.c **** 							vTaskMissedYield();
1839:./freeRTOS/queue.c **** 						}
1840:./freeRTOS/queue.c **** 						else
1841:./freeRTOS/queue.c **** 						{
1842:./freeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:./freeRTOS/queue.c **** 						}
1844:./freeRTOS/queue.c **** 					}
1845:./freeRTOS/queue.c **** 					else
1846:./freeRTOS/queue.c **** 					{
1847:./freeRTOS/queue.c **** 						break;
1848:./freeRTOS/queue.c **** 					}
1849:./freeRTOS/queue.c **** 				}
1850:./freeRTOS/queue.c **** 			}
1851:./freeRTOS/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1852:./freeRTOS/queue.c **** 			{
1853:./freeRTOS/queue.c **** 				/* Tasks that are removed from the event list will get added to
1854:./freeRTOS/queue.c **** 				the pending ready list as the scheduler is still suspended. */
ARM GAS  /tmp/ccxxKxzb.s 			page 34


1855:./freeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1856:./freeRTOS/queue.c **** 				{
1857:./freeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1858:./freeRTOS/queue.c **** 					{
1859:./freeRTOS/queue.c **** 						/* The task waiting has a higher priority so record that
1860:./freeRTOS/queue.c **** 						a context switch is required. */
1861:./freeRTOS/queue.c **** 						vTaskMissedYield();
1862:./freeRTOS/queue.c **** 					}
1863:./freeRTOS/queue.c **** 					else
1864:./freeRTOS/queue.c **** 					{
1865:./freeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1866:./freeRTOS/queue.c **** 					}
1867:./freeRTOS/queue.c **** 				}
1868:./freeRTOS/queue.c **** 				else
1869:./freeRTOS/queue.c **** 				{
1870:./freeRTOS/queue.c **** 					break;
1871:./freeRTOS/queue.c **** 				}
1872:./freeRTOS/queue.c **** 			}
1873:./freeRTOS/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1874:./freeRTOS/queue.c **** 
1875:./freeRTOS/queue.c **** 			--cTxLock;
1876:./freeRTOS/queue.c **** 		}
1877:./freeRTOS/queue.c **** 
1878:./freeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
1879:./freeRTOS/queue.c **** 	}
1880:./freeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1881:./freeRTOS/queue.c **** 
1882:./freeRTOS/queue.c **** 	/* Do the same for the Rx lock. */
1883:./freeRTOS/queue.c **** 	taskENTER_CRITICAL();
1884:./freeRTOS/queue.c **** 	{
1885:./freeRTOS/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
1886:./freeRTOS/queue.c **** 
1887:./freeRTOS/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
1888:./freeRTOS/queue.c **** 		{
1889:./freeRTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1890:./freeRTOS/queue.c **** 			{
1891:./freeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1892:./freeRTOS/queue.c **** 				{
1893:./freeRTOS/queue.c **** 					vTaskMissedYield();
1894:./freeRTOS/queue.c **** 				}
1895:./freeRTOS/queue.c **** 				else
1896:./freeRTOS/queue.c **** 				{
1897:./freeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1898:./freeRTOS/queue.c **** 				}
1899:./freeRTOS/queue.c **** 
1900:./freeRTOS/queue.c **** 				--cRxLock;
1901:./freeRTOS/queue.c **** 			}
1902:./freeRTOS/queue.c **** 			else
1903:./freeRTOS/queue.c **** 			{
1904:./freeRTOS/queue.c **** 				break;
1905:./freeRTOS/queue.c **** 			}
1906:./freeRTOS/queue.c **** 		}
1907:./freeRTOS/queue.c **** 
1908:./freeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
1909:./freeRTOS/queue.c **** 	}
1910:./freeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1911:./freeRTOS/queue.c **** }
ARM GAS  /tmp/ccxxKxzb.s 			page 35


1912:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1913:./freeRTOS/queue.c **** 
1914:./freeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1915:./freeRTOS/queue.c **** {
1916:./freeRTOS/queue.c **** BaseType_t xReturn;
1917:./freeRTOS/queue.c **** 
1918:./freeRTOS/queue.c **** 	taskENTER_CRITICAL();
1919:./freeRTOS/queue.c **** 	{
1920:./freeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1921:./freeRTOS/queue.c **** 		{
1922:./freeRTOS/queue.c **** 			xReturn = pdTRUE;
1923:./freeRTOS/queue.c **** 		}
1924:./freeRTOS/queue.c **** 		else
1925:./freeRTOS/queue.c **** 		{
1926:./freeRTOS/queue.c **** 			xReturn = pdFALSE;
1927:./freeRTOS/queue.c **** 		}
1928:./freeRTOS/queue.c **** 	}
1929:./freeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1930:./freeRTOS/queue.c **** 
1931:./freeRTOS/queue.c **** 	return xReturn;
1932:./freeRTOS/queue.c **** }
1933:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1934:./freeRTOS/queue.c **** 
1935:./freeRTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1936:./freeRTOS/queue.c **** {
1937:./freeRTOS/queue.c **** BaseType_t xReturn;
1938:./freeRTOS/queue.c **** 
1939:./freeRTOS/queue.c **** 	configASSERT( xQueue );
1940:./freeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
1941:./freeRTOS/queue.c **** 	{
1942:./freeRTOS/queue.c **** 		xReturn = pdTRUE;
1943:./freeRTOS/queue.c **** 	}
1944:./freeRTOS/queue.c **** 	else
1945:./freeRTOS/queue.c **** 	{
1946:./freeRTOS/queue.c **** 		xReturn = pdFALSE;
1947:./freeRTOS/queue.c **** 	}
1948:./freeRTOS/queue.c **** 
1949:./freeRTOS/queue.c **** 	return xReturn;
1950:./freeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1951:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
1952:./freeRTOS/queue.c **** 
1953:./freeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1954:./freeRTOS/queue.c **** {
  29              		.loc 1 1954 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 1954 1 is_stmt 0 view .LVU1
  34 0000 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39 0002 0446     		mov	r4, r0
1955:./freeRTOS/queue.c **** BaseType_t xReturn;
  40              		.loc 1 1955 1 is_stmt 1 view .LVU2
1956:./freeRTOS/queue.c **** 
ARM GAS  /tmp/ccxxKxzb.s 			page 36


1957:./freeRTOS/queue.c **** 	taskENTER_CRITICAL();
  41              		.loc 1 1957 2 view .LVU3
  42 0004 FFF7FEFF 		bl	vPortEnterCritical
  43              	.LVL1:
1958:./freeRTOS/queue.c **** 	{
1959:./freeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  44              		.loc 1 1959 3 view .LVU4
  45              		.loc 1 1959 14 is_stmt 0 view .LVU5
  46 0008 A26B     		ldr	r2, [r4, #56]
  47              		.loc 1 1959 44 view .LVU6
  48 000a E36B     		ldr	r3, [r4, #60]
  49              		.loc 1 1959 5 view .LVU7
  50 000c 9A42     		cmp	r2, r3
  51 000e 04D0     		beq	.L5
1960:./freeRTOS/queue.c **** 		{
1961:./freeRTOS/queue.c **** 			xReturn = pdTRUE;
1962:./freeRTOS/queue.c **** 		}
1963:./freeRTOS/queue.c **** 		else
1964:./freeRTOS/queue.c **** 		{
1965:./freeRTOS/queue.c **** 			xReturn = pdFALSE;
  52              		.loc 1 1965 12 view .LVU8
  53 0010 0024     		movs	r4, #0
  54              	.LVL2:
  55              	.L2:
1966:./freeRTOS/queue.c **** 		}
1967:./freeRTOS/queue.c **** 	}
1968:./freeRTOS/queue.c **** 	taskEXIT_CRITICAL();
  56              		.loc 1 1968 2 is_stmt 1 view .LVU9
  57 0012 FFF7FEFF 		bl	vPortExitCritical
  58              	.LVL3:
1969:./freeRTOS/queue.c **** 
1970:./freeRTOS/queue.c **** 	return xReturn;
  59              		.loc 1 1970 2 view .LVU10
1971:./freeRTOS/queue.c **** }
  60              		.loc 1 1971 1 is_stmt 0 view .LVU11
  61 0016 2046     		mov	r0, r4
  62 0018 10BD     		pop	{r4, pc}
  63              	.LVL4:
  64              	.L5:
1961:./freeRTOS/queue.c **** 		}
  65              		.loc 1 1961 12 view .LVU12
  66 001a 0124     		movs	r4, #1
  67              	.LVL5:
1961:./freeRTOS/queue.c **** 		}
  68              		.loc 1 1961 12 view .LVU13
  69 001c F9E7     		b	.L2
  70              		.cfi_endproc
  71              	.LFE26:
  73              		.section	.text.prvIsQueueEmpty,"ax",%progbits
  74              		.align	1
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  78              		.fpu fpv4-sp-d16
  80              	prvIsQueueEmpty:
  81              	.LVL6:
  82              	.LFB24:
ARM GAS  /tmp/ccxxKxzb.s 			page 37


1915:./freeRTOS/queue.c **** BaseType_t xReturn;
  83              		.loc 1 1915 1 is_stmt 1 view -0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
1915:./freeRTOS/queue.c **** BaseType_t xReturn;
  87              		.loc 1 1915 1 is_stmt 0 view .LVU15
  88 0000 10B5     		push	{r4, lr}
  89              	.LCFI1:
  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 4, -8
  92              		.cfi_offset 14, -4
  93 0002 0446     		mov	r4, r0
1916:./freeRTOS/queue.c **** 
  94              		.loc 1 1916 1 is_stmt 1 view .LVU16
1918:./freeRTOS/queue.c **** 	{
  95              		.loc 1 1918 2 view .LVU17
  96 0004 FFF7FEFF 		bl	vPortEnterCritical
  97              	.LVL7:
1920:./freeRTOS/queue.c **** 		{
  98              		.loc 1 1920 3 view .LVU18
1920:./freeRTOS/queue.c **** 		{
  99              		.loc 1 1920 14 is_stmt 0 view .LVU19
 100 0008 A36B     		ldr	r3, [r4, #56]
1920:./freeRTOS/queue.c **** 		{
 101              		.loc 1 1920 5 view .LVU20
 102 000a 23B9     		cbnz	r3, .L8
1922:./freeRTOS/queue.c **** 		}
 103              		.loc 1 1922 12 view .LVU21
 104 000c 0124     		movs	r4, #1
 105              	.LVL8:
 106              	.L7:
1929:./freeRTOS/queue.c **** 
 107              		.loc 1 1929 2 is_stmt 1 view .LVU22
 108 000e FFF7FEFF 		bl	vPortExitCritical
 109              	.LVL9:
1931:./freeRTOS/queue.c **** }
 110              		.loc 1 1931 2 view .LVU23
1932:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 111              		.loc 1 1932 1 is_stmt 0 view .LVU24
 112 0012 2046     		mov	r0, r4
 113 0014 10BD     		pop	{r4, pc}
 114              	.LVL10:
 115              	.L8:
1926:./freeRTOS/queue.c **** 		}
 116              		.loc 1 1926 12 view .LVU25
 117 0016 0024     		movs	r4, #0
 118              	.LVL11:
1926:./freeRTOS/queue.c **** 		}
 119              		.loc 1 1926 12 view .LVU26
 120 0018 F9E7     		b	.L7
 121              		.cfi_endproc
 122              	.LFE24:
 124              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 125              		.align	1
 126              		.syntax unified
 127              		.thumb
ARM GAS  /tmp/ccxxKxzb.s 			page 38


 128              		.thumb_func
 129              		.fpu fpv4-sp-d16
 131              	prvCopyDataToQueue:
 132              	.LVL12:
 133              	.LFB21:
1698:./freeRTOS/queue.c **** BaseType_t xReturn = pdFALSE;
 134              		.loc 1 1698 1 is_stmt 1 view -0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
1698:./freeRTOS/queue.c **** BaseType_t xReturn = pdFALSE;
 138              		.loc 1 1698 1 is_stmt 0 view .LVU28
 139 0000 70B5     		push	{r4, r5, r6, lr}
 140              	.LCFI2:
 141              		.cfi_def_cfa_offset 16
 142              		.cfi_offset 4, -16
 143              		.cfi_offset 5, -12
 144              		.cfi_offset 6, -8
 145              		.cfi_offset 14, -4
 146 0002 0446     		mov	r4, r0
 147 0004 1546     		mov	r5, r2
1699:./freeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 148              		.loc 1 1699 1 is_stmt 1 view .LVU29
 149              	.LVL13:
1700:./freeRTOS/queue.c **** 
 150              		.loc 1 1700 1 view .LVU30
1704:./freeRTOS/queue.c **** 
 151              		.loc 1 1704 2 view .LVU31
1704:./freeRTOS/queue.c **** 
 152              		.loc 1 1704 20 is_stmt 0 view .LVU32
 153 0006 866B     		ldr	r6, [r0, #56]
 154              	.LVL14:
1706:./freeRTOS/queue.c **** 	{
 155              		.loc 1 1706 2 is_stmt 1 view .LVU33
1706:./freeRTOS/queue.c **** 	{
 156              		.loc 1 1706 13 is_stmt 0 view .LVU34
 157 0008 026C     		ldr	r2, [r0, #64]
 158              	.LVL15:
1706:./freeRTOS/queue.c **** 	{
 159              		.loc 1 1706 4 view .LVU35
 160 000a 5AB9     		cbnz	r2, .L11
1710:./freeRTOS/queue.c **** 			{
 161              		.loc 1 1710 4 is_stmt 1 view .LVU36
1710:./freeRTOS/queue.c **** 			{
 162              		.loc 1 1710 15 is_stmt 0 view .LVU37
 163 000c 0368     		ldr	r3, [r0]
1710:./freeRTOS/queue.c **** 			{
 164              		.loc 1 1710 6 view .LVU38
 165 000e 1BB1     		cbz	r3, .L20
1699:./freeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 166              		.loc 1 1699 12 view .LVU39
 167 0010 0020     		movs	r0, #0
 168              	.LVL16:
 169              	.L12:
1766:./freeRTOS/queue.c **** 		}
 170              		.loc 1 1766 28 is_stmt 1 view .LVU40
1770:./freeRTOS/queue.c **** 
ARM GAS  /tmp/ccxxKxzb.s 			page 39


 171              		.loc 1 1770 2 view .LVU41
1770:./freeRTOS/queue.c **** 
 172              		.loc 1 1770 49 is_stmt 0 view .LVU42
 173 0012 0136     		adds	r6, r6, #1
 174              	.LVL17:
1770:./freeRTOS/queue.c **** 
 175              		.loc 1 1770 29 view .LVU43
 176 0014 A663     		str	r6, [r4, #56]
1772:./freeRTOS/queue.c **** }
 177              		.loc 1 1772 2 is_stmt 1 view .LVU44
1773:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 178              		.loc 1 1773 1 is_stmt 0 view .LVU45
 179 0016 70BD     		pop	{r4, r5, r6, pc}
 180              	.LVL18:
 181              	.L20:
1713:./freeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 182              		.loc 1 1713 5 is_stmt 1 view .LVU46
1713:./freeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 183              		.loc 1 1713 15 is_stmt 0 view .LVU47
 184 0018 4068     		ldr	r0, [r0, #4]
 185              	.LVL19:
1713:./freeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 186              		.loc 1 1713 15 view .LVU48
 187 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 188              	.LVL20:
1714:./freeRTOS/queue.c **** 			}
 189              		.loc 1 1714 5 is_stmt 1 view .LVU49
1714:./freeRTOS/queue.c **** 			}
 190              		.loc 1 1714 28 is_stmt 0 view .LVU50
 191 001e 0023     		movs	r3, #0
 192 0020 6360     		str	r3, [r4, #4]
 193 0022 F6E7     		b	.L12
 194              	.LVL21:
 195              	.L11:
1723:./freeRTOS/queue.c **** 	{
 196              		.loc 1 1723 7 is_stmt 1 view .LVU51
1723:./freeRTOS/queue.c **** 	{
 197              		.loc 1 1723 9 is_stmt 0 view .LVU52
 198 0024 6DB9     		cbnz	r5, .L13
1725:./freeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 199              		.loc 1 1725 3 is_stmt 1 view .LVU53
1725:./freeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 200              		.loc 1 1725 12 is_stmt 0 view .LVU54
 201 0026 8068     		ldr	r0, [r0, #8]
 202              	.LVL22:
1725:./freeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 203              		.loc 1 1725 12 view .LVU55
 204 0028 FFF7FEFF 		bl	memcpy
 205              	.LVL23:
1726:./freeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 206              		.loc 1 1726 3 is_stmt 1 view .LVU56
1726:./freeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 207              		.loc 1 1726 32 is_stmt 0 view .LVU57
 208 002c 226C     		ldr	r2, [r4, #64]
1726:./freeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 209              		.loc 1 1726 22 view .LVU58
 210 002e A368     		ldr	r3, [r4, #8]
ARM GAS  /tmp/ccxxKxzb.s 			page 40


 211 0030 1344     		add	r3, r3, r2
 212 0032 A360     		str	r3, [r4, #8]
1727:./freeRTOS/queue.c **** 		{
 213              		.loc 1 1727 3 is_stmt 1 view .LVU59
1727:./freeRTOS/queue.c **** 		{
 214              		.loc 1 1727 36 is_stmt 0 view .LVU60
 215 0034 6268     		ldr	r2, [r4, #4]
1727:./freeRTOS/queue.c **** 		{
 216              		.loc 1 1727 5 view .LVU61
 217 0036 9342     		cmp	r3, r2
 218 0038 19D3     		bcc	.L16
1729:./freeRTOS/queue.c **** 		}
 219              		.loc 1 1729 4 is_stmt 1 view .LVU62
1729:./freeRTOS/queue.c **** 		}
 220              		.loc 1 1729 32 is_stmt 0 view .LVU63
 221 003a 2368     		ldr	r3, [r4]
1729:./freeRTOS/queue.c **** 		}
 222              		.loc 1 1729 23 view .LVU64
 223 003c A360     		str	r3, [r4, #8]
1699:./freeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 224              		.loc 1 1699 12 view .LVU65
 225 003e 2846     		mov	r0, r5
 226 0040 E7E7     		b	.L12
 227              	.LVL24:
 228              	.L13:
1738:./freeRTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 229              		.loc 1 1738 3 is_stmt 1 view .LVU66
1738:./freeRTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 230              		.loc 1 1738 12 is_stmt 0 view .LVU67
 231 0042 C068     		ldr	r0, [r0, #12]
 232              	.LVL25:
1738:./freeRTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 233              		.loc 1 1738 12 view .LVU68
 234 0044 FFF7FEFF 		bl	memcpy
 235              	.LVL26:
1739:./freeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 236              		.loc 1 1739 3 is_stmt 1 view .LVU69
1739:./freeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 237              		.loc 1 1739 35 is_stmt 0 view .LVU70
 238 0048 226C     		ldr	r2, [r4, #64]
1739:./freeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 239              		.loc 1 1739 25 view .LVU71
 240 004a 5142     		rsbs	r1, r2, #0
 241 004c E368     		ldr	r3, [r4, #12]
 242 004e 9B1A     		subs	r3, r3, r2
 243 0050 E360     		str	r3, [r4, #12]
1740:./freeRTOS/queue.c **** 		{
 244              		.loc 1 1740 3 is_stmt 1 view .LVU72
1740:./freeRTOS/queue.c **** 		{
 245              		.loc 1 1740 38 is_stmt 0 view .LVU73
 246 0052 2268     		ldr	r2, [r4]
1740:./freeRTOS/queue.c **** 		{
 247              		.loc 1 1740 5 view .LVU74
 248 0054 9342     		cmp	r3, r2
 249 0056 02D2     		bcs	.L14
1742:./freeRTOS/queue.c **** 		}
 250              		.loc 1 1742 4 is_stmt 1 view .LVU75
ARM GAS  /tmp/ccxxKxzb.s 			page 41


1742:./freeRTOS/queue.c **** 		}
 251              		.loc 1 1742 37 is_stmt 0 view .LVU76
 252 0058 6368     		ldr	r3, [r4, #4]
1742:./freeRTOS/queue.c **** 		}
 253              		.loc 1 1742 46 view .LVU77
 254 005a 0B44     		add	r3, r3, r1
1742:./freeRTOS/queue.c **** 		}
 255              		.loc 1 1742 26 view .LVU78
 256 005c E360     		str	r3, [r4, #12]
 257              	.L14:
1746:./freeRTOS/queue.c **** 		}
 258              		.loc 1 1746 28 is_stmt 1 view .LVU79
1749:./freeRTOS/queue.c **** 		{
 259              		.loc 1 1749 3 view .LVU80
1749:./freeRTOS/queue.c **** 		{
 260              		.loc 1 1749 5 is_stmt 0 view .LVU81
 261 005e 022D     		cmp	r5, #2
 262 0060 01D0     		beq	.L21
1699:./freeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 263              		.loc 1 1699 12 view .LVU82
 264 0062 0020     		movs	r0, #0
 265 0064 D5E7     		b	.L12
 266              	.L21:
1751:./freeRTOS/queue.c **** 			{
 267              		.loc 1 1751 4 is_stmt 1 view .LVU83
1751:./freeRTOS/queue.c **** 			{
 268              		.loc 1 1751 6 is_stmt 0 view .LVU84
 269 0066 26B1     		cbz	r6, .L18
1757:./freeRTOS/queue.c **** 			}
 270              		.loc 1 1757 5 is_stmt 1 view .LVU85
 271 0068 013E     		subs	r6, r6, #1
 272              	.LVL27:
1699:./freeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 273              		.loc 1 1699 12 is_stmt 0 view .LVU86
 274 006a 0020     		movs	r0, #0
 275 006c D1E7     		b	.L12
 276              	.L16:
1699:./freeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 277              		.loc 1 1699 12 view .LVU87
 278 006e 2846     		mov	r0, r5
 279 0070 CFE7     		b	.L12
 280              	.L18:
1699:./freeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 281              		.loc 1 1699 12 view .LVU88
 282 0072 0020     		movs	r0, #0
 283 0074 CDE7     		b	.L12
 284              		.cfi_endproc
 285              	.LFE21:
 287              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 288              		.align	1
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv4-sp-d16
 294              	prvCopyDataFromQueue:
 295              	.LVL28:
 296              	.LFB22:
ARM GAS  /tmp/ccxxKxzb.s 			page 42


1777:./freeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 297              		.loc 1 1777 1 is_stmt 1 view -0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 0, uses_anonymous_args = 0
1777:./freeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 301              		.loc 1 1777 1 is_stmt 0 view .LVU90
 302 0000 0346     		mov	r3, r0
1778:./freeRTOS/queue.c **** 	{
 303              		.loc 1 1778 2 is_stmt 1 view .LVU91
1778:./freeRTOS/queue.c **** 	{
 304              		.loc 1 1778 13 is_stmt 0 view .LVU92
 305 0002 026C     		ldr	r2, [r0, #64]
1778:./freeRTOS/queue.c **** 	{
 306              		.loc 1 1778 4 view .LVU93
 307 0004 6AB1     		cbz	r2, .L26
1777:./freeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 308              		.loc 1 1777 1 view .LVU94
 309 0006 10B5     		push	{r4, lr}
 310              	.LCFI3:
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 4, -8
 313              		.cfi_offset 14, -4
 314 0008 0846     		mov	r0, r1
 315              	.LVL29:
1780:./freeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 316              		.loc 1 1780 3 is_stmt 1 view .LVU95
1780:./freeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 317              		.loc 1 1780 25 is_stmt 0 view .LVU96
 318 000a D968     		ldr	r1, [r3, #12]
 319              	.LVL30:
1780:./freeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 320              		.loc 1 1780 25 view .LVU97
 321 000c 1144     		add	r1, r1, r2
 322 000e D960     		str	r1, [r3, #12]
1781:./freeRTOS/queue.c **** 		{
 323              		.loc 1 1781 3 is_stmt 1 view .LVU98
1781:./freeRTOS/queue.c **** 		{
 324              		.loc 1 1781 5 is_stmt 0 view .LVU99
 325 0010 5C68     		ldr	r4, [r3, #4]
 326 0012 A142     		cmp	r1, r4
 327 0014 01D3     		bcc	.L24
1783:./freeRTOS/queue.c **** 		}
 328              		.loc 1 1783 4 is_stmt 1 view .LVU100
1783:./freeRTOS/queue.c **** 		}
 329              		.loc 1 1783 35 is_stmt 0 view .LVU101
 330 0016 1968     		ldr	r1, [r3]
1783:./freeRTOS/queue.c **** 		}
 331              		.loc 1 1783 26 view .LVU102
 332 0018 D960     		str	r1, [r3, #12]
 333              	.L24:
1787:./freeRTOS/queue.c **** 		}
 334              		.loc 1 1787 28 is_stmt 1 view .LVU103
1789:./freeRTOS/queue.c **** 	}
 335              		.loc 1 1789 3 view .LVU104
1789:./freeRTOS/queue.c **** 	}
 336              		.loc 1 1789 12 is_stmt 0 view .LVU105
ARM GAS  /tmp/ccxxKxzb.s 			page 43


 337 001a D968     		ldr	r1, [r3, #12]
 338 001c FFF7FEFF 		bl	memcpy
 339              	.LVL31:
1791:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 340              		.loc 1 1791 1 view .LVU106
 341 0020 10BD     		pop	{r4, pc}
 342              	.LVL32:
 343              	.L26:
 344              	.LCFI4:
 345              		.cfi_def_cfa_offset 0
 346              		.cfi_restore 4
 347              		.cfi_restore 14
1791:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 348              		.loc 1 1791 1 view .LVU107
 349 0022 7047     		bx	lr
 350              		.cfi_endproc
 351              	.LFE22:
 353              		.section	.text.prvUnlockQueue,"ax",%progbits
 354              		.align	1
 355              		.syntax unified
 356              		.thumb
 357              		.thumb_func
 358              		.fpu fpv4-sp-d16
 360              	prvUnlockQueue:
 361              	.LVL33:
 362              	.LFB23:
1795:./freeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 363              		.loc 1 1795 1 is_stmt 1 view -0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
1795:./freeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 367              		.loc 1 1795 1 is_stmt 0 view .LVU109
 368 0000 38B5     		push	{r3, r4, r5, lr}
 369              	.LCFI5:
 370              		.cfi_def_cfa_offset 16
 371              		.cfi_offset 3, -16
 372              		.cfi_offset 4, -12
 373              		.cfi_offset 5, -8
 374              		.cfi_offset 14, -4
 375 0002 0546     		mov	r5, r0
1802:./freeRTOS/queue.c **** 	{
 376              		.loc 1 1802 2 is_stmt 1 view .LVU110
 377 0004 FFF7FEFF 		bl	vPortEnterCritical
 378              	.LVL34:
 379              	.LBB23:
1804:./freeRTOS/queue.c **** 
 380              		.loc 1 1804 3 view .LVU111
1804:./freeRTOS/queue.c **** 
 381              		.loc 1 1804 10 is_stmt 0 view .LVU112
 382 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 383 000c 64B2     		sxtb	r4, r4
 384              	.LVL35:
1807:./freeRTOS/queue.c **** 		{
 385              		.loc 1 1807 3 is_stmt 1 view .LVU113
1807:./freeRTOS/queue.c **** 		{
 386              		.loc 1 1807 8 is_stmt 0 view .LVU114
ARM GAS  /tmp/ccxxKxzb.s 			page 44


 387 000e 01E0     		b	.L30
 388              	.L32:
1865:./freeRTOS/queue.c **** 					}
 389              		.loc 1 1865 31 is_stmt 1 view .LVU115
1875:./freeRTOS/queue.c **** 		}
 390              		.loc 1 1875 4 view .LVU116
 391 0010 013C     		subs	r4, r4, #1
 392              	.LVL36:
1875:./freeRTOS/queue.c **** 		}
 393              		.loc 1 1875 4 is_stmt 0 view .LVU117
 394 0012 64B2     		sxtb	r4, r4
 395              	.LVL37:
 396              	.L30:
1807:./freeRTOS/queue.c **** 		{
 397              		.loc 1 1807 8 is_stmt 1 view .LVU118
 398 0014 002C     		cmp	r4, #0
 399 0016 0ADD     		ble	.L31
1855:./freeRTOS/queue.c **** 				{
 400              		.loc 1 1855 5 view .LVU119
1855:./freeRTOS/queue.c **** 				{
 401              		.loc 1 1855 9 is_stmt 0 view .LVU120
 402 0018 6B6A     		ldr	r3, [r5, #36]
1855:./freeRTOS/queue.c **** 				{
 403              		.loc 1 1855 7 view .LVU121
 404 001a 43B1     		cbz	r3, .L31
1857:./freeRTOS/queue.c **** 					{
 405              		.loc 1 1857 6 is_stmt 1 view .LVU122
1857:./freeRTOS/queue.c **** 					{
 406              		.loc 1 1857 10 is_stmt 0 view .LVU123
 407 001c 05F12400 		add	r0, r5, #36
 408 0020 FFF7FEFF 		bl	xTaskRemoveFromEventList
 409              	.LVL38:
1857:./freeRTOS/queue.c **** 					{
 410              		.loc 1 1857 8 view .LVU124
 411 0024 0028     		cmp	r0, #0
 412 0026 F3D0     		beq	.L32
1861:./freeRTOS/queue.c **** 					}
 413              		.loc 1 1861 7 is_stmt 1 view .LVU125
 414 0028 FFF7FEFF 		bl	vTaskMissedYield
 415              	.LVL39:
 416 002c F0E7     		b	.L32
 417              	.L31:
1878:./freeRTOS/queue.c **** 	}
 418              		.loc 1 1878 3 view .LVU126
1878:./freeRTOS/queue.c **** 	}
 419              		.loc 1 1878 20 is_stmt 0 view .LVU127
 420 002e FF23     		movs	r3, #255
 421 0030 85F84530 		strb	r3, [r5, #69]
 422              	.LBE23:
1880:./freeRTOS/queue.c **** 
 423              		.loc 1 1880 2 is_stmt 1 view .LVU128
 424 0034 FFF7FEFF 		bl	vPortExitCritical
 425              	.LVL40:
1883:./freeRTOS/queue.c **** 	{
 426              		.loc 1 1883 2 view .LVU129
 427 0038 FFF7FEFF 		bl	vPortEnterCritical
 428              	.LVL41:
ARM GAS  /tmp/ccxxKxzb.s 			page 45


 429              	.LBB24:
1885:./freeRTOS/queue.c **** 
 430              		.loc 1 1885 3 view .LVU130
1885:./freeRTOS/queue.c **** 
 431              		.loc 1 1885 10 is_stmt 0 view .LVU131
 432 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 433              	.LVL42:
1885:./freeRTOS/queue.c **** 
 434              		.loc 1 1885 10 view .LVU132
 435 0040 64B2     		sxtb	r4, r4
 436              	.LVL43:
1887:./freeRTOS/queue.c **** 		{
 437              		.loc 1 1887 3 is_stmt 1 view .LVU133
1887:./freeRTOS/queue.c **** 		{
 438              		.loc 1 1887 8 is_stmt 0 view .LVU134
 439 0042 01E0     		b	.L34
 440              	.L36:
1897:./freeRTOS/queue.c **** 				}
 441              		.loc 1 1897 30 is_stmt 1 view .LVU135
1900:./freeRTOS/queue.c **** 			}
 442              		.loc 1 1900 5 view .LVU136
 443 0044 013C     		subs	r4, r4, #1
 444              	.LVL44:
1900:./freeRTOS/queue.c **** 			}
 445              		.loc 1 1900 5 is_stmt 0 view .LVU137
 446 0046 64B2     		sxtb	r4, r4
 447              	.LVL45:
 448              	.L34:
1887:./freeRTOS/queue.c **** 		{
 449              		.loc 1 1887 8 is_stmt 1 view .LVU138
 450 0048 002C     		cmp	r4, #0
 451 004a 0ADD     		ble	.L35
1889:./freeRTOS/queue.c **** 			{
 452              		.loc 1 1889 4 view .LVU139
1889:./freeRTOS/queue.c **** 			{
 453              		.loc 1 1889 8 is_stmt 0 view .LVU140
 454 004c 2B69     		ldr	r3, [r5, #16]
1889:./freeRTOS/queue.c **** 			{
 455              		.loc 1 1889 6 view .LVU141
 456 004e 43B1     		cbz	r3, .L35
1891:./freeRTOS/queue.c **** 				{
 457              		.loc 1 1891 5 is_stmt 1 view .LVU142
1891:./freeRTOS/queue.c **** 				{
 458              		.loc 1 1891 9 is_stmt 0 view .LVU143
 459 0050 05F11000 		add	r0, r5, #16
 460 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 461              	.LVL46:
1891:./freeRTOS/queue.c **** 				{
 462              		.loc 1 1891 7 view .LVU144
 463 0058 0028     		cmp	r0, #0
 464 005a F3D0     		beq	.L36
1893:./freeRTOS/queue.c **** 				}
 465              		.loc 1 1893 6 is_stmt 1 view .LVU145
 466 005c FFF7FEFF 		bl	vTaskMissedYield
 467              	.LVL47:
 468 0060 F0E7     		b	.L36
 469              	.L35:
ARM GAS  /tmp/ccxxKxzb.s 			page 46


1908:./freeRTOS/queue.c **** 	}
 470              		.loc 1 1908 3 view .LVU146
1908:./freeRTOS/queue.c **** 	}
 471              		.loc 1 1908 20 is_stmt 0 view .LVU147
 472 0062 FF23     		movs	r3, #255
 473 0064 85F84430 		strb	r3, [r5, #68]
 474              	.LBE24:
1910:./freeRTOS/queue.c **** }
 475              		.loc 1 1910 2 is_stmt 1 view .LVU148
 476 0068 FFF7FEFF 		bl	vPortExitCritical
 477              	.LVL48:
1911:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 478              		.loc 1 1911 1 is_stmt 0 view .LVU149
 479 006c 38BD     		pop	{r3, r4, r5, pc}
1911:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 480              		.loc 1 1911 1 view .LVU150
 481              		.cfi_endproc
 482              	.LFE23:
 484              		.section	.text.xQueueGenericReset,"ax",%progbits
 485              		.align	1
 486              		.global	xQueueGenericReset
 487              		.syntax unified
 488              		.thumb
 489              		.thumb_func
 490              		.fpu fpv4-sp-d16
 492              	xQueueGenericReset:
 493              	.LVL49:
 494              	.LFB5:
 280:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 495              		.loc 1 280 1 is_stmt 1 view -0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 280:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 499              		.loc 1 280 1 is_stmt 0 view .LVU152
 500 0000 38B5     		push	{r3, r4, r5, lr}
 501              	.LCFI6:
 502              		.cfi_def_cfa_offset 16
 503              		.cfi_offset 3, -16
 504              		.cfi_offset 4, -12
 505              		.cfi_offset 5, -8
 506              		.cfi_offset 14, -4
 507 0002 0446     		mov	r4, r0
 508 0004 0D46     		mov	r5, r1
 281:./freeRTOS/queue.c **** 
 509              		.loc 1 281 1 is_stmt 1 view .LVU153
 510              	.LVL50:
 283:./freeRTOS/queue.c **** 
 511              		.loc 1 283 25 view .LVU154
 285:./freeRTOS/queue.c **** 	{
 512              		.loc 1 285 2 view .LVU155
 513 0006 FFF7FEFF 		bl	vPortEnterCritical
 514              	.LVL51:
 287:./freeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 515              		.loc 1 287 3 view .LVU156
 287:./freeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 516              		.loc 1 287 28 is_stmt 0 view .LVU157
ARM GAS  /tmp/ccxxKxzb.s 			page 47


 517 000a 2368     		ldr	r3, [r4]
 287:./freeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 518              		.loc 1 287 48 view .LVU158
 519 000c E26B     		ldr	r2, [r4, #60]
 287:./freeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 520              		.loc 1 287 68 view .LVU159
 521 000e 216C     		ldr	r1, [r4, #64]
 287:./freeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 522              		.loc 1 287 37 view .LVU160
 523 0010 01FB0230 		mla	r0, r1, r2, r3
 287:./freeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 524              		.loc 1 287 19 view .LVU161
 525 0014 6060     		str	r0, [r4, #4]
 288:./freeRTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 526              		.loc 1 288 3 is_stmt 1 view .LVU162
 288:./freeRTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 527              		.loc 1 288 30 is_stmt 0 view .LVU163
 528 0016 0020     		movs	r0, #0
 529 0018 A063     		str	r0, [r4, #56]
 289:./freeRTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 530              		.loc 1 289 3 is_stmt 1 view .LVU164
 289:./freeRTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 531              		.loc 1 289 22 is_stmt 0 view .LVU165
 532 001a A360     		str	r3, [r4, #8]
 290:./freeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 533              		.loc 1 290 3 is_stmt 1 view .LVU166
 290:./freeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 534              		.loc 1 290 67 is_stmt 0 view .LVU167
 535 001c 013A     		subs	r2, r2, #1
 290:./freeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 536              		.loc 1 290 43 view .LVU168
 537 001e 02FB0133 		mla	r3, r2, r1, r3
 290:./freeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 538              		.loc 1 290 25 view .LVU169
 539 0022 E360     		str	r3, [r4, #12]
 291:./freeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 540              		.loc 1 291 3 is_stmt 1 view .LVU170
 291:./freeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 541              		.loc 1 291 20 is_stmt 0 view .LVU171
 542 0024 FF23     		movs	r3, #255
 543 0026 84F84430 		strb	r3, [r4, #68]
 292:./freeRTOS/queue.c **** 
 544              		.loc 1 292 3 is_stmt 1 view .LVU172
 292:./freeRTOS/queue.c **** 
 545              		.loc 1 292 20 is_stmt 0 view .LVU173
 546 002a 84F84530 		strb	r3, [r4, #69]
 294:./freeRTOS/queue.c **** 		{
 547              		.loc 1 294 3 is_stmt 1 view .LVU174
 294:./freeRTOS/queue.c **** 		{
 548              		.loc 1 294 5 is_stmt 0 view .LVU175
 549 002e B5B9     		cbnz	r5, .L40
 301:./freeRTOS/queue.c **** 			{
 550              		.loc 1 301 4 is_stmt 1 view .LVU176
 301:./freeRTOS/queue.c **** 			{
 551              		.loc 1 301 8 is_stmt 0 view .LVU177
 552 0030 2369     		ldr	r3, [r4, #16]
 301:./freeRTOS/queue.c **** 			{
ARM GAS  /tmp/ccxxKxzb.s 			page 48


 553              		.loc 1 301 6 view .LVU178
 554 0032 1BB9     		cbnz	r3, .L43
 555              	.L41:
 324:./freeRTOS/queue.c **** 
 556              		.loc 1 324 2 is_stmt 1 view .LVU179
 557 0034 FFF7FEFF 		bl	vPortExitCritical
 558              	.LVL52:
 328:./freeRTOS/queue.c **** }
 559              		.loc 1 328 2 view .LVU180
 329:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 560              		.loc 1 329 1 is_stmt 0 view .LVU181
 561 0038 0120     		movs	r0, #1
 562 003a 38BD     		pop	{r3, r4, r5, pc}
 563              	.LVL53:
 564              	.L43:
 303:./freeRTOS/queue.c **** 				{
 565              		.loc 1 303 5 is_stmt 1 view .LVU182
 303:./freeRTOS/queue.c **** 				{
 566              		.loc 1 303 9 is_stmt 0 view .LVU183
 567 003c 04F11000 		add	r0, r4, #16
 568 0040 FFF7FEFF 		bl	xTaskRemoveFromEventList
 569              	.LVL54:
 303:./freeRTOS/queue.c **** 				{
 570              		.loc 1 303 7 view .LVU184
 571 0044 0028     		cmp	r0, #0
 572 0046 F5D0     		beq	.L41
 305:./freeRTOS/queue.c **** 				}
 573              		.loc 1 305 6 is_stmt 1 view .LVU185
 574 0048 4FF0E023 		mov	r3, #-536813568
 575 004c 4FF08052 		mov	r2, #268435456
 576 0050 C3F8042D 		str	r2, [r3, #3332]
 305:./freeRTOS/queue.c **** 				}
 577              		.loc 1 305 6 view .LVU186
 578              		.syntax unified
 579              	@ 305 "./freeRTOS/queue.c" 1
 580 0054 BFF34F8F 		dsb
 581              	@ 0 "" 2
 305:./freeRTOS/queue.c **** 				}
 582              		.loc 1 305 6 view .LVU187
 583              	@ 305 "./freeRTOS/queue.c" 1
 584 0058 BFF36F8F 		isb
 585              	@ 0 "" 2
 305:./freeRTOS/queue.c **** 				}
 586              		.loc 1 305 38 view .LVU188
 587              		.thumb
 588              		.syntax unified
 589 005c EAE7     		b	.L41
 590              	.L40:
 320:./freeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 591              		.loc 1 320 4 view .LVU189
 592 005e 04F11000 		add	r0, r4, #16
 593 0062 FFF7FEFF 		bl	vListInitialise
 594              	.LVL55:
 321:./freeRTOS/queue.c **** 		}
 595              		.loc 1 321 4 view .LVU190
 596 0066 04F12400 		add	r0, r4, #36
 597 006a FFF7FEFF 		bl	vListInitialise
ARM GAS  /tmp/ccxxKxzb.s 			page 49


 598              	.LVL56:
 599 006e E1E7     		b	.L41
 600              		.cfi_endproc
 601              	.LFE5:
 603              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 604              		.align	1
 605              		.syntax unified
 606              		.thumb
 607              		.thumb_func
 608              		.fpu fpv4-sp-d16
 610              	prvInitialiseNewQueue:
 611              	.LVL57:
 612              	.LFB7:
 433:./freeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 613              		.loc 1 433 1 view -0
 614              		.cfi_startproc
 615              		@ args = 4, pretend = 0, frame = 0
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 433:./freeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 617              		.loc 1 433 1 is_stmt 0 view .LVU192
 618 0000 10B5     		push	{r4, lr}
 619              	.LCFI7:
 620              		.cfi_def_cfa_offset 8
 621              		.cfi_offset 4, -8
 622              		.cfi_offset 14, -4
 623 0002 0346     		mov	r3, r0
 624              	.LVL58:
 433:./freeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 625              		.loc 1 433 1 view .LVU193
 626 0004 0298     		ldr	r0, [sp, #8]
 627              	.LVL59:
 436:./freeRTOS/queue.c **** 
 628              		.loc 1 436 2 is_stmt 1 view .LVU194
 438:./freeRTOS/queue.c **** 	{
 629              		.loc 1 438 2 view .LVU195
 438:./freeRTOS/queue.c **** 	{
 630              		.loc 1 438 4 is_stmt 0 view .LVU196
 631 0006 0C46     		mov	r4, r1
 632 0008 31B9     		cbnz	r1, .L45
 444:./freeRTOS/queue.c **** 	}
 633              		.loc 1 444 3 is_stmt 1 view .LVU197
 444:./freeRTOS/queue.c **** 	}
 634              		.loc 1 444 22 is_stmt 0 view .LVU198
 635 000a 0060     		str	r0, [r0]
 636              	.L46:
 454:./freeRTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 637              		.loc 1 454 2 is_stmt 1 view .LVU199
 454:./freeRTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 638              		.loc 1 454 23 is_stmt 0 view .LVU200
 639 000c C363     		str	r3, [r0, #60]
 455:./freeRTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 640              		.loc 1 455 2 is_stmt 1 view .LVU201
 455:./freeRTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 641              		.loc 1 455 25 is_stmt 0 view .LVU202
 642 000e 0464     		str	r4, [r0, #64]
 456:./freeRTOS/queue.c **** 
 643              		.loc 1 456 2 is_stmt 1 view .LVU203
ARM GAS  /tmp/ccxxKxzb.s 			page 50


 456:./freeRTOS/queue.c **** 
 644              		.loc 1 456 11 is_stmt 0 view .LVU204
 645 0010 0121     		movs	r1, #1
 646              	.LVL60:
 456:./freeRTOS/queue.c **** 
 647              		.loc 1 456 11 view .LVU205
 648 0012 FFF7FEFF 		bl	xQueueGenericReset
 649              	.LVL61:
 470:./freeRTOS/queue.c **** }
 650              		.loc 1 470 33 is_stmt 1 view .LVU206
 471:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 651              		.loc 1 471 1 is_stmt 0 view .LVU207
 652 0016 10BD     		pop	{r4, pc}
 653              	.LVL62:
 654              	.L45:
 449:./freeRTOS/queue.c **** 	}
 655              		.loc 1 449 3 is_stmt 1 view .LVU208
 449:./freeRTOS/queue.c **** 	}
 656              		.loc 1 449 22 is_stmt 0 view .LVU209
 657 0018 0260     		str	r2, [r0]
 658 001a F7E7     		b	.L46
 659              		.cfi_endproc
 660              	.LFE7:
 662              		.section	.text.xQueueGenericCreate,"ax",%progbits
 663              		.align	1
 664              		.global	xQueueGenericCreate
 665              		.syntax unified
 666              		.thumb
 667              		.thumb_func
 668              		.fpu fpv4-sp-d16
 670              	xQueueGenericCreate:
 671              	.LVL63:
 672              	.LFB6:
 387:./freeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 673              		.loc 1 387 2 is_stmt 1 view -0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 387:./freeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 677              		.loc 1 387 2 is_stmt 0 view .LVU211
 678 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 679              	.LCFI8:
 680              		.cfi_def_cfa_offset 20
 681              		.cfi_offset 4, -20
 682              		.cfi_offset 5, -16
 683              		.cfi_offset 6, -12
 684              		.cfi_offset 7, -8
 685              		.cfi_offset 14, -4
 686 0002 83B0     		sub	sp, sp, #12
 687              	.LCFI9:
 688              		.cfi_def_cfa_offset 32
 689 0004 0446     		mov	r4, r0
 690 0006 1546     		mov	r5, r2
 388:./freeRTOS/queue.c **** 	size_t xQueueSizeInBytes;
 691              		.loc 1 388 2 is_stmt 1 view .LVU212
 389:./freeRTOS/queue.c **** 	uint8_t *pucQueueStorage;
 692              		.loc 1 389 2 view .LVU213
ARM GAS  /tmp/ccxxKxzb.s 			page 51


 390:./freeRTOS/queue.c **** 
 693              		.loc 1 390 2 view .LVU214
 392:./freeRTOS/queue.c **** 
 694              		.loc 1 392 52 view .LVU215
 394:./freeRTOS/queue.c **** 		{
 695              		.loc 1 394 3 view .LVU216
 394:./freeRTOS/queue.c **** 		{
 696              		.loc 1 394 5 is_stmt 0 view .LVU217
 697 0008 0F46     		mov	r7, r1
 698 000a 89B1     		cbz	r1, .L51
 403:./freeRTOS/queue.c **** 		}
 699              		.loc 1 403 4 is_stmt 1 view .LVU218
 403:./freeRTOS/queue.c **** 		}
 700              		.loc 1 403 22 is_stmt 0 view .LVU219
 701 000c 00FB01F0 		mul	r0, r0, r1
 702              	.LVL64:
 703              	.L49:
 406:./freeRTOS/queue.c **** 
 704              		.loc 1 406 3 is_stmt 1 view .LVU220
 406:./freeRTOS/queue.c **** 
 705              		.loc 1 406 30 is_stmt 0 view .LVU221
 706 0010 4830     		adds	r0, r0, #72
 707              	.LVL65:
 406:./freeRTOS/queue.c **** 
 708              		.loc 1 406 30 view .LVU222
 709 0012 FFF7FEFF 		bl	pvPortMalloc
 710              	.LVL66:
 408:./freeRTOS/queue.c **** 		{
 711              		.loc 1 408 3 is_stmt 1 view .LVU223
 408:./freeRTOS/queue.c **** 		{
 712              		.loc 1 408 5 is_stmt 0 view .LVU224
 713 0016 0646     		mov	r6, r0
 714 0018 38B1     		cbz	r0, .L48
 412:./freeRTOS/queue.c **** 
 715              		.loc 1 412 4 is_stmt 1 view .LVU225
 716              	.LVL67:
 423:./freeRTOS/queue.c **** 		}
 717              		.loc 1 423 4 view .LVU226
 718 001a 0090     		str	r0, [sp]
 719 001c 2B46     		mov	r3, r5
 720 001e 00F14802 		add	r2, r0, #72
 721              	.LVL68:
 423:./freeRTOS/queue.c **** 		}
 722              		.loc 1 423 4 is_stmt 0 view .LVU227
 723 0022 3946     		mov	r1, r7
 724 0024 2046     		mov	r0, r4
 725              	.LVL69:
 423:./freeRTOS/queue.c **** 		}
 726              		.loc 1 423 4 view .LVU228
 727 0026 FFF7FEFF 		bl	prvInitialiseNewQueue
 728              	.LVL70:
 426:./freeRTOS/queue.c **** 	}
 729              		.loc 1 426 3 is_stmt 1 view .LVU229
 730              	.L48:
 427:./freeRTOS/queue.c **** 
 731              		.loc 1 427 2 is_stmt 0 view .LVU230
 732 002a 3046     		mov	r0, r6
ARM GAS  /tmp/ccxxKxzb.s 			page 52


 733 002c 03B0     		add	sp, sp, #12
 734              	.LCFI10:
 735              		.cfi_remember_state
 736              		.cfi_def_cfa_offset 20
 737              		@ sp needed
 738 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 739              	.LVL71:
 740              	.L51:
 741              	.LCFI11:
 742              		.cfi_restore_state
 397:./freeRTOS/queue.c **** 		}
 743              		.loc 1 397 22 view .LVU231
 744 0030 0846     		mov	r0, r1
 745              	.LVL72:
 397:./freeRTOS/queue.c **** 		}
 746              		.loc 1 397 22 view .LVU232
 747 0032 EDE7     		b	.L49
 748              		.cfi_endproc
 749              	.LFE6:
 751              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 752              		.align	1
 753              		.global	xQueueCreateCountingSemaphore
 754              		.syntax unified
 755              		.thumb
 756              		.thumb_func
 757              		.fpu fpv4-sp-d16
 759              	xQueueCreateCountingSemaphore:
 760              	.LVL73:
 761              	.LFB10:
 698:./freeRTOS/queue.c **** 	QueueHandle_t xHandle;
 762              		.loc 1 698 2 is_stmt 1 view -0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 698:./freeRTOS/queue.c **** 	QueueHandle_t xHandle;
 766              		.loc 1 698 2 is_stmt 0 view .LVU234
 767 0000 10B5     		push	{r4, lr}
 768              	.LCFI12:
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 4, -8
 771              		.cfi_offset 14, -4
 772 0002 0C46     		mov	r4, r1
 699:./freeRTOS/queue.c **** 
 773              		.loc 1 699 2 is_stmt 1 view .LVU235
 701:./freeRTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 774              		.loc 1 701 34 view .LVU236
 702:./freeRTOS/queue.c **** 
 775              		.loc 1 702 47 view .LVU237
 704:./freeRTOS/queue.c **** 
 776              		.loc 1 704 3 view .LVU238
 704:./freeRTOS/queue.c **** 
 777              		.loc 1 704 13 is_stmt 0 view .LVU239
 778 0004 0222     		movs	r2, #2
 779 0006 0021     		movs	r1, #0
 780              	.LVL74:
 704:./freeRTOS/queue.c **** 
 781              		.loc 1 704 13 view .LVU240
ARM GAS  /tmp/ccxxKxzb.s 			page 53


 782 0008 FFF7FEFF 		bl	xQueueGenericCreate
 783              	.LVL75:
 706:./freeRTOS/queue.c **** 		{
 784              		.loc 1 706 3 is_stmt 1 view .LVU241
 706:./freeRTOS/queue.c **** 		{
 785              		.loc 1 706 5 is_stmt 0 view .LVU242
 786 000c 00B1     		cbz	r0, .L53
 708:./freeRTOS/queue.c **** 
 787              		.loc 1 708 4 is_stmt 1 view .LVU243
 708:./freeRTOS/queue.c **** 
 788              		.loc 1 708 49 is_stmt 0 view .LVU244
 789 000e 8463     		str	r4, [r0, #56]
 710:./freeRTOS/queue.c **** 		}
 790              		.loc 1 710 36 is_stmt 1 view .LVU245
 714:./freeRTOS/queue.c **** 		}
 791              		.loc 1 714 43 view .LVU246
 717:./freeRTOS/queue.c **** 	}
 792              		.loc 1 717 3 view .LVU247
 793              	.L53:
 718:./freeRTOS/queue.c **** 
 794              		.loc 1 718 2 is_stmt 0 view .LVU248
 795 0010 10BD     		pop	{r4, pc}
 718:./freeRTOS/queue.c **** 
 796              		.loc 1 718 2 view .LVU249
 797              		.cfi_endproc
 798              	.LFE10:
 800              		.section	.text.xQueueGenericSend,"ax",%progbits
 801              		.align	1
 802              		.global	xQueueGenericSend
 803              		.syntax unified
 804              		.thumb
 805              		.thumb_func
 806              		.fpu fpv4-sp-d16
 808              	xQueueGenericSend:
 809              	.LVL76:
 810              	.LFB11:
 724:./freeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 811              		.loc 1 724 1 is_stmt 1 view -0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 16
 814              		@ frame_needed = 0, uses_anonymous_args = 0
 724:./freeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 815              		.loc 1 724 1 is_stmt 0 view .LVU251
 816 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 817              	.LCFI13:
 818              		.cfi_def_cfa_offset 20
 819              		.cfi_offset 4, -20
 820              		.cfi_offset 5, -16
 821              		.cfi_offset 6, -12
 822              		.cfi_offset 7, -8
 823              		.cfi_offset 14, -4
 824 0002 85B0     		sub	sp, sp, #20
 825              	.LCFI14:
 826              		.cfi_def_cfa_offset 40
 827 0004 0446     		mov	r4, r0
 828 0006 0F46     		mov	r7, r1
 829 0008 0192     		str	r2, [sp, #4]
ARM GAS  /tmp/ccxxKxzb.s 			page 54


 830 000a 1D46     		mov	r5, r3
 725:./freeRTOS/queue.c **** TimeOut_t xTimeOut;
 831              		.loc 1 725 1 is_stmt 1 view .LVU252
 832              	.LVL77:
 726:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 833              		.loc 1 726 1 view .LVU253
 727:./freeRTOS/queue.c **** 
 834              		.loc 1 727 1 view .LVU254
 725:./freeRTOS/queue.c **** TimeOut_t xTimeOut;
 835              		.loc 1 725 12 is_stmt 0 view .LVU255
 836 000c 0026     		movs	r6, #0
 837 000e 3DE0     		b	.L57
 838              	.LVL78:
 839              	.L58:
 752:./freeRTOS/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 840              		.loc 1 752 31 is_stmt 1 view .LVU256
 753:./freeRTOS/queue.c **** 
 841              		.loc 1 753 5 view .LVU257
 753:./freeRTOS/queue.c **** 
 842              		.loc 1 753 22 is_stmt 0 view .LVU258
 843 0010 2A46     		mov	r2, r5
 844 0012 3946     		mov	r1, r7
 845 0014 2046     		mov	r0, r4
 846 0016 FFF7FEFF 		bl	prvCopyDataToQueue
 847              	.LVL79:
 808:./freeRTOS/queue.c **** 					{
 848              		.loc 1 808 6 is_stmt 1 view .LVU259
 808:./freeRTOS/queue.c **** 					{
 849              		.loc 1 808 10 is_stmt 0 view .LVU260
 850 001a 636A     		ldr	r3, [r4, #36]
 808:./freeRTOS/queue.c **** 					{
 851              		.loc 1 808 8 view .LVU261
 852 001c 7BB9     		cbnz	r3, .L71
 823:./freeRTOS/queue.c **** 					{
 853              		.loc 1 823 11 is_stmt 1 view .LVU262
 823:./freeRTOS/queue.c **** 					{
 854              		.loc 1 823 13 is_stmt 0 view .LVU263
 855 001e 48B1     		cbz	r0, .L61
 829:./freeRTOS/queue.c **** 					}
 856              		.loc 1 829 7 is_stmt 1 view .LVU264
 857 0020 4FF0E023 		mov	r3, #-536813568
 858 0024 4FF08052 		mov	r2, #268435456
 859 0028 C3F8042D 		str	r2, [r3, #3332]
 829:./freeRTOS/queue.c **** 					}
 860              		.loc 1 829 7 view .LVU265
 861              		.syntax unified
 862              	@ 829 "./freeRTOS/queue.c" 1
 863 002c BFF34F8F 		dsb
 864              	@ 0 "" 2
 829:./freeRTOS/queue.c **** 					}
 865              		.loc 1 829 7 view .LVU266
 866              	@ 829 "./freeRTOS/queue.c" 1
 867 0030 BFF36F8F 		isb
 868              	@ 0 "" 2
 829:./freeRTOS/queue.c **** 					}
 869              		.loc 1 829 39 view .LVU267
 870              	.LVL80:
ARM GAS  /tmp/ccxxKxzb.s 			page 55


 871              		.thumb
 872              		.syntax unified
 873              	.L61:
 833:./freeRTOS/queue.c **** 					}
 874              		.loc 1 833 31 view .LVU268
 838:./freeRTOS/queue.c **** 				return pdPASS;
 875              		.loc 1 838 5 view .LVU269
 876 0034 FFF7FEFF 		bl	vPortExitCritical
 877              	.LVL81:
 839:./freeRTOS/queue.c **** 			}
 878              		.loc 1 839 5 view .LVU270
 839:./freeRTOS/queue.c **** 			}
 879              		.loc 1 839 12 is_stmt 0 view .LVU271
 880 0038 0120     		movs	r0, #1
 881              	.L56:
 918:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 882              		.loc 1 918 1 view .LVU272
 883 003a 05B0     		add	sp, sp, #20
 884              	.LCFI15:
 885              		.cfi_remember_state
 886              		.cfi_def_cfa_offset 20
 887              		@ sp needed
 888 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 889              	.LVL82:
 890              	.L71:
 891              	.LCFI16:
 892              		.cfi_restore_state
 810:./freeRTOS/queue.c **** 						{
 893              		.loc 1 810 7 is_stmt 1 view .LVU273
 810:./freeRTOS/queue.c **** 						{
 894              		.loc 1 810 11 is_stmt 0 view .LVU274
 895 003e 04F12400 		add	r0, r4, #36
 896              	.LVL83:
 810:./freeRTOS/queue.c **** 						{
 897              		.loc 1 810 11 view .LVU275
 898 0042 FFF7FEFF 		bl	xTaskRemoveFromEventList
 899              	.LVL84:
 810:./freeRTOS/queue.c **** 						{
 900              		.loc 1 810 9 view .LVU276
 901 0046 0028     		cmp	r0, #0
 902 0048 F4D0     		beq	.L61
 816:./freeRTOS/queue.c **** 						}
 903              		.loc 1 816 8 is_stmt 1 view .LVU277
 904 004a 4FF0E023 		mov	r3, #-536813568
 905 004e 4FF08052 		mov	r2, #268435456
 906 0052 C3F8042D 		str	r2, [r3, #3332]
 816:./freeRTOS/queue.c **** 						}
 907              		.loc 1 816 8 view .LVU278
 908              		.syntax unified
 909              	@ 816 "./freeRTOS/queue.c" 1
 910 0056 BFF34F8F 		dsb
 911              	@ 0 "" 2
 816:./freeRTOS/queue.c **** 						}
 912              		.loc 1 816 8 view .LVU279
 913              	@ 816 "./freeRTOS/queue.c" 1
 914 005a BFF36F8F 		isb
 915              	@ 0 "" 2
ARM GAS  /tmp/ccxxKxzb.s 			page 56


 816:./freeRTOS/queue.c **** 						}
 916              		.loc 1 816 40 view .LVU280
 917              		.thumb
 918              		.syntax unified
 919 005e E9E7     		b	.L61
 920              	.L72:
 847:./freeRTOS/queue.c **** 
 921              		.loc 1 847 6 view .LVU281
 922 0060 FFF7FEFF 		bl	vPortExitCritical
 923              	.LVL85:
 851:./freeRTOS/queue.c **** 					return errQUEUE_FULL;
 924              		.loc 1 851 39 view .LVU282
 852:./freeRTOS/queue.c **** 				}
 925              		.loc 1 852 6 view .LVU283
 852:./freeRTOS/queue.c **** 				}
 926              		.loc 1 852 13 is_stmt 0 view .LVU284
 927 0064 0020     		movs	r0, #0
 928 0066 E8E7     		b	.L56
 929              	.L73:
 858:./freeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 930              		.loc 1 858 6 is_stmt 1 view .LVU285
 931 0068 02A8     		add	r0, sp, #8
 932 006a FFF7FEFF 		bl	vTaskSetTimeOutState
 933              	.LVL86:
 859:./freeRTOS/queue.c **** 				}
 934              		.loc 1 859 6 view .LVU286
 859:./freeRTOS/queue.c **** 				}
 935              		.loc 1 859 20 is_stmt 0 view .LVU287
 936 006e 0126     		movs	r6, #1
 937 0070 19E0     		b	.L64
 938              	.LVL87:
 939              	.L74:
 874:./freeRTOS/queue.c **** 
 940              		.loc 1 874 3 is_stmt 1 discriminator 1 view .LVU288
 941 0072 0023     		movs	r3, #0
 942 0074 84F84430 		strb	r3, [r4, #68]
 943 0078 21E0     		b	.L65
 944              	.L75:
 874:./freeRTOS/queue.c **** 
 945              		.loc 1 874 3 discriminator 4 view .LVU289
 946 007a 0023     		movs	r3, #0
 947 007c 84F84530 		strb	r3, [r4, #69]
 948 0080 23E0     		b	.L66
 949              	.L68:
 904:./freeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 950              		.loc 1 904 5 view .LVU290
 951 0082 2046     		mov	r0, r4
 952 0084 FFF7FEFF 		bl	prvUnlockQueue
 953              	.LVL88:
 905:./freeRTOS/queue.c **** 			}
 954              		.loc 1 905 5 view .LVU291
 905:./freeRTOS/queue.c **** 			}
 955              		.loc 1 905 14 is_stmt 0 view .LVU292
 956 0088 FFF7FEFF 		bl	xTaskResumeAll
 957              	.LVL89:
 958              	.L57:
 729:./freeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
ARM GAS  /tmp/ccxxKxzb.s 			page 57


 959              		.loc 1 729 25 is_stmt 1 view .LVU293
 730:./freeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 960              		.loc 1 730 97 view .LVU294
 731:./freeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 961              		.loc 1 731 88 view .LVU295
 742:./freeRTOS/queue.c **** 	{
 962              		.loc 1 742 2 view .LVU296
 744:./freeRTOS/queue.c **** 		{
 963              		.loc 1 744 3 view .LVU297
 964 008c FFF7FEFF 		bl	vPortEnterCritical
 965              	.LVL90:
 750:./freeRTOS/queue.c **** 			{
 966              		.loc 1 750 4 view .LVU298
 750:./freeRTOS/queue.c **** 			{
 967              		.loc 1 750 17 is_stmt 0 view .LVU299
 968 0090 A26B     		ldr	r2, [r4, #56]
 750:./freeRTOS/queue.c **** 			{
 969              		.loc 1 750 46 view .LVU300
 970 0092 E36B     		ldr	r3, [r4, #60]
 750:./freeRTOS/queue.c **** 			{
 971              		.loc 1 750 6 view .LVU301
 972 0094 9A42     		cmp	r2, r3
 973 0096 BBD3     		bcc	.L58
 750:./freeRTOS/queue.c **** 			{
 974              		.loc 1 750 59 discriminator 1 view .LVU302
 975 0098 022D     		cmp	r5, #2
 976 009a B9D0     		beq	.L58
 843:./freeRTOS/queue.c **** 				{
 977              		.loc 1 843 5 is_stmt 1 view .LVU303
 843:./freeRTOS/queue.c **** 				{
 978              		.loc 1 843 22 is_stmt 0 view .LVU304
 979 009c 019B     		ldr	r3, [sp, #4]
 843:./freeRTOS/queue.c **** 				{
 980              		.loc 1 843 7 view .LVU305
 981 009e 002B     		cmp	r3, #0
 982 00a0 DED0     		beq	.L72
 854:./freeRTOS/queue.c **** 				{
 983              		.loc 1 854 10 is_stmt 1 view .LVU306
 854:./freeRTOS/queue.c **** 				{
 984              		.loc 1 854 12 is_stmt 0 view .LVU307
 985 00a2 002E     		cmp	r6, #0
 986 00a4 E0D0     		beq	.L73
 987              	.LVL91:
 988              	.L64:
 864:./freeRTOS/queue.c **** 				}
 989              		.loc 1 864 30 is_stmt 1 view .LVU308
 868:./freeRTOS/queue.c **** 
 990              		.loc 1 868 3 view .LVU309
 991 00a6 FFF7FEFF 		bl	vPortExitCritical
 992              	.LVL92:
 873:./freeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 993              		.loc 1 873 3 view .LVU310
 994 00aa FFF7FEFF 		bl	vTaskSuspendAll
 995              	.LVL93:
 874:./freeRTOS/queue.c **** 
 996              		.loc 1 874 3 view .LVU311
 997 00ae FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/ccxxKxzb.s 			page 58


 998              	.LVL94:
 874:./freeRTOS/queue.c **** 
 999              		.loc 1 874 3 view .LVU312
 1000 00b2 94F84400 		ldrb	r0, [r4, #68]	@ zero_extendqisi2
 1001 00b6 40B2     		sxtb	r0, r0
 1002 00b8 B0F1FF3F 		cmp	r0, #-1
 1003 00bc D9D0     		beq	.L74
 1004              	.L65:
 874:./freeRTOS/queue.c **** 
 1005              		.loc 1 874 3 discriminator 3 view .LVU313
 1006 00be 94F84500 		ldrb	r0, [r4, #69]	@ zero_extendqisi2
 1007 00c2 40B2     		sxtb	r0, r0
 1008 00c4 B0F1FF3F 		cmp	r0, #-1
 1009 00c8 D7D0     		beq	.L75
 1010              	.L66:
 874:./freeRTOS/queue.c **** 
 1011              		.loc 1 874 3 discriminator 6 view .LVU314
 1012 00ca FFF7FEFF 		bl	vPortExitCritical
 1013              	.LVL95:
 877:./freeRTOS/queue.c **** 		{
 1014              		.loc 1 877 3 discriminator 6 view .LVU315
 877:./freeRTOS/queue.c **** 		{
 1015              		.loc 1 877 7 is_stmt 0 discriminator 6 view .LVU316
 1016 00ce 01A9     		add	r1, sp, #4
 1017 00d0 02A8     		add	r0, sp, #8
 1018 00d2 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1019              	.LVL96:
 877:./freeRTOS/queue.c **** 		{
 1020              		.loc 1 877 5 discriminator 6 view .LVU317
 1021 00d6 D8B9     		cbnz	r0, .L67
 879:./freeRTOS/queue.c **** 			{
 1022              		.loc 1 879 4 is_stmt 1 view .LVU318
 879:./freeRTOS/queue.c **** 			{
 1023              		.loc 1 879 8 is_stmt 0 view .LVU319
 1024 00d8 2046     		mov	r0, r4
 1025 00da FFF7FEFF 		bl	prvIsQueueFull
 1026              	.LVL97:
 879:./freeRTOS/queue.c **** 			{
 1027              		.loc 1 879 6 view .LVU320
 1028 00de 0028     		cmp	r0, #0
 1029 00e0 CFD0     		beq	.L68
 881:./freeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1030              		.loc 1 881 43 is_stmt 1 view .LVU321
 882:./freeRTOS/queue.c **** 
 1031              		.loc 1 882 5 view .LVU322
 1032 00e2 0199     		ldr	r1, [sp, #4]
 1033 00e4 04F11000 		add	r0, r4, #16
 1034 00e8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1035              	.LVL98:
 889:./freeRTOS/queue.c **** 
 1036              		.loc 1 889 5 view .LVU323
 1037 00ec 2046     		mov	r0, r4
 1038 00ee FFF7FEFF 		bl	prvUnlockQueue
 1039              	.LVL99:
 896:./freeRTOS/queue.c **** 				{
 1040              		.loc 1 896 5 view .LVU324
 896:./freeRTOS/queue.c **** 				{
ARM GAS  /tmp/ccxxKxzb.s 			page 59


 1041              		.loc 1 896 9 is_stmt 0 view .LVU325
 1042 00f2 FFF7FEFF 		bl	xTaskResumeAll
 1043              	.LVL100:
 896:./freeRTOS/queue.c **** 				{
 1044              		.loc 1 896 7 view .LVU326
 1045 00f6 0028     		cmp	r0, #0
 1046 00f8 C8D1     		bne	.L57
 898:./freeRTOS/queue.c **** 				}
 1047              		.loc 1 898 6 is_stmt 1 view .LVU327
 1048 00fa 4FF0E023 		mov	r3, #-536813568
 1049 00fe 4FF08052 		mov	r2, #268435456
 1050 0102 C3F8042D 		str	r2, [r3, #3332]
 898:./freeRTOS/queue.c **** 				}
 1051              		.loc 1 898 6 view .LVU328
 1052              		.syntax unified
 1053              	@ 898 "./freeRTOS/queue.c" 1
 1054 0106 BFF34F8F 		dsb
 1055              	@ 0 "" 2
 898:./freeRTOS/queue.c **** 				}
 1056              		.loc 1 898 6 view .LVU329
 1057              	@ 898 "./freeRTOS/queue.c" 1
 1058 010a BFF36F8F 		isb
 1059              	@ 0 "" 2
 1060              		.thumb
 1061              		.syntax unified
 1062 010e BDE7     		b	.L57
 1063              	.L67:
 911:./freeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 1064              		.loc 1 911 4 view .LVU330
 1065 0110 2046     		mov	r0, r4
 1066 0112 FFF7FEFF 		bl	prvUnlockQueue
 1067              	.LVL101:
 912:./freeRTOS/queue.c **** 
 1068              		.loc 1 912 4 view .LVU331
 912:./freeRTOS/queue.c **** 
 1069              		.loc 1 912 13 is_stmt 0 view .LVU332
 1070 0116 FFF7FEFF 		bl	xTaskResumeAll
 1071              	.LVL102:
 914:./freeRTOS/queue.c **** 			return errQUEUE_FULL;
 1072              		.loc 1 914 37 is_stmt 1 view .LVU333
 915:./freeRTOS/queue.c **** 		}
 1073              		.loc 1 915 4 view .LVU334
 915:./freeRTOS/queue.c **** 		}
 1074              		.loc 1 915 11 is_stmt 0 view .LVU335
 1075 011a 0020     		movs	r0, #0
 1076 011c 8DE7     		b	.L56
 1077              		.cfi_endproc
 1078              	.LFE11:
 1080              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1081              		.align	1
 1082              		.syntax unified
 1083              		.thumb
 1084              		.thumb_func
 1085              		.fpu fpv4-sp-d16
 1087              	prvInitialiseMutex:
 1088              	.LVL103:
 1089              	.LFB8:
ARM GAS  /tmp/ccxxKxzb.s 			page 60


 477:./freeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 1090              		.loc 1 477 2 is_stmt 1 view -0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 0
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 478:./freeRTOS/queue.c **** 		{
 1094              		.loc 1 478 3 view .LVU337
 478:./freeRTOS/queue.c **** 		{
 1095              		.loc 1 478 5 is_stmt 0 view .LVU338
 1096 0000 48B1     		cbz	r0, .L79
 477:./freeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 1097              		.loc 1 477 2 view .LVU339
 1098 0002 08B5     		push	{r3, lr}
 1099              	.LCFI17:
 1100              		.cfi_def_cfa_offset 8
 1101              		.cfi_offset 3, -8
 1102              		.cfi_offset 14, -4
 484:./freeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1103              		.loc 1 484 4 is_stmt 1 view .LVU340
 484:./freeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1104              		.loc 1 484 30 is_stmt 0 view .LVU341
 1105 0004 0021     		movs	r1, #0
 1106 0006 4160     		str	r1, [r0, #4]
 485:./freeRTOS/queue.c **** 
 1107              		.loc 1 485 4 is_stmt 1 view .LVU342
 485:./freeRTOS/queue.c **** 
 1108              		.loc 1 485 28 is_stmt 0 view .LVU343
 1109 0008 0160     		str	r1, [r0]
 488:./freeRTOS/queue.c **** 
 1110              		.loc 1 488 4 is_stmt 1 view .LVU344
 488:./freeRTOS/queue.c **** 
 1111              		.loc 1 488 39 is_stmt 0 view .LVU345
 1112 000a C160     		str	r1, [r0, #12]
 490:./freeRTOS/queue.c **** 
 1113              		.loc 1 490 35 is_stmt 1 view .LVU346
 493:./freeRTOS/queue.c **** 		}
 1114              		.loc 1 493 4 view .LVU347
 493:./freeRTOS/queue.c **** 		}
 1115              		.loc 1 493 13 is_stmt 0 view .LVU348
 1116 000c 0B46     		mov	r3, r1
 1117 000e 0A46     		mov	r2, r1
 1118 0010 FFF7FEFF 		bl	xQueueGenericSend
 1119              	.LVL104:
 497:./freeRTOS/queue.c **** 		}
 1120              		.loc 1 497 30 is_stmt 1 view .LVU349
 499:./freeRTOS/queue.c **** 
 1121              		.loc 1 499 2 is_stmt 0 view .LVU350
 1122 0014 08BD     		pop	{r3, pc}
 1123              	.LVL105:
 1124              	.L79:
 1125              	.LCFI18:
 1126              		.cfi_def_cfa_offset 0
 1127              		.cfi_restore 3
 1128              		.cfi_restore 14
 499:./freeRTOS/queue.c **** 
 1129              		.loc 1 499 2 view .LVU351
 1130 0016 7047     		bx	lr
ARM GAS  /tmp/ccxxKxzb.s 			page 61


 1131              		.cfi_endproc
 1132              	.LFE8:
 1134              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1135              		.align	1
 1136              		.global	xQueueCreateMutex
 1137              		.syntax unified
 1138              		.thumb
 1139              		.thumb_func
 1140              		.fpu fpv4-sp-d16
 1142              	xQueueCreateMutex:
 1143              	.LVL106:
 1144              	.LFB9:
 507:./freeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 1145              		.loc 1 507 2 is_stmt 1 view -0
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 0
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
 507:./freeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 1149              		.loc 1 507 2 is_stmt 0 view .LVU353
 1150 0000 10B5     		push	{r4, lr}
 1151              	.LCFI19:
 1152              		.cfi_def_cfa_offset 8
 1153              		.cfi_offset 4, -8
 1154              		.cfi_offset 14, -4
 1155 0002 0246     		mov	r2, r0
 508:./freeRTOS/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 1156              		.loc 1 508 2 is_stmt 1 view .LVU354
 509:./freeRTOS/queue.c **** 
 1157              		.loc 1 509 2 view .LVU355
 1158              	.LVL107:
 511:./freeRTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1159              		.loc 1 511 3 view .LVU356
 511:./freeRTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1160              		.loc 1 511 30 is_stmt 0 view .LVU357
 1161 0004 0021     		movs	r1, #0
 1162 0006 0120     		movs	r0, #1
 1163              	.LVL108:
 511:./freeRTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1164              		.loc 1 511 30 view .LVU358
 1165 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1166              	.LVL109:
 1167 000c 0446     		mov	r4, r0
 1168              	.LVL110:
 512:./freeRTOS/queue.c **** 
 1169              		.loc 1 512 3 is_stmt 1 view .LVU359
 1170 000e FFF7FEFF 		bl	prvInitialiseMutex
 1171              	.LVL111:
 514:./freeRTOS/queue.c **** 	}
 1172              		.loc 1 514 3 view .LVU360
 515:./freeRTOS/queue.c **** 
 1173              		.loc 1 515 2 is_stmt 0 view .LVU361
 1174 0012 2046     		mov	r0, r4
 1175 0014 10BD     		pop	{r4, pc}
 515:./freeRTOS/queue.c **** 
 1176              		.loc 1 515 2 view .LVU362
 1177              		.cfi_endproc
 1178              	.LFE9:
ARM GAS  /tmp/ccxxKxzb.s 			page 62


 1180              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1181              		.align	1
 1182              		.global	xQueueGenericSendFromISR
 1183              		.syntax unified
 1184              		.thumb
 1185              		.thumb_func
 1186              		.fpu fpv4-sp-d16
 1188              	xQueueGenericSendFromISR:
 1189              	.LVL112:
 1190              	.LFB12:
 922:./freeRTOS/queue.c **** BaseType_t xReturn;
 1191              		.loc 1 922 1 is_stmt 1 view -0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 0
 1194              		@ frame_needed = 0, uses_anonymous_args = 0
 922:./freeRTOS/queue.c **** BaseType_t xReturn;
 1195              		.loc 1 922 1 is_stmt 0 view .LVU364
 1196 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1197              	.LCFI20:
 1198              		.cfi_def_cfa_offset 24
 1199              		.cfi_offset 3, -24
 1200              		.cfi_offset 4, -20
 1201              		.cfi_offset 5, -16
 1202              		.cfi_offset 6, -12
 1203              		.cfi_offset 7, -8
 1204              		.cfi_offset 14, -4
 1205 0002 0446     		mov	r4, r0
 1206 0004 1746     		mov	r7, r2
 1207 0006 1A46     		mov	r2, r3
 1208              	.LVL113:
 923:./freeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1209              		.loc 1 923 1 is_stmt 1 view .LVU365
 924:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1210              		.loc 1 924 1 view .LVU366
 925:./freeRTOS/queue.c **** 
 1211              		.loc 1 925 1 view .LVU367
 927:./freeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1212              		.loc 1 927 25 view .LVU368
 928:./freeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1213              		.loc 1 928 97 view .LVU369
 929:./freeRTOS/queue.c **** 
 1214              		.loc 1 929 88 view .LVU370
 945:./freeRTOS/queue.c **** 
 1215              		.loc 1 945 44 view .LVU371
 952:./freeRTOS/queue.c **** 	{
 1216              		.loc 1 952 2 view .LVU372
 1217              	.LBB25:
 1218              	.LBI25:
 1219              		.file 2 "freeRTOS/GCC/portmacro.h"
   1:freeRTOS/GCC/portmacro.h **** /*
   2:freeRTOS/GCC/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:freeRTOS/GCC/portmacro.h ****     All rights reserved
   4:freeRTOS/GCC/portmacro.h **** 
   5:freeRTOS/GCC/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:freeRTOS/GCC/portmacro.h **** 
   7:freeRTOS/GCC/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:freeRTOS/GCC/portmacro.h **** 
ARM GAS  /tmp/ccxxKxzb.s 			page 63


   9:freeRTOS/GCC/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:freeRTOS/GCC/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:freeRTOS/GCC/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:freeRTOS/GCC/portmacro.h **** 
  13:freeRTOS/GCC/portmacro.h ****     ***************************************************************************
  14:freeRTOS/GCC/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:freeRTOS/GCC/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:freeRTOS/GCC/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:freeRTOS/GCC/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:freeRTOS/GCC/portmacro.h ****     ***************************************************************************
  19:freeRTOS/GCC/portmacro.h **** 
  20:freeRTOS/GCC/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:freeRTOS/GCC/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:freeRTOS/GCC/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:freeRTOS/GCC/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:freeRTOS/GCC/portmacro.h **** 
  25:freeRTOS/GCC/portmacro.h ****     ***************************************************************************
  26:freeRTOS/GCC/portmacro.h ****      *                                                                       *
  27:freeRTOS/GCC/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:freeRTOS/GCC/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:freeRTOS/GCC/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:freeRTOS/GCC/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:freeRTOS/GCC/portmacro.h ****      *                                                                       *
  32:freeRTOS/GCC/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:freeRTOS/GCC/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:freeRTOS/GCC/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:freeRTOS/GCC/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:freeRTOS/GCC/portmacro.h ****      *                                                                       *
  37:freeRTOS/GCC/portmacro.h ****     ***************************************************************************
  38:freeRTOS/GCC/portmacro.h **** 
  39:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:freeRTOS/GCC/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:freeRTOS/GCC/portmacro.h ****     defined configASSERT()?
  42:freeRTOS/GCC/portmacro.h **** 
  43:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:freeRTOS/GCC/portmacro.h ****     embedded software for free we request you assist our global community by
  45:freeRTOS/GCC/portmacro.h ****     participating in the support forum.
  46:freeRTOS/GCC/portmacro.h **** 
  47:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:freeRTOS/GCC/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:freeRTOS/GCC/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:freeRTOS/GCC/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:freeRTOS/GCC/portmacro.h **** 
  52:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:freeRTOS/GCC/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:freeRTOS/GCC/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:freeRTOS/GCC/portmacro.h **** 
  56:freeRTOS/GCC/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:freeRTOS/GCC/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:freeRTOS/GCC/portmacro.h **** 
  59:freeRTOS/GCC/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:freeRTOS/GCC/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:freeRTOS/GCC/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:freeRTOS/GCC/portmacro.h **** 
  63:freeRTOS/GCC/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:freeRTOS/GCC/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:freeRTOS/GCC/portmacro.h ****     mission critical applications that require provable dependability.
ARM GAS  /tmp/ccxxKxzb.s 			page 64


  66:freeRTOS/GCC/portmacro.h **** 
  67:freeRTOS/GCC/portmacro.h ****     1 tab == 4 spaces!
  68:freeRTOS/GCC/portmacro.h **** */
  69:freeRTOS/GCC/portmacro.h **** 
  70:freeRTOS/GCC/portmacro.h **** 
  71:freeRTOS/GCC/portmacro.h **** #ifndef PORTMACRO_H
  72:freeRTOS/GCC/portmacro.h **** #define PORTMACRO_H
  73:freeRTOS/GCC/portmacro.h **** 
  74:freeRTOS/GCC/portmacro.h **** #ifdef __cplusplus
  75:freeRTOS/GCC/portmacro.h **** extern "C" {
  76:freeRTOS/GCC/portmacro.h **** #endif
  77:freeRTOS/GCC/portmacro.h **** 
  78:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------
  79:freeRTOS/GCC/portmacro.h ****  * Port specific definitions.
  80:freeRTOS/GCC/portmacro.h ****  *
  81:freeRTOS/GCC/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:freeRTOS/GCC/portmacro.h ****  * given hardware and compiler.
  83:freeRTOS/GCC/portmacro.h ****  *
  84:freeRTOS/GCC/portmacro.h ****  * These settings should not be altered.
  85:freeRTOS/GCC/portmacro.h ****  *-----------------------------------------------------------
  86:freeRTOS/GCC/portmacro.h ****  */
  87:freeRTOS/GCC/portmacro.h **** 
  88:freeRTOS/GCC/portmacro.h **** /* Type definitions. */
  89:freeRTOS/GCC/portmacro.h **** #define portCHAR		char
  90:freeRTOS/GCC/portmacro.h **** #define portFLOAT		float
  91:freeRTOS/GCC/portmacro.h **** #define portDOUBLE		double
  92:freeRTOS/GCC/portmacro.h **** #define portLONG		long
  93:freeRTOS/GCC/portmacro.h **** #define portSHORT		short
  94:freeRTOS/GCC/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:freeRTOS/GCC/portmacro.h **** #define portBASE_TYPE	long
  96:freeRTOS/GCC/portmacro.h **** 
  97:freeRTOS/GCC/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:freeRTOS/GCC/portmacro.h **** typedef long BaseType_t;
  99:freeRTOS/GCC/portmacro.h **** typedef unsigned long UBaseType_t;
 100:freeRTOS/GCC/portmacro.h **** 
 101:freeRTOS/GCC/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:freeRTOS/GCC/portmacro.h **** 	typedef uint16_t TickType_t;
 103:freeRTOS/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:freeRTOS/GCC/portmacro.h **** #else
 105:freeRTOS/GCC/portmacro.h **** 	typedef uint32_t TickType_t;
 106:freeRTOS/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:freeRTOS/GCC/portmacro.h **** 
 108:freeRTOS/GCC/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:freeRTOS/GCC/portmacro.h **** 	not need to be guarded with a critical section. */
 110:freeRTOS/GCC/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:freeRTOS/GCC/portmacro.h **** #endif
 112:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 113:freeRTOS/GCC/portmacro.h **** 
 114:freeRTOS/GCC/portmacro.h **** /* Architecture specifics. */
 115:freeRTOS/GCC/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:freeRTOS/GCC/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:freeRTOS/GCC/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 119:freeRTOS/GCC/portmacro.h **** 
 120:freeRTOS/GCC/portmacro.h **** /* Scheduler utilities. */
 121:freeRTOS/GCC/portmacro.h **** #define portYIELD() 															\
 122:freeRTOS/GCC/portmacro.h **** {																				\
ARM GAS  /tmp/ccxxKxzb.s 			page 65


 123:freeRTOS/GCC/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:freeRTOS/GCC/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:freeRTOS/GCC/portmacro.h **** 																				\
 126:freeRTOS/GCC/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:freeRTOS/GCC/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:freeRTOS/GCC/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:freeRTOS/GCC/portmacro.h **** 	__asm volatile( "isb" );													\
 130:freeRTOS/GCC/portmacro.h **** }
 131:freeRTOS/GCC/portmacro.h **** 
 132:freeRTOS/GCC/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:freeRTOS/GCC/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:freeRTOS/GCC/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:freeRTOS/GCC/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 137:freeRTOS/GCC/portmacro.h **** 
 138:freeRTOS/GCC/portmacro.h **** /* Critical section management. */
 139:freeRTOS/GCC/portmacro.h **** extern void vPortEnterCritical( void );
 140:freeRTOS/GCC/portmacro.h **** extern void vPortExitCritical( void );
 141:freeRTOS/GCC/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:freeRTOS/GCC/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:freeRTOS/GCC/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:freeRTOS/GCC/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:freeRTOS/GCC/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:freeRTOS/GCC/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:freeRTOS/GCC/portmacro.h **** 
 148:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 149:freeRTOS/GCC/portmacro.h **** 
 150:freeRTOS/GCC/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:freeRTOS/GCC/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:freeRTOS/GCC/portmacro.h **** (which build with all the ports) will build. */
 153:freeRTOS/GCC/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:freeRTOS/GCC/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 156:freeRTOS/GCC/portmacro.h **** 
 157:freeRTOS/GCC/portmacro.h **** /* Tickless idle/low power functionality. */
 158:freeRTOS/GCC/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:freeRTOS/GCC/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:freeRTOS/GCC/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:freeRTOS/GCC/portmacro.h **** #endif
 162:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 163:freeRTOS/GCC/portmacro.h **** 
 164:freeRTOS/GCC/portmacro.h **** /* Architecture specific optimisations. */
 165:freeRTOS/GCC/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:freeRTOS/GCC/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:freeRTOS/GCC/portmacro.h **** #endif
 168:freeRTOS/GCC/portmacro.h **** 
 169:freeRTOS/GCC/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:freeRTOS/GCC/portmacro.h **** 
 171:freeRTOS/GCC/portmacro.h **** 	/* Generic helper function. */
 172:freeRTOS/GCC/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:freeRTOS/GCC/portmacro.h **** 	{
 174:freeRTOS/GCC/portmacro.h **** 	uint8_t ucReturn;
 175:freeRTOS/GCC/portmacro.h **** 
 176:freeRTOS/GCC/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:freeRTOS/GCC/portmacro.h **** 		return ucReturn;
 178:freeRTOS/GCC/portmacro.h **** 	}
 179:freeRTOS/GCC/portmacro.h **** 
ARM GAS  /tmp/ccxxKxzb.s 			page 66


 180:freeRTOS/GCC/portmacro.h **** 	/* Check the configuration. */
 181:freeRTOS/GCC/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:freeRTOS/GCC/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:freeRTOS/GCC/portmacro.h **** 	#endif
 184:freeRTOS/GCC/portmacro.h **** 
 185:freeRTOS/GCC/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:freeRTOS/GCC/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:freeRTOS/GCC/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:freeRTOS/GCC/portmacro.h **** 
 189:freeRTOS/GCC/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:freeRTOS/GCC/portmacro.h **** 
 191:freeRTOS/GCC/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:freeRTOS/GCC/portmacro.h **** 
 193:freeRTOS/GCC/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:freeRTOS/GCC/portmacro.h **** 
 195:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 196:freeRTOS/GCC/portmacro.h **** 
 197:freeRTOS/GCC/portmacro.h **** #ifdef configASSERT
 198:freeRTOS/GCC/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:freeRTOS/GCC/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:freeRTOS/GCC/portmacro.h **** #endif
 201:freeRTOS/GCC/portmacro.h **** 
 202:freeRTOS/GCC/portmacro.h **** /* portNOP() is not required by this port. */
 203:freeRTOS/GCC/portmacro.h **** #define portNOP()
 204:freeRTOS/GCC/portmacro.h **** 
 205:freeRTOS/GCC/portmacro.h **** #define portINLINE	__inline
 206:freeRTOS/GCC/portmacro.h **** 
 207:freeRTOS/GCC/portmacro.h **** #ifndef portFORCE_INLINE
 208:freeRTOS/GCC/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:freeRTOS/GCC/portmacro.h **** #endif
 210:freeRTOS/GCC/portmacro.h **** 
 211:freeRTOS/GCC/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:freeRTOS/GCC/portmacro.h **** {
 213:freeRTOS/GCC/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:freeRTOS/GCC/portmacro.h **** BaseType_t xReturn;
 215:freeRTOS/GCC/portmacro.h **** 
 216:freeRTOS/GCC/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:freeRTOS/GCC/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:freeRTOS/GCC/portmacro.h **** 
 219:freeRTOS/GCC/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:freeRTOS/GCC/portmacro.h **** 	{
 221:freeRTOS/GCC/portmacro.h **** 		xReturn = pdFALSE;
 222:freeRTOS/GCC/portmacro.h **** 	}
 223:freeRTOS/GCC/portmacro.h **** 	else
 224:freeRTOS/GCC/portmacro.h **** 	{
 225:freeRTOS/GCC/portmacro.h **** 		xReturn = pdTRUE;
 226:freeRTOS/GCC/portmacro.h **** 	}
 227:freeRTOS/GCC/portmacro.h **** 
 228:freeRTOS/GCC/portmacro.h **** 	return xReturn;
 229:freeRTOS/GCC/portmacro.h **** }
 230:freeRTOS/GCC/portmacro.h **** 
 231:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 232:freeRTOS/GCC/portmacro.h **** 
 233:freeRTOS/GCC/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:freeRTOS/GCC/portmacro.h **** {
 235:freeRTOS/GCC/portmacro.h **** uint32_t ulNewBASEPRI;
 236:freeRTOS/GCC/portmacro.h **** 
ARM GAS  /tmp/ccxxKxzb.s 			page 67


 237:freeRTOS/GCC/portmacro.h **** 	__asm volatile
 238:freeRTOS/GCC/portmacro.h **** 	(
 239:freeRTOS/GCC/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:freeRTOS/GCC/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:freeRTOS/GCC/portmacro.h **** 		"	isb														\n" \
 242:freeRTOS/GCC/portmacro.h **** 		"	dsb														\n" \
 243:freeRTOS/GCC/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:freeRTOS/GCC/portmacro.h **** 	);
 245:freeRTOS/GCC/portmacro.h **** }
 246:freeRTOS/GCC/portmacro.h **** 
 247:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 248:freeRTOS/GCC/portmacro.h **** 
 249:freeRTOS/GCC/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1220              		.loc 2 249 34 view .LVU373
 1221              	.LBB26:
 250:freeRTOS/GCC/portmacro.h **** {
 251:freeRTOS/GCC/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1222              		.loc 2 251 1 view .LVU374
 252:freeRTOS/GCC/portmacro.h **** 
 253:freeRTOS/GCC/portmacro.h **** 	__asm volatile
 1223              		.loc 2 253 2 view .LVU375
 1224              		.syntax unified
 1225              	@ 253 "freeRTOS/GCC/portmacro.h" 1
 1226 0008 EFF31186 			mrs r6, basepri											
 1227 000c 4FF0BF03 		mov r3, #191												
 1228 0010 83F31188 		msr basepri, r3											
 1229 0014 BFF36F8F 		isb														
 1230 0018 BFF34F8F 		dsb														
 1231              	
 1232              	@ 0 "" 2
 1233              	.LVL114:
 254:freeRTOS/GCC/portmacro.h **** 	(
 255:freeRTOS/GCC/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:freeRTOS/GCC/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:freeRTOS/GCC/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:freeRTOS/GCC/portmacro.h **** 		"	isb														\n" \
 259:freeRTOS/GCC/portmacro.h **** 		"	dsb														\n" \
 260:freeRTOS/GCC/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:freeRTOS/GCC/portmacro.h **** 	);
 262:freeRTOS/GCC/portmacro.h **** 
 263:freeRTOS/GCC/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:freeRTOS/GCC/portmacro.h **** 	warnings. */
 265:freeRTOS/GCC/portmacro.h **** 	return ulOriginalBASEPRI;
 1234              		.loc 2 265 2 view .LVU376
 1235              		.loc 2 265 2 is_stmt 0 view .LVU377
 1236              		.thumb
 1237              		.syntax unified
 1238              	.LBE26:
 1239              	.LBE25:
 954:./freeRTOS/queue.c **** 		{
 1240              		.loc 1 954 3 is_stmt 1 view .LVU378
 954:./freeRTOS/queue.c **** 		{
 1241              		.loc 1 954 16 is_stmt 0 view .LVU379
 1242 001c 806B     		ldr	r0, [r0, #56]
 1243              	.LVL115:
 954:./freeRTOS/queue.c **** 		{
 1244              		.loc 1 954 45 view .LVU380
ARM GAS  /tmp/ccxxKxzb.s 			page 68


 1245 001e E36B     		ldr	r3, [r4, #60]
 954:./freeRTOS/queue.c **** 		{
 1246              		.loc 1 954 5 view .LVU381
 1247 0020 9842     		cmp	r0, r3
 1248 0022 05D3     		bcc	.L85
 954:./freeRTOS/queue.c **** 		{
 1249              		.loc 1 954 58 discriminator 1 view .LVU382
 1250 0024 022A     		cmp	r2, #2
 1251 0026 03D0     		beq	.L85
1063:./freeRTOS/queue.c **** 		}
 1252              		.loc 1 1063 12 view .LVU383
 1253 0028 0020     		movs	r0, #0
 1254              	.LVL116:
 1255              	.L86:
1066:./freeRTOS/queue.c **** 
 1256              		.loc 1 1066 2 is_stmt 1 view .LVU384
 1257              	.LBB27:
 1258              	.LBI27:
 266:freeRTOS/GCC/portmacro.h **** }
 267:freeRTOS/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 268:freeRTOS/GCC/portmacro.h **** 
 269:freeRTOS/GCC/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1259              		.loc 2 269 30 view .LVU385
 1260              	.LBB28:
 270:freeRTOS/GCC/portmacro.h **** {
 271:freeRTOS/GCC/portmacro.h **** 	__asm volatile
 1261              		.loc 2 271 2 view .LVU386
 1262              		.syntax unified
 1263              	@ 271 "freeRTOS/GCC/portmacro.h" 1
 1264 002a 86F31188 			msr basepri, r6	
 1265              	@ 0 "" 2
 1266              	.LVL117:
 1267              		.loc 2 271 2 is_stmt 0 view .LVU387
 1268              		.thumb
 1269              		.syntax unified
 1270              	.LBE28:
 1271              	.LBE27:
1068:./freeRTOS/queue.c **** }
 1272              		.loc 1 1068 2 is_stmt 1 view .LVU388
1069:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1273              		.loc 1 1069 1 is_stmt 0 view .LVU389
 1274 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1275              	.LVL118:
 1276              	.L85:
 1277              	.LBB29:
 956:./freeRTOS/queue.c **** 
 1278              		.loc 1 956 4 is_stmt 1 view .LVU390
 956:./freeRTOS/queue.c **** 
 1279              		.loc 1 956 17 is_stmt 0 view .LVU391
 1280 0030 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1281 0034 6DB2     		sxtb	r5, r5
 1282              	.LVL119:
 958:./freeRTOS/queue.c **** 
 1283              		.loc 1 958 39 is_stmt 1 view .LVU392
 965:./freeRTOS/queue.c **** 
 1284              		.loc 1 965 4 view .LVU393
 965:./freeRTOS/queue.c **** 
ARM GAS  /tmp/ccxxKxzb.s 			page 69


 1285              		.loc 1 965 13 is_stmt 0 view .LVU394
 1286 0036 2046     		mov	r0, r4
 1287 0038 FFF7FEFF 		bl	prvCopyDataToQueue
 1288              	.LVL120:
 969:./freeRTOS/queue.c **** 			{
 1289              		.loc 1 969 4 is_stmt 1 view .LVU395
 969:./freeRTOS/queue.c **** 			{
 1290              		.loc 1 969 6 is_stmt 0 view .LVU396
 1291 003c B5F1FF3F 		cmp	r5, #-1
 1292 0040 05D0     		beq	.L93
1055:./freeRTOS/queue.c **** 			}
 1293              		.loc 1 1055 5 is_stmt 1 view .LVU397
1055:./freeRTOS/queue.c **** 			}
 1294              		.loc 1 1055 45 is_stmt 0 view .LVU398
 1295 0042 0135     		adds	r5, r5, #1
 1296              	.LVL121:
1055:./freeRTOS/queue.c **** 			}
 1297              		.loc 1 1055 24 view .LVU399
 1298 0044 6DB2     		sxtb	r5, r5
 1299              	.LVL122:
1055:./freeRTOS/queue.c **** 			}
 1300              		.loc 1 1055 22 view .LVU400
 1301 0046 84F84550 		strb	r5, [r4, #69]
1058:./freeRTOS/queue.c **** 		}
 1302              		.loc 1 1058 12 view .LVU401
 1303 004a 0120     		movs	r0, #1
 1304 004c EDE7     		b	.L86
 1305              	.LVL123:
 1306              	.L93:
1024:./freeRTOS/queue.c **** 					{
 1307              		.loc 1 1024 6 is_stmt 1 view .LVU402
1024:./freeRTOS/queue.c **** 					{
 1308              		.loc 1 1024 10 is_stmt 0 view .LVU403
 1309 004e 636A     		ldr	r3, [r4, #36]
1024:./freeRTOS/queue.c **** 					{
 1310              		.loc 1 1024 8 view .LVU404
 1311 0050 0BB9     		cbnz	r3, .L94
1058:./freeRTOS/queue.c **** 		}
 1312              		.loc 1 1058 12 view .LVU405
 1313 0052 0120     		movs	r0, #1
 1314 0054 E9E7     		b	.L86
 1315              	.L94:
1026:./freeRTOS/queue.c **** 						{
 1316              		.loc 1 1026 7 is_stmt 1 view .LVU406
1026:./freeRTOS/queue.c **** 						{
 1317              		.loc 1 1026 11 is_stmt 0 view .LVU407
 1318 0056 04F12400 		add	r0, r4, #36
 1319 005a FFF7FEFF 		bl	xTaskRemoveFromEventList
 1320              	.LVL124:
1026:./freeRTOS/queue.c **** 						{
 1321              		.loc 1 1026 9 view .LVU408
 1322 005e 18B1     		cbz	r0, .L90
1030:./freeRTOS/queue.c **** 							{
 1323              		.loc 1 1030 8 is_stmt 1 view .LVU409
1030:./freeRTOS/queue.c **** 							{
 1324              		.loc 1 1030 10 is_stmt 0 view .LVU410
 1325 0060 27B1     		cbz	r7, .L91
ARM GAS  /tmp/ccxxKxzb.s 			page 70


1032:./freeRTOS/queue.c **** 							}
 1326              		.loc 1 1032 9 is_stmt 1 view .LVU411
1032:./freeRTOS/queue.c **** 							}
 1327              		.loc 1 1032 36 is_stmt 0 view .LVU412
 1328 0062 0120     		movs	r0, #1
 1329 0064 3860     		str	r0, [r7]
 1330 0066 E0E7     		b	.L86
 1331              	.L90:
1058:./freeRTOS/queue.c **** 		}
 1332              		.loc 1 1058 12 view .LVU413
 1333 0068 0120     		movs	r0, #1
 1334 006a DEE7     		b	.L86
 1335              	.L91:
 1336 006c 0120     		movs	r0, #1
 1337 006e DCE7     		b	.L86
 1338              	.LBE29:
 1339              		.cfi_endproc
 1340              	.LFE12:
 1342              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1343              		.align	1
 1344              		.global	xQueueGiveFromISR
 1345              		.syntax unified
 1346              		.thumb
 1347              		.thumb_func
 1348              		.fpu fpv4-sp-d16
 1350              	xQueueGiveFromISR:
 1351              	.LVL125:
 1352              	.LFB13:
1073:./freeRTOS/queue.c **** BaseType_t xReturn;
 1353              		.loc 1 1073 1 is_stmt 1 view -0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 0
 1356              		@ frame_needed = 0, uses_anonymous_args = 0
1073:./freeRTOS/queue.c **** BaseType_t xReturn;
 1357              		.loc 1 1073 1 is_stmt 0 view .LVU415
 1358 0000 38B5     		push	{r3, r4, r5, lr}
 1359              	.LCFI21:
 1360              		.cfi_def_cfa_offset 16
 1361              		.cfi_offset 3, -16
 1362              		.cfi_offset 4, -12
 1363              		.cfi_offset 5, -8
 1364              		.cfi_offset 14, -4
1074:./freeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1365              		.loc 1 1074 1 is_stmt 1 view .LVU416
1075:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1366              		.loc 1 1075 1 view .LVU417
1076:./freeRTOS/queue.c **** 
 1367              		.loc 1 1076 1 view .LVU418
 1368              	.LVL126:
1084:./freeRTOS/queue.c **** 
 1369              		.loc 1 1084 25 view .LVU419
1088:./freeRTOS/queue.c **** 
 1370              		.loc 1 1088 42 view .LVU420
1093:./freeRTOS/queue.c **** 
 1371              		.loc 1 1093 108 view .LVU421
1109:./freeRTOS/queue.c **** 
 1372              		.loc 1 1109 44 view .LVU422
ARM GAS  /tmp/ccxxKxzb.s 			page 71


1111:./freeRTOS/queue.c **** 	{
 1373              		.loc 1 1111 2 view .LVU423
 1374              	.LBB30:
 1375              	.LBI30:
 249:freeRTOS/GCC/portmacro.h **** {
 1376              		.loc 2 249 34 view .LVU424
 1377              	.LBB31:
 251:freeRTOS/GCC/portmacro.h **** 
 1378              		.loc 2 251 1 view .LVU425
 253:freeRTOS/GCC/portmacro.h **** 	(
 1379              		.loc 2 253 2 view .LVU426
 1380              		.syntax unified
 1381              	@ 253 "freeRTOS/GCC/portmacro.h" 1
 1382 0002 EFF31184 			mrs r4, basepri											
 1383 0006 4FF0BF03 		mov r3, #191												
 1384 000a 83F31188 		msr basepri, r3											
 1385 000e BFF36F8F 		isb														
 1386 0012 BFF34F8F 		dsb														
 1387              	
 1388              	@ 0 "" 2
 1389              	.LVL127:
 265:freeRTOS/GCC/portmacro.h **** }
 1390              		.loc 2 265 2 view .LVU427
 265:freeRTOS/GCC/portmacro.h **** }
 1391              		.loc 2 265 2 is_stmt 0 view .LVU428
 1392              		.thumb
 1393              		.syntax unified
 1394              	.LBE31:
 1395              	.LBE30:
 1396              	.LBB32:
1113:./freeRTOS/queue.c **** 
 1397              		.loc 1 1113 3 is_stmt 1 view .LVU429
1113:./freeRTOS/queue.c **** 
 1398              		.loc 1 1113 21 is_stmt 0 view .LVU430
 1399 0016 826B     		ldr	r2, [r0, #56]
 1400              	.LVL128:
1118:./freeRTOS/queue.c **** 		{
 1401              		.loc 1 1118 3 is_stmt 1 view .LVU431
1118:./freeRTOS/queue.c **** 		{
 1402              		.loc 1 1118 34 is_stmt 0 view .LVU432
 1403 0018 C36B     		ldr	r3, [r0, #60]
1118:./freeRTOS/queue.c **** 		{
 1404              		.loc 1 1118 5 view .LVU433
 1405 001a 9342     		cmp	r3, r2
 1406 001c 1AD9     		bls	.L98
 1407 001e 0D46     		mov	r5, r1
 1408              	.LBB33:
1120:./freeRTOS/queue.c **** 
 1409              		.loc 1 1120 4 is_stmt 1 view .LVU434
1120:./freeRTOS/queue.c **** 
 1410              		.loc 1 1120 17 is_stmt 0 view .LVU435
 1411 0020 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1412 0024 5BB2     		sxtb	r3, r3
 1413              	.LVL129:
1122:./freeRTOS/queue.c **** 
 1414              		.loc 1 1122 39 is_stmt 1 view .LVU436
1130:./freeRTOS/queue.c **** 
ARM GAS  /tmp/ccxxKxzb.s 			page 72


 1415              		.loc 1 1130 4 view .LVU437
1130:./freeRTOS/queue.c **** 
 1416              		.loc 1 1130 51 is_stmt 0 view .LVU438
 1417 0026 0132     		adds	r2, r2, #1
 1418              	.LVL130:
1130:./freeRTOS/queue.c **** 
 1419              		.loc 1 1130 31 view .LVU439
 1420 0028 8263     		str	r2, [r0, #56]
1134:./freeRTOS/queue.c **** 			{
 1421              		.loc 1 1134 4 is_stmt 1 view .LVU440
1134:./freeRTOS/queue.c **** 			{
 1422              		.loc 1 1134 6 is_stmt 0 view .LVU441
 1423 002a B3F1FF3F 		cmp	r3, #-1
 1424 002e 05D0     		beq	.L103
1220:./freeRTOS/queue.c **** 			}
 1425              		.loc 1 1220 5 is_stmt 1 view .LVU442
1220:./freeRTOS/queue.c **** 			}
 1426              		.loc 1 1220 45 is_stmt 0 view .LVU443
 1427 0030 0133     		adds	r3, r3, #1
 1428              	.LVL131:
1220:./freeRTOS/queue.c **** 			}
 1429              		.loc 1 1220 24 view .LVU444
 1430 0032 5BB2     		sxtb	r3, r3
 1431              	.LVL132:
1220:./freeRTOS/queue.c **** 			}
 1432              		.loc 1 1220 22 view .LVU445
 1433 0034 80F84530 		strb	r3, [r0, #69]
1223:./freeRTOS/queue.c **** 		}
 1434              		.loc 1 1223 12 view .LVU446
 1435 0038 0120     		movs	r0, #1
 1436              	.LVL133:
1223:./freeRTOS/queue.c **** 		}
 1437              		.loc 1 1223 12 view .LVU447
 1438 003a 0CE0     		b	.L96
 1439              	.LVL134:
 1440              	.L103:
1189:./freeRTOS/queue.c **** 					{
 1441              		.loc 1 1189 6 is_stmt 1 view .LVU448
1189:./freeRTOS/queue.c **** 					{
 1442              		.loc 1 1189 10 is_stmt 0 view .LVU449
 1443 003c 436A     		ldr	r3, [r0, #36]
 1444              	.LVL135:
1189:./freeRTOS/queue.c **** 					{
 1445              		.loc 1 1189 8 view .LVU450
 1446 003e 0BB9     		cbnz	r3, .L104
1223:./freeRTOS/queue.c **** 		}
 1447              		.loc 1 1223 12 view .LVU451
 1448 0040 0120     		movs	r0, #1
 1449              	.LVL136:
1223:./freeRTOS/queue.c **** 		}
 1450              		.loc 1 1223 12 view .LVU452
 1451 0042 08E0     		b	.L96
 1452              	.LVL137:
 1453              	.L104:
1191:./freeRTOS/queue.c **** 						{
 1454              		.loc 1 1191 7 is_stmt 1 view .LVU453
1191:./freeRTOS/queue.c **** 						{
ARM GAS  /tmp/ccxxKxzb.s 			page 73


 1455              		.loc 1 1191 11 is_stmt 0 view .LVU454
 1456 0044 2430     		adds	r0, r0, #36
 1457              	.LVL138:
1191:./freeRTOS/queue.c **** 						{
 1458              		.loc 1 1191 11 view .LVU455
 1459 0046 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1460              	.LVL139:
1191:./freeRTOS/queue.c **** 						{
 1461              		.loc 1 1191 9 view .LVU456
 1462 004a 38B1     		cbz	r0, .L100
1195:./freeRTOS/queue.c **** 							{
 1463              		.loc 1 1195 8 is_stmt 1 view .LVU457
1195:./freeRTOS/queue.c **** 							{
 1464              		.loc 1 1195 10 is_stmt 0 view .LVU458
 1465 004c 45B1     		cbz	r5, .L101
1197:./freeRTOS/queue.c **** 							}
 1466              		.loc 1 1197 9 is_stmt 1 view .LVU459
1197:./freeRTOS/queue.c **** 							}
 1467              		.loc 1 1197 36 is_stmt 0 view .LVU460
 1468 004e 0120     		movs	r0, #1
 1469 0050 2860     		str	r0, [r5]
 1470 0052 00E0     		b	.L96
 1471              	.LVL140:
 1472              	.L98:
1197:./freeRTOS/queue.c **** 							}
 1473              		.loc 1 1197 36 view .LVU461
 1474              	.LBE33:
1228:./freeRTOS/queue.c **** 		}
 1475              		.loc 1 1228 12 view .LVU462
 1476 0054 0020     		movs	r0, #0
 1477              	.LVL141:
 1478              	.L96:
1228:./freeRTOS/queue.c **** 		}
 1479              		.loc 1 1228 12 view .LVU463
 1480              	.LBE32:
1231:./freeRTOS/queue.c **** 
 1481              		.loc 1 1231 2 is_stmt 1 view .LVU464
 1482              	.LBB35:
 1483              	.LBI35:
 269:freeRTOS/GCC/portmacro.h **** {
 1484              		.loc 2 269 30 view .LVU465
 1485              	.LBB36:
 1486              		.loc 2 271 2 view .LVU466
 1487              		.syntax unified
 1488              	@ 271 "freeRTOS/GCC/portmacro.h" 1
 1489 0056 84F31188 			msr basepri, r4	
 1490              	@ 0 "" 2
 1491              	.LVL142:
 1492              		.loc 2 271 2 is_stmt 0 view .LVU467
 1493              		.thumb
 1494              		.syntax unified
 1495              	.LBE36:
 1496              	.LBE35:
1233:./freeRTOS/queue.c **** }
 1497              		.loc 1 1233 2 is_stmt 1 view .LVU468
1234:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1498              		.loc 1 1234 1 is_stmt 0 view .LVU469
ARM GAS  /tmp/ccxxKxzb.s 			page 74


 1499 005a 38BD     		pop	{r3, r4, r5, pc}
 1500              	.LVL143:
 1501              	.L100:
 1502              	.LBB37:
 1503              	.LBB34:
1223:./freeRTOS/queue.c **** 		}
 1504              		.loc 1 1223 12 view .LVU470
 1505 005c 0120     		movs	r0, #1
 1506 005e FAE7     		b	.L96
 1507              	.L101:
 1508 0060 0120     		movs	r0, #1
 1509 0062 F8E7     		b	.L96
 1510              	.LBE34:
 1511              	.LBE37:
 1512              		.cfi_endproc
 1513              	.LFE13:
 1515              		.section	.text.xQueueGenericReceive,"ax",%progbits
 1516              		.align	1
 1517              		.global	xQueueGenericReceive
 1518              		.syntax unified
 1519              		.thumb
 1520              		.thumb_func
 1521              		.fpu fpv4-sp-d16
 1523              	xQueueGenericReceive:
 1524              	.LVL144:
 1525              	.LFB14:
1238:./freeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1526              		.loc 1 1238 1 is_stmt 1 view -0
 1527              		.cfi_startproc
 1528              		@ args = 0, pretend = 0, frame = 16
 1529              		@ frame_needed = 0, uses_anonymous_args = 0
1238:./freeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1530              		.loc 1 1238 1 is_stmt 0 view .LVU472
 1531 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1532              	.LCFI22:
 1533              		.cfi_def_cfa_offset 24
 1534              		.cfi_offset 4, -24
 1535              		.cfi_offset 5, -20
 1536              		.cfi_offset 6, -16
 1537              		.cfi_offset 7, -12
 1538              		.cfi_offset 8, -8
 1539              		.cfi_offset 14, -4
 1540 0004 84B0     		sub	sp, sp, #16
 1541              	.LCFI23:
 1542              		.cfi_def_cfa_offset 40
 1543 0006 0446     		mov	r4, r0
 1544 0008 8846     		mov	r8, r1
 1545 000a 0192     		str	r2, [sp, #4]
 1546 000c 1E46     		mov	r6, r3
1239:./freeRTOS/queue.c **** TimeOut_t xTimeOut;
 1547              		.loc 1 1239 1 is_stmt 1 view .LVU473
 1548              	.LVL145:
1240:./freeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
 1549              		.loc 1 1240 1 view .LVU474
1241:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1550              		.loc 1 1241 1 view .LVU475
1242:./freeRTOS/queue.c **** 
ARM GAS  /tmp/ccxxKxzb.s 			page 75


 1551              		.loc 1 1242 1 view .LVU476
1239:./freeRTOS/queue.c **** TimeOut_t xTimeOut;
 1552              		.loc 1 1239 12 is_stmt 0 view .LVU477
 1553 000e 0025     		movs	r5, #0
 1554 0010 64E0     		b	.L106
 1555              	.LVL146:
 1556              	.L124:
 1557              	.LBB38:
1268:./freeRTOS/queue.c **** 
 1558              		.loc 1 1268 5 is_stmt 1 view .LVU478
1268:./freeRTOS/queue.c **** 
 1559              		.loc 1 1268 28 is_stmt 0 view .LVU479
 1560 0012 E568     		ldr	r5, [r4, #12]
 1561              	.LVL147:
1270:./freeRTOS/queue.c **** 
 1562              		.loc 1 1270 5 is_stmt 1 view .LVU480
 1563 0014 4146     		mov	r1, r8
 1564 0016 2046     		mov	r0, r4
 1565 0018 FFF7FEFF 		bl	prvCopyDataFromQueue
 1566              	.LVL148:
1272:./freeRTOS/queue.c **** 				{
 1567              		.loc 1 1272 5 view .LVU481
1272:./freeRTOS/queue.c **** 				{
 1568              		.loc 1 1272 7 is_stmt 0 view .LVU482
 1569 001c 06BB     		cbnz	r6, .L108
1274:./freeRTOS/queue.c **** 
 1570              		.loc 1 1274 35 is_stmt 1 view .LVU483
1277:./freeRTOS/queue.c **** 
 1571              		.loc 1 1277 6 view .LVU484
1277:./freeRTOS/queue.c **** 
 1572              		.loc 1 1277 53 is_stmt 0 view .LVU485
 1573 001e 7B1E     		subs	r3, r7, #1
1277:./freeRTOS/queue.c **** 
 1574              		.loc 1 1277 33 view .LVU486
 1575 0020 A363     		str	r3, [r4, #56]
1281:./freeRTOS/queue.c **** 						{
 1576              		.loc 1 1281 7 is_stmt 1 view .LVU487
1281:./freeRTOS/queue.c **** 						{
 1577              		.loc 1 1281 18 is_stmt 0 view .LVU488
 1578 0022 2368     		ldr	r3, [r4]
1281:./freeRTOS/queue.c **** 						{
 1579              		.loc 1 1281 9 view .LVU489
 1580 0024 3BB1     		cbz	r3, .L121
 1581              	.L109:
1289:./freeRTOS/queue.c **** 						}
 1582              		.loc 1 1289 32 is_stmt 1 view .LVU490
1294:./freeRTOS/queue.c **** 					{
 1583              		.loc 1 1294 6 view .LVU491
1294:./freeRTOS/queue.c **** 					{
 1584              		.loc 1 1294 10 is_stmt 0 view .LVU492
 1585 0026 2369     		ldr	r3, [r4, #16]
1294:./freeRTOS/queue.c **** 					{
 1586              		.loc 1 1294 8 view .LVU493
 1587 0028 4BB9     		cbnz	r3, .L122
 1588              	.L110:
1334:./freeRTOS/queue.c **** 					}
 1589              		.loc 1 1334 31 is_stmt 1 view .LVU494
ARM GAS  /tmp/ccxxKxzb.s 			page 76


1338:./freeRTOS/queue.c **** 				return pdPASS;
 1590              		.loc 1 1338 5 view .LVU495
 1591 002a FFF7FEFF 		bl	vPortExitCritical
 1592              	.LVL149:
1339:./freeRTOS/queue.c **** 			}
 1593              		.loc 1 1339 5 view .LVU496
1339:./freeRTOS/queue.c **** 			}
 1594              		.loc 1 1339 12 is_stmt 0 view .LVU497
 1595 002e 0120     		movs	r0, #1
 1596              	.LVL150:
 1597              	.L105:
1339:./freeRTOS/queue.c **** 			}
 1598              		.loc 1 1339 12 view .LVU498
 1599              	.LBE38:
1431:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1600              		.loc 1 1431 1 view .LVU499
 1601 0030 04B0     		add	sp, sp, #16
 1602              	.LCFI24:
 1603              		.cfi_remember_state
 1604              		.cfi_def_cfa_offset 24
 1605              		@ sp needed
 1606 0032 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1607              	.LVL151:
 1608              	.L121:
 1609              	.LCFI25:
 1610              		.cfi_restore_state
 1611              	.LBB39:
1285:./freeRTOS/queue.c **** 						}
 1612              		.loc 1 1285 8 is_stmt 1 view .LVU500
1285:./freeRTOS/queue.c **** 						}
 1613              		.loc 1 1285 46 is_stmt 0 view .LVU501
 1614 0036 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1615              	.LVL152:
1285:./freeRTOS/queue.c **** 						}
 1616              		.loc 1 1285 31 view .LVU502
 1617 003a 6060     		str	r0, [r4, #4]
 1618 003c F3E7     		b	.L109
 1619              	.L122:
1296:./freeRTOS/queue.c **** 						{
 1620              		.loc 1 1296 7 is_stmt 1 view .LVU503
1296:./freeRTOS/queue.c **** 						{
 1621              		.loc 1 1296 11 is_stmt 0 view .LVU504
 1622 003e 04F11000 		add	r0, r4, #16
 1623 0042 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1624              	.LVL153:
1296:./freeRTOS/queue.c **** 						{
 1625              		.loc 1 1296 9 view .LVU505
 1626 0046 0028     		cmp	r0, #0
 1627 0048 EFD0     		beq	.L110
1298:./freeRTOS/queue.c **** 						}
 1628              		.loc 1 1298 8 is_stmt 1 view .LVU506
 1629 004a 4FF0E023 		mov	r3, #-536813568
 1630 004e 4FF08052 		mov	r2, #268435456
 1631 0052 C3F8042D 		str	r2, [r3, #3332]
1298:./freeRTOS/queue.c **** 						}
 1632              		.loc 1 1298 8 view .LVU507
 1633              		.syntax unified
ARM GAS  /tmp/ccxxKxzb.s 			page 77


 1634              	@ 1298 "./freeRTOS/queue.c" 1
 1635 0056 BFF34F8F 		dsb
 1636              	@ 0 "" 2
1298:./freeRTOS/queue.c **** 						}
 1637              		.loc 1 1298 8 view .LVU508
 1638              	@ 1298 "./freeRTOS/queue.c" 1
 1639 005a BFF36F8F 		isb
 1640              	@ 0 "" 2
1298:./freeRTOS/queue.c **** 						}
 1641              		.loc 1 1298 40 view .LVU509
 1642              		.thumb
 1643              		.syntax unified
 1644 005e E4E7     		b	.L110
 1645              	.L108:
1312:./freeRTOS/queue.c **** 
 1646              		.loc 1 1312 32 view .LVU510
1316:./freeRTOS/queue.c **** 
 1647              		.loc 1 1316 6 view .LVU511
1316:./freeRTOS/queue.c **** 
 1648              		.loc 1 1316 28 is_stmt 0 view .LVU512
 1649 0060 E560     		str	r5, [r4, #12]
1320:./freeRTOS/queue.c **** 					{
 1650              		.loc 1 1320 6 is_stmt 1 view .LVU513
1320:./freeRTOS/queue.c **** 					{
 1651              		.loc 1 1320 10 is_stmt 0 view .LVU514
 1652 0062 636A     		ldr	r3, [r4, #36]
1320:./freeRTOS/queue.c **** 					{
 1653              		.loc 1 1320 8 view .LVU515
 1654 0064 002B     		cmp	r3, #0
 1655 0066 E0D0     		beq	.L110
1322:./freeRTOS/queue.c **** 						{
 1656              		.loc 1 1322 7 is_stmt 1 view .LVU516
1322:./freeRTOS/queue.c **** 						{
 1657              		.loc 1 1322 11 is_stmt 0 view .LVU517
 1658 0068 04F12400 		add	r0, r4, #36
 1659 006c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1660              	.LVL154:
1322:./freeRTOS/queue.c **** 						{
 1661              		.loc 1 1322 9 view .LVU518
 1662 0070 0028     		cmp	r0, #0
 1663 0072 DAD0     		beq	.L110
1325:./freeRTOS/queue.c **** 						}
 1664              		.loc 1 1325 8 is_stmt 1 view .LVU519
 1665 0074 4FF0E023 		mov	r3, #-536813568
 1666 0078 4FF08052 		mov	r2, #268435456
 1667 007c C3F8042D 		str	r2, [r3, #3332]
1325:./freeRTOS/queue.c **** 						}
 1668              		.loc 1 1325 8 view .LVU520
 1669              		.syntax unified
 1670              	@ 1325 "./freeRTOS/queue.c" 1
 1671 0080 BFF34F8F 		dsb
 1672              	@ 0 "" 2
1325:./freeRTOS/queue.c **** 						}
 1673              		.loc 1 1325 8 view .LVU521
 1674              	@ 1325 "./freeRTOS/queue.c" 1
 1675 0084 BFF36F8F 		isb
 1676              	@ 0 "" 2
ARM GAS  /tmp/ccxxKxzb.s 			page 78


1325:./freeRTOS/queue.c **** 						}
 1677              		.loc 1 1325 40 view .LVU522
 1678              		.thumb
 1679              		.syntax unified
 1680 0088 CFE7     		b	.L110
 1681              	.LVL155:
 1682              	.L125:
1347:./freeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1683              		.loc 1 1347 6 view .LVU523
 1684 008a FFF7FEFF 		bl	vPortExitCritical
 1685              	.LVL156:
1348:./freeRTOS/queue.c **** 					return errQUEUE_EMPTY;
 1686              		.loc 1 1348 42 view .LVU524
1349:./freeRTOS/queue.c **** 				}
 1687              		.loc 1 1349 6 view .LVU525
1349:./freeRTOS/queue.c **** 				}
 1688              		.loc 1 1349 13 is_stmt 0 view .LVU526
 1689 008e 0020     		movs	r0, #0
 1690 0090 CEE7     		b	.L105
 1691              	.L126:
1355:./freeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 1692              		.loc 1 1355 6 is_stmt 1 view .LVU527
 1693 0092 02A8     		add	r0, sp, #8
 1694 0094 FFF7FEFF 		bl	vTaskSetTimeOutState
 1695              	.LVL157:
1356:./freeRTOS/queue.c **** 				}
 1696              		.loc 1 1356 6 view .LVU528
1356:./freeRTOS/queue.c **** 				}
 1697              		.loc 1 1356 20 is_stmt 0 view .LVU529
 1698 0098 0125     		movs	r5, #1
 1699 009a 29E0     		b	.L113
 1700              	.LVL158:
 1701              	.L127:
1356:./freeRTOS/queue.c **** 				}
 1702              		.loc 1 1356 20 view .LVU530
 1703              	.LBE39:
1371:./freeRTOS/queue.c **** 
 1704              		.loc 1 1371 3 is_stmt 1 discriminator 1 view .LVU531
 1705 009c 0023     		movs	r3, #0
 1706 009e 84F84430 		strb	r3, [r4, #68]
 1707 00a2 31E0     		b	.L114
 1708              	.L128:
1371:./freeRTOS/queue.c **** 
 1709              		.loc 1 1371 3 discriminator 4 view .LVU532
 1710 00a4 0023     		movs	r3, #0
 1711 00a6 84F84530 		strb	r3, [r4, #69]
 1712 00aa 33E0     		b	.L115
 1713              	.L129:
1384:./freeRTOS/queue.c **** 						{
 1714              		.loc 1 1384 7 view .LVU533
 1715 00ac FFF7FEFF 		bl	vPortEnterCritical
 1716              	.LVL159:
1386:./freeRTOS/queue.c **** 						}
 1717              		.loc 1 1386 8 view .LVU534
 1718 00b0 6068     		ldr	r0, [r4, #4]
 1719 00b2 FFF7FEFF 		bl	vTaskPriorityInherit
 1720              	.LVL160:
ARM GAS  /tmp/ccxxKxzb.s 			page 79


1388:./freeRTOS/queue.c **** 					}
 1721              		.loc 1 1388 7 view .LVU535
 1722 00b6 FFF7FEFF 		bl	vPortExitCritical
 1723              	.LVL161:
 1724 00ba 3BE0     		b	.L118
 1725              	.L117:
1411:./freeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 1726              		.loc 1 1411 5 view .LVU536
 1727 00bc 2046     		mov	r0, r4
 1728 00be FFF7FEFF 		bl	prvUnlockQueue
 1729              	.LVL162:
1412:./freeRTOS/queue.c **** 			}
 1730              		.loc 1 1412 5 view .LVU537
1412:./freeRTOS/queue.c **** 			}
 1731              		.loc 1 1412 14 is_stmt 0 view .LVU538
 1732 00c2 FFF7FEFF 		bl	xTaskResumeAll
 1733              	.LVL163:
 1734 00c6 09E0     		b	.L106
 1735              	.L116:
1417:./freeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 1736              		.loc 1 1417 4 is_stmt 1 view .LVU539
 1737 00c8 2046     		mov	r0, r4
 1738 00ca FFF7FEFF 		bl	prvUnlockQueue
 1739              	.LVL164:
1418:./freeRTOS/queue.c **** 
 1740              		.loc 1 1418 4 view .LVU540
1418:./freeRTOS/queue.c **** 
 1741              		.loc 1 1418 13 is_stmt 0 view .LVU541
 1742 00ce FFF7FEFF 		bl	xTaskResumeAll
 1743              	.LVL165:
1420:./freeRTOS/queue.c **** 			{
 1744              		.loc 1 1420 4 is_stmt 1 view .LVU542
1420:./freeRTOS/queue.c **** 			{
 1745              		.loc 1 1420 8 is_stmt 0 view .LVU543
 1746 00d2 2046     		mov	r0, r4
 1747 00d4 FFF7FEFF 		bl	prvIsQueueEmpty
 1748              	.LVL166:
1420:./freeRTOS/queue.c **** 			{
 1749              		.loc 1 1420 6 view .LVU544
 1750 00d8 0028     		cmp	r0, #0
 1751 00da 42D1     		bne	.L123
 1752              	.LVL167:
 1753              	.L106:
1244:./freeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1754              		.loc 1 1244 25 is_stmt 1 view .LVU545
1245:./freeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1755              		.loc 1 1245 92 view .LVU546
1256:./freeRTOS/queue.c **** 	{
 1756              		.loc 1 1256 2 view .LVU547
1258:./freeRTOS/queue.c **** 		{
 1757              		.loc 1 1258 3 view .LVU548
 1758 00dc FFF7FEFF 		bl	vPortEnterCritical
 1759              	.LVL168:
 1760              	.LBB40:
1260:./freeRTOS/queue.c **** 
 1761              		.loc 1 1260 4 view .LVU549
1260:./freeRTOS/queue.c **** 
ARM GAS  /tmp/ccxxKxzb.s 			page 80


 1762              		.loc 1 1260 22 is_stmt 0 view .LVU550
 1763 00e0 A76B     		ldr	r7, [r4, #56]
 1764              	.LVL169:
1264:./freeRTOS/queue.c **** 			{
 1765              		.loc 1 1264 4 is_stmt 1 view .LVU551
1264:./freeRTOS/queue.c **** 			{
 1766              		.loc 1 1264 6 is_stmt 0 view .LVU552
 1767 00e2 002F     		cmp	r7, #0
 1768 00e4 95D1     		bne	.L124
1343:./freeRTOS/queue.c **** 				{
 1769              		.loc 1 1343 5 is_stmt 1 view .LVU553
1343:./freeRTOS/queue.c **** 				{
 1770              		.loc 1 1343 22 is_stmt 0 view .LVU554
 1771 00e6 019B     		ldr	r3, [sp, #4]
1343:./freeRTOS/queue.c **** 				{
 1772              		.loc 1 1343 7 view .LVU555
 1773 00e8 002B     		cmp	r3, #0
 1774 00ea CED0     		beq	.L125
1351:./freeRTOS/queue.c **** 				{
 1775              		.loc 1 1351 10 is_stmt 1 view .LVU556
1351:./freeRTOS/queue.c **** 				{
 1776              		.loc 1 1351 12 is_stmt 0 view .LVU557
 1777 00ec 002D     		cmp	r5, #0
 1778 00ee D0D0     		beq	.L126
 1779              	.LVL170:
 1780              	.L113:
1361:./freeRTOS/queue.c **** 				}
 1781              		.loc 1 1361 30 is_stmt 1 view .LVU558
 1782              	.LBE40:
1365:./freeRTOS/queue.c **** 
 1783              		.loc 1 1365 3 view .LVU559
 1784 00f0 FFF7FEFF 		bl	vPortExitCritical
 1785              	.LVL171:
1370:./freeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 1786              		.loc 1 1370 3 view .LVU560
 1787 00f4 FFF7FEFF 		bl	vTaskSuspendAll
 1788              	.LVL172:
1371:./freeRTOS/queue.c **** 
 1789              		.loc 1 1371 3 view .LVU561
 1790 00f8 FFF7FEFF 		bl	vPortEnterCritical
 1791              	.LVL173:
1371:./freeRTOS/queue.c **** 
 1792              		.loc 1 1371 3 view .LVU562
 1793 00fc 94F84420 		ldrb	r2, [r4, #68]	@ zero_extendqisi2
 1794 0100 52B2     		sxtb	r2, r2
 1795 0102 B2F1FF3F 		cmp	r2, #-1
 1796 0106 C9D0     		beq	.L127
 1797              	.L114:
1371:./freeRTOS/queue.c **** 
 1798              		.loc 1 1371 3 discriminator 3 view .LVU563
 1799 0108 94F84520 		ldrb	r2, [r4, #69]	@ zero_extendqisi2
 1800 010c 52B2     		sxtb	r2, r2
 1801 010e B2F1FF3F 		cmp	r2, #-1
 1802 0112 C7D0     		beq	.L128
 1803              	.L115:
1371:./freeRTOS/queue.c **** 
 1804              		.loc 1 1371 3 discriminator 6 view .LVU564
ARM GAS  /tmp/ccxxKxzb.s 			page 81


 1805 0114 FFF7FEFF 		bl	vPortExitCritical
 1806              	.LVL174:
1374:./freeRTOS/queue.c **** 		{
 1807              		.loc 1 1374 3 discriminator 6 view .LVU565
1374:./freeRTOS/queue.c **** 		{
 1808              		.loc 1 1374 7 is_stmt 0 discriminator 6 view .LVU566
 1809 0118 01A9     		add	r1, sp, #4
 1810 011a 02A8     		add	r0, sp, #8
 1811 011c FFF7FEFF 		bl	xTaskCheckForTimeOut
 1812              	.LVL175:
1374:./freeRTOS/queue.c **** 		{
 1813              		.loc 1 1374 5 discriminator 6 view .LVU567
 1814 0120 0028     		cmp	r0, #0
 1815 0122 D1D1     		bne	.L116
1376:./freeRTOS/queue.c **** 			{
 1816              		.loc 1 1376 4 is_stmt 1 view .LVU568
1376:./freeRTOS/queue.c **** 			{
 1817              		.loc 1 1376 8 is_stmt 0 view .LVU569
 1818 0124 2046     		mov	r0, r4
 1819 0126 FFF7FEFF 		bl	prvIsQueueEmpty
 1820              	.LVL176:
1376:./freeRTOS/queue.c **** 			{
 1821              		.loc 1 1376 6 view .LVU570
 1822 012a 0028     		cmp	r0, #0
 1823 012c C6D0     		beq	.L117
1378:./freeRTOS/queue.c **** 
 1824              		.loc 1 1378 46 is_stmt 1 view .LVU571
1382:./freeRTOS/queue.c **** 					{
 1825              		.loc 1 1382 6 view .LVU572
1382:./freeRTOS/queue.c **** 					{
 1826              		.loc 1 1382 17 is_stmt 0 view .LVU573
 1827 012e 2368     		ldr	r3, [r4]
1382:./freeRTOS/queue.c **** 					{
 1828              		.loc 1 1382 8 view .LVU574
 1829 0130 002B     		cmp	r3, #0
 1830 0132 BBD0     		beq	.L129
 1831              	.L118:
1392:./freeRTOS/queue.c **** 					}
 1832              		.loc 1 1392 31 is_stmt 1 view .LVU575
1397:./freeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 1833              		.loc 1 1397 5 view .LVU576
 1834 0134 0199     		ldr	r1, [sp, #4]
 1835 0136 04F12400 		add	r0, r4, #36
 1836 013a FFF7FEFF 		bl	vTaskPlaceOnEventList
 1837              	.LVL177:
1398:./freeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1838              		.loc 1 1398 5 view .LVU577
 1839 013e 2046     		mov	r0, r4
 1840 0140 FFF7FEFF 		bl	prvUnlockQueue
 1841              	.LVL178:
1399:./freeRTOS/queue.c **** 				{
 1842              		.loc 1 1399 5 view .LVU578
1399:./freeRTOS/queue.c **** 				{
 1843              		.loc 1 1399 9 is_stmt 0 view .LVU579
 1844 0144 FFF7FEFF 		bl	xTaskResumeAll
 1845              	.LVL179:
1399:./freeRTOS/queue.c **** 				{
ARM GAS  /tmp/ccxxKxzb.s 			page 82


 1846              		.loc 1 1399 7 view .LVU580
 1847 0148 0028     		cmp	r0, #0
 1848 014a C7D1     		bne	.L106
1401:./freeRTOS/queue.c **** 				}
 1849              		.loc 1 1401 6 is_stmt 1 view .LVU581
 1850 014c 4FF0E023 		mov	r3, #-536813568
 1851 0150 4FF08052 		mov	r2, #268435456
 1852 0154 C3F8042D 		str	r2, [r3, #3332]
1401:./freeRTOS/queue.c **** 				}
 1853              		.loc 1 1401 6 view .LVU582
 1854              		.syntax unified
 1855              	@ 1401 "./freeRTOS/queue.c" 1
 1856 0158 BFF34F8F 		dsb
 1857              	@ 0 "" 2
1401:./freeRTOS/queue.c **** 				}
 1858              		.loc 1 1401 6 view .LVU583
 1859              	@ 1401 "./freeRTOS/queue.c" 1
 1860 015c BFF36F8F 		isb
 1861              	@ 0 "" 2
1401:./freeRTOS/queue.c **** 				}
 1862              		.loc 1 1401 28 view .LVU584
 1863              		.thumb
 1864              		.syntax unified
 1865 0160 BCE7     		b	.L106
 1866              	.L123:
1423:./freeRTOS/queue.c **** 			}
 1867              		.loc 1 1423 12 is_stmt 0 view .LVU585
 1868 0162 0020     		movs	r0, #0
 1869 0164 64E7     		b	.L105
 1870              		.cfi_endproc
 1871              	.LFE14:
 1873              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1874              		.align	1
 1875              		.global	xQueueReceiveFromISR
 1876              		.syntax unified
 1877              		.thumb
 1878              		.thumb_func
 1879              		.fpu fpv4-sp-d16
 1881              	xQueueReceiveFromISR:
 1882              	.LVL180:
 1883              	.LFB15:
1435:./freeRTOS/queue.c **** BaseType_t xReturn;
 1884              		.loc 1 1435 1 is_stmt 1 view -0
 1885              		.cfi_startproc
 1886              		@ args = 0, pretend = 0, frame = 0
 1887              		@ frame_needed = 0, uses_anonymous_args = 0
1435:./freeRTOS/queue.c **** BaseType_t xReturn;
 1888              		.loc 1 1435 1 is_stmt 0 view .LVU587
 1889 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1890              	.LCFI26:
 1891              		.cfi_def_cfa_offset 24
 1892              		.cfi_offset 4, -24
 1893              		.cfi_offset 5, -20
 1894              		.cfi_offset 6, -16
 1895              		.cfi_offset 7, -12
 1896              		.cfi_offset 8, -8
 1897              		.cfi_offset 14, -4
ARM GAS  /tmp/ccxxKxzb.s 			page 83


1436:./freeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1898              		.loc 1 1436 1 is_stmt 1 view .LVU588
1437:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1899              		.loc 1 1437 1 view .LVU589
1438:./freeRTOS/queue.c **** 
 1900              		.loc 1 1438 1 view .LVU590
 1901              	.LVL181:
1440:./freeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1902              		.loc 1 1440 25 view .LVU591
1441:./freeRTOS/queue.c **** 
 1903              		.loc 1 1441 92 view .LVU592
1457:./freeRTOS/queue.c **** 
 1904              		.loc 1 1457 44 view .LVU593
1459:./freeRTOS/queue.c **** 	{
 1905              		.loc 1 1459 2 view .LVU594
 1906              	.LBB41:
 1907              	.LBI41:
 249:freeRTOS/GCC/portmacro.h **** {
 1908              		.loc 2 249 34 view .LVU595
 1909              	.LBB42:
 251:freeRTOS/GCC/portmacro.h **** 
 1910              		.loc 2 251 1 view .LVU596
 253:freeRTOS/GCC/portmacro.h **** 	(
 1911              		.loc 2 253 2 view .LVU597
 1912              		.syntax unified
 1913              	@ 253 "freeRTOS/GCC/portmacro.h" 1
 1914 0004 EFF31188 			mrs r8, basepri											
 1915 0008 4FF0BF03 		mov r3, #191												
 1916 000c 83F31188 		msr basepri, r3											
 1917 0010 BFF36F8F 		isb														
 1918 0014 BFF34F8F 		dsb														
 1919              	
 1920              	@ 0 "" 2
 1921              	.LVL182:
 265:freeRTOS/GCC/portmacro.h **** }
 1922              		.loc 2 265 2 view .LVU598
 265:freeRTOS/GCC/portmacro.h **** }
 1923              		.loc 2 265 2 is_stmt 0 view .LVU599
 1924              		.thumb
 1925              		.syntax unified
 1926              	.LBE42:
 1927              	.LBE41:
 1928              	.LBB43:
1461:./freeRTOS/queue.c **** 
 1929              		.loc 1 1461 3 is_stmt 1 view .LVU600
1461:./freeRTOS/queue.c **** 
 1930              		.loc 1 1461 21 is_stmt 0 view .LVU601
 1931 0018 866B     		ldr	r6, [r0, #56]
 1932              	.LVL183:
1464:./freeRTOS/queue.c **** 		{
 1933              		.loc 1 1464 3 is_stmt 1 view .LVU602
1464:./freeRTOS/queue.c **** 		{
 1934              		.loc 1 1464 5 is_stmt 0 view .LVU603
 1935 001a 26B9     		cbnz	r6, .L138
1515:./freeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 1936              		.loc 1 1515 12 view .LVU604
 1937 001c 0020     		movs	r0, #0
ARM GAS  /tmp/ccxxKxzb.s 			page 84


 1938              	.LVL184:
 1939              	.L131:
1516:./freeRTOS/queue.c **** 		}
 1940              		.loc 1 1516 49 is_stmt 1 view .LVU605
 1941              	.LBE43:
1519:./freeRTOS/queue.c **** 
 1942              		.loc 1 1519 2 view .LVU606
 1943              	.LBB45:
 1944              	.LBI45:
 269:freeRTOS/GCC/portmacro.h **** {
 1945              		.loc 2 269 30 view .LVU607
 1946              	.LBB46:
 1947              		.loc 2 271 2 view .LVU608
 1948              		.syntax unified
 1949              	@ 271 "freeRTOS/GCC/portmacro.h" 1
 1950 001e 88F31188 			msr basepri, r8	
 1951              	@ 0 "" 2
 1952              	.LVL185:
 1953              		.loc 2 271 2 is_stmt 0 view .LVU609
 1954              		.thumb
 1955              		.syntax unified
 1956              	.LBE46:
 1957              	.LBE45:
1521:./freeRTOS/queue.c **** }
 1958              		.loc 1 1521 2 is_stmt 1 view .LVU610
1522:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1959              		.loc 1 1522 1 is_stmt 0 view .LVU611
 1960 0022 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1961              	.LVL186:
 1962              	.L138:
1522:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1963              		.loc 1 1522 1 view .LVU612
 1964 0026 0446     		mov	r4, r0
 1965 0028 1546     		mov	r5, r2
 1966              	.LBB47:
 1967              	.LBB44:
1466:./freeRTOS/queue.c **** 
 1968              		.loc 1 1466 4 is_stmt 1 view .LVU613
1466:./freeRTOS/queue.c **** 
 1969              		.loc 1 1466 17 is_stmt 0 view .LVU614
 1970 002a 90F84470 		ldrb	r7, [r0, #68]	@ zero_extendqisi2
 1971 002e 7FB2     		sxtb	r7, r7
 1972              	.LVL187:
1468:./freeRTOS/queue.c **** 
 1973              		.loc 1 1468 42 is_stmt 1 view .LVU615
1470:./freeRTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 1974              		.loc 1 1470 4 view .LVU616
 1975 0030 FFF7FEFF 		bl	prvCopyDataFromQueue
 1976              	.LVL188:
1471:./freeRTOS/queue.c **** 
 1977              		.loc 1 1471 4 view .LVU617
1471:./freeRTOS/queue.c **** 
 1978              		.loc 1 1471 51 is_stmt 0 view .LVU618
 1979 0034 013E     		subs	r6, r6, #1
 1980              	.LVL189:
1471:./freeRTOS/queue.c **** 
 1981              		.loc 1 1471 31 view .LVU619
ARM GAS  /tmp/ccxxKxzb.s 			page 85


 1982 0036 A663     		str	r6, [r4, #56]
1477:./freeRTOS/queue.c **** 			{
 1983              		.loc 1 1477 4 is_stmt 1 view .LVU620
1477:./freeRTOS/queue.c **** 			{
 1984              		.loc 1 1477 6 is_stmt 0 view .LVU621
 1985 0038 B7F1FF3F 		cmp	r7, #-1
 1986 003c 05D0     		beq	.L139
1508:./freeRTOS/queue.c **** 			}
 1987              		.loc 1 1508 5 is_stmt 1 view .LVU622
1508:./freeRTOS/queue.c **** 			}
 1988              		.loc 1 1508 45 is_stmt 0 view .LVU623
 1989 003e 0137     		adds	r7, r7, #1
 1990              	.LVL190:
1508:./freeRTOS/queue.c **** 			}
 1991              		.loc 1 1508 24 view .LVU624
 1992 0040 7FB2     		sxtb	r7, r7
 1993              	.LVL191:
1508:./freeRTOS/queue.c **** 			}
 1994              		.loc 1 1508 22 view .LVU625
 1995 0042 84F84470 		strb	r7, [r4, #68]
1511:./freeRTOS/queue.c **** 		}
 1996              		.loc 1 1511 12 view .LVU626
 1997 0046 0120     		movs	r0, #1
 1998 0048 E9E7     		b	.L131
 1999              	.LVL192:
 2000              	.L139:
1479:./freeRTOS/queue.c **** 				{
 2001              		.loc 1 1479 5 is_stmt 1 view .LVU627
1479:./freeRTOS/queue.c **** 				{
 2002              		.loc 1 1479 9 is_stmt 0 view .LVU628
 2003 004a 2369     		ldr	r3, [r4, #16]
1479:./freeRTOS/queue.c **** 				{
 2004              		.loc 1 1479 7 view .LVU629
 2005 004c 0BB9     		cbnz	r3, .L140
1511:./freeRTOS/queue.c **** 		}
 2006              		.loc 1 1511 12 view .LVU630
 2007 004e 0120     		movs	r0, #1
 2008 0050 E5E7     		b	.L131
 2009              	.L140:
1481:./freeRTOS/queue.c **** 					{
 2010              		.loc 1 1481 6 is_stmt 1 view .LVU631
1481:./freeRTOS/queue.c **** 					{
 2011              		.loc 1 1481 10 is_stmt 0 view .LVU632
 2012 0052 04F11000 		add	r0, r4, #16
 2013 0056 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2014              	.LVL193:
1481:./freeRTOS/queue.c **** 					{
 2015              		.loc 1 1481 8 view .LVU633
 2016 005a 18B1     		cbz	r0, .L135
1485:./freeRTOS/queue.c **** 						{
 2017              		.loc 1 1485 7 is_stmt 1 view .LVU634
1485:./freeRTOS/queue.c **** 						{
 2018              		.loc 1 1485 9 is_stmt 0 view .LVU635
 2019 005c 25B1     		cbz	r5, .L136
1487:./freeRTOS/queue.c **** 						}
 2020              		.loc 1 1487 8 is_stmt 1 view .LVU636
1487:./freeRTOS/queue.c **** 						}
ARM GAS  /tmp/ccxxKxzb.s 			page 86


 2021              		.loc 1 1487 35 is_stmt 0 view .LVU637
 2022 005e 0120     		movs	r0, #1
 2023 0060 2860     		str	r0, [r5]
 2024 0062 DCE7     		b	.L131
 2025              	.L135:
1511:./freeRTOS/queue.c **** 		}
 2026              		.loc 1 1511 12 view .LVU638
 2027 0064 0120     		movs	r0, #1
 2028 0066 DAE7     		b	.L131
 2029              	.L136:
 2030 0068 0120     		movs	r0, #1
 2031 006a D8E7     		b	.L131
 2032              	.LBE44:
 2033              	.LBE47:
 2034              		.cfi_endproc
 2035              	.LFE15:
 2037              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2038              		.align	1
 2039              		.global	xQueuePeekFromISR
 2040              		.syntax unified
 2041              		.thumb
 2042              		.thumb_func
 2043              		.fpu fpv4-sp-d16
 2045              	xQueuePeekFromISR:
 2046              	.LVL194:
 2047              	.LFB16:
1526:./freeRTOS/queue.c **** BaseType_t xReturn;
 2048              		.loc 1 1526 1 is_stmt 1 view -0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 0
 2051              		@ frame_needed = 0, uses_anonymous_args = 0
1526:./freeRTOS/queue.c **** BaseType_t xReturn;
 2052              		.loc 1 1526 1 is_stmt 0 view .LVU640
 2053 0000 70B5     		push	{r4, r5, r6, lr}
 2054              	.LCFI27:
 2055              		.cfi_def_cfa_offset 16
 2056              		.cfi_offset 4, -16
 2057              		.cfi_offset 5, -12
 2058              		.cfi_offset 6, -8
 2059              		.cfi_offset 14, -4
1527:./freeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
 2060              		.loc 1 1527 1 is_stmt 1 view .LVU641
1528:./freeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
 2061              		.loc 1 1528 1 view .LVU642
1529:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2062              		.loc 1 1529 1 view .LVU643
1530:./freeRTOS/queue.c **** 
 2063              		.loc 1 1530 1 view .LVU644
 2064              	.LVL195:
1532:./freeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2065              		.loc 1 1532 25 view .LVU645
1533:./freeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2066              		.loc 1 1533 92 view .LVU646
1534:./freeRTOS/queue.c **** 
 2067              		.loc 1 1534 42 view .LVU647
1550:./freeRTOS/queue.c **** 
 2068              		.loc 1 1550 44 view .LVU648
ARM GAS  /tmp/ccxxKxzb.s 			page 87


1552:./freeRTOS/queue.c **** 	{
 2069              		.loc 1 1552 2 view .LVU649
 2070              	.LBB48:
 2071              	.LBI48:
 249:freeRTOS/GCC/portmacro.h **** {
 2072              		.loc 2 249 34 view .LVU650
 2073              	.LBB49:
 251:freeRTOS/GCC/portmacro.h **** 
 2074              		.loc 2 251 1 view .LVU651
 253:freeRTOS/GCC/portmacro.h **** 	(
 2075              		.loc 2 253 2 view .LVU652
 2076              		.syntax unified
 2077              	@ 253 "freeRTOS/GCC/portmacro.h" 1
 2078 0002 EFF31185 			mrs r5, basepri											
 2079 0006 4FF0BF03 		mov r3, #191												
 2080 000a 83F31188 		msr basepri, r3											
 2081 000e BFF36F8F 		isb														
 2082 0012 BFF34F8F 		dsb														
 2083              	
 2084              	@ 0 "" 2
 2085              	.LVL196:
 265:freeRTOS/GCC/portmacro.h **** }
 2086              		.loc 2 265 2 view .LVU653
 265:freeRTOS/GCC/portmacro.h **** }
 2087              		.loc 2 265 2 is_stmt 0 view .LVU654
 2088              		.thumb
 2089              		.syntax unified
 2090              	.LBE49:
 2091              	.LBE48:
1555:./freeRTOS/queue.c **** 		{
 2092              		.loc 1 1555 3 is_stmt 1 view .LVU655
1555:./freeRTOS/queue.c **** 		{
 2093              		.loc 1 1555 14 is_stmt 0 view .LVU656
 2094 0016 836B     		ldr	r3, [r0, #56]
1555:./freeRTOS/queue.c **** 		{
 2095              		.loc 1 1555 5 view .LVU657
 2096 0018 1BB9     		cbnz	r3, .L145
1569:./freeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2097              		.loc 1 1569 12 view .LVU658
 2098 001a 0020     		movs	r0, #0
 2099              	.LVL197:
 2100              	.L142:
1570:./freeRTOS/queue.c **** 		}
 2101              		.loc 1 1570 46 is_stmt 1 view .LVU659
1573:./freeRTOS/queue.c **** 
 2102              		.loc 1 1573 2 view .LVU660
 2103              	.LBB50:
 2104              	.LBI50:
 269:freeRTOS/GCC/portmacro.h **** {
 2105              		.loc 2 269 30 view .LVU661
 2106              	.LBB51:
 2107              		.loc 2 271 2 view .LVU662
 2108              		.syntax unified
 2109              	@ 271 "freeRTOS/GCC/portmacro.h" 1
 2110 001c 85F31188 			msr basepri, r5	
 2111              	@ 0 "" 2
 2112              	.LVL198:
ARM GAS  /tmp/ccxxKxzb.s 			page 88


 2113              		.loc 2 271 2 is_stmt 0 view .LVU663
 2114              		.thumb
 2115              		.syntax unified
 2116              	.LBE51:
 2117              	.LBE50:
1575:./freeRTOS/queue.c **** }
 2118              		.loc 1 1575 2 is_stmt 1 view .LVU664
1576:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2119              		.loc 1 1576 1 is_stmt 0 view .LVU665
 2120 0020 70BD     		pop	{r4, r5, r6, pc}
 2121              	.LVL199:
 2122              	.L145:
1576:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2123              		.loc 1 1576 1 view .LVU666
 2124 0022 0446     		mov	r4, r0
1557:./freeRTOS/queue.c **** 
 2125              		.loc 1 1557 39 is_stmt 1 view .LVU667
1561:./freeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2126              		.loc 1 1561 4 view .LVU668
1561:./freeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2127              		.loc 1 1561 27 is_stmt 0 view .LVU669
 2128 0024 C668     		ldr	r6, [r0, #12]
 2129              	.LVL200:
1562:./freeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2130              		.loc 1 1562 4 is_stmt 1 view .LVU670
 2131 0026 FFF7FEFF 		bl	prvCopyDataFromQueue
 2132              	.LVL201:
1563:./freeRTOS/queue.c **** 
 2133              		.loc 1 1563 4 view .LVU671
1563:./freeRTOS/queue.c **** 
 2134              		.loc 1 1563 26 is_stmt 0 view .LVU672
 2135 002a E660     		str	r6, [r4, #12]
1565:./freeRTOS/queue.c **** 		}
 2136              		.loc 1 1565 4 is_stmt 1 view .LVU673
 2137              	.LVL202:
1565:./freeRTOS/queue.c **** 		}
 2138              		.loc 1 1565 12 is_stmt 0 view .LVU674
 2139 002c 0120     		movs	r0, #1
 2140 002e F5E7     		b	.L142
 2141              		.cfi_endproc
 2142              	.LFE16:
 2144              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2145              		.align	1
 2146              		.global	uxQueueMessagesWaiting
 2147              		.syntax unified
 2148              		.thumb
 2149              		.thumb_func
 2150              		.fpu fpv4-sp-d16
 2152              	uxQueueMessagesWaiting:
 2153              	.LVL203:
 2154              	.LFB17:
1580:./freeRTOS/queue.c **** UBaseType_t uxReturn;
 2155              		.loc 1 1580 1 is_stmt 1 view -0
 2156              		.cfi_startproc
 2157              		@ args = 0, pretend = 0, frame = 0
 2158              		@ frame_needed = 0, uses_anonymous_args = 0
1580:./freeRTOS/queue.c **** UBaseType_t uxReturn;
ARM GAS  /tmp/ccxxKxzb.s 			page 89


 2159              		.loc 1 1580 1 is_stmt 0 view .LVU676
 2160 0000 10B5     		push	{r4, lr}
 2161              	.LCFI28:
 2162              		.cfi_def_cfa_offset 8
 2163              		.cfi_offset 4, -8
 2164              		.cfi_offset 14, -4
 2165 0002 0446     		mov	r4, r0
1581:./freeRTOS/queue.c **** 
 2166              		.loc 1 1581 1 is_stmt 1 view .LVU677
1583:./freeRTOS/queue.c **** 
 2167              		.loc 1 1583 24 view .LVU678
1585:./freeRTOS/queue.c **** 	{
 2168              		.loc 1 1585 2 view .LVU679
 2169 0004 FFF7FEFF 		bl	vPortEnterCritical
 2170              	.LVL204:
1587:./freeRTOS/queue.c **** 	}
 2171              		.loc 1 1587 3 view .LVU680
1587:./freeRTOS/queue.c **** 	}
 2172              		.loc 1 1587 12 is_stmt 0 view .LVU681
 2173 0008 A46B     		ldr	r4, [r4, #56]
 2174              	.LVL205:
1589:./freeRTOS/queue.c **** 
 2175              		.loc 1 1589 2 is_stmt 1 view .LVU682
 2176 000a FFF7FEFF 		bl	vPortExitCritical
 2177              	.LVL206:
1591:./freeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2178              		.loc 1 1591 2 view .LVU683
1592:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2179              		.loc 1 1592 1 is_stmt 0 view .LVU684
 2180 000e 2046     		mov	r0, r4
 2181 0010 10BD     		pop	{r4, pc}
1592:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2182              		.loc 1 1592 1 view .LVU685
 2183              		.cfi_endproc
 2184              	.LFE17:
 2186              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2187              		.align	1
 2188              		.global	uxQueueSpacesAvailable
 2189              		.syntax unified
 2190              		.thumb
 2191              		.thumb_func
 2192              		.fpu fpv4-sp-d16
 2194              	uxQueueSpacesAvailable:
 2195              	.LVL207:
 2196              	.LFB18:
1596:./freeRTOS/queue.c **** UBaseType_t uxReturn;
 2197              		.loc 1 1596 1 is_stmt 1 view -0
 2198              		.cfi_startproc
 2199              		@ args = 0, pretend = 0, frame = 0
 2200              		@ frame_needed = 0, uses_anonymous_args = 0
1596:./freeRTOS/queue.c **** UBaseType_t uxReturn;
 2201              		.loc 1 1596 1 is_stmt 0 view .LVU687
 2202 0000 10B5     		push	{r4, lr}
 2203              	.LCFI29:
 2204              		.cfi_def_cfa_offset 8
 2205              		.cfi_offset 4, -8
 2206              		.cfi_offset 14, -4
ARM GAS  /tmp/ccxxKxzb.s 			page 90


 2207 0002 0446     		mov	r4, r0
1597:./freeRTOS/queue.c **** Queue_t *pxQueue;
 2208              		.loc 1 1597 1 is_stmt 1 view .LVU688
1598:./freeRTOS/queue.c **** 
 2209              		.loc 1 1598 1 view .LVU689
1600:./freeRTOS/queue.c **** 	configASSERT( pxQueue );
 2210              		.loc 1 1600 2 view .LVU690
 2211              	.LVL208:
1601:./freeRTOS/queue.c **** 
 2212              		.loc 1 1601 25 view .LVU691
1603:./freeRTOS/queue.c **** 	{
 2213              		.loc 1 1603 2 view .LVU692
 2214 0004 FFF7FEFF 		bl	vPortEnterCritical
 2215              	.LVL209:
1605:./freeRTOS/queue.c **** 	}
 2216              		.loc 1 1605 3 view .LVU693
1605:./freeRTOS/queue.c **** 	}
 2217              		.loc 1 1605 21 is_stmt 0 view .LVU694
 2218 0008 E36B     		ldr	r3, [r4, #60]
1605:./freeRTOS/queue.c **** 	}
 2219              		.loc 1 1605 41 view .LVU695
 2220 000a A46B     		ldr	r4, [r4, #56]
 2221              	.LVL210:
1605:./freeRTOS/queue.c **** 	}
 2222              		.loc 1 1605 12 view .LVU696
 2223 000c 1C1B     		subs	r4, r3, r4
 2224              	.LVL211:
1607:./freeRTOS/queue.c **** 
 2225              		.loc 1 1607 2 is_stmt 1 view .LVU697
 2226 000e FFF7FEFF 		bl	vPortExitCritical
 2227              	.LVL212:
1609:./freeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2228              		.loc 1 1609 2 view .LVU698
1610:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2229              		.loc 1 1610 1 is_stmt 0 view .LVU699
 2230 0012 2046     		mov	r0, r4
 2231 0014 10BD     		pop	{r4, pc}
1610:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2232              		.loc 1 1610 1 view .LVU700
 2233              		.cfi_endproc
 2234              	.LFE18:
 2236              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2237              		.align	1
 2238              		.global	uxQueueMessagesWaitingFromISR
 2239              		.syntax unified
 2240              		.thumb
 2241              		.thumb_func
 2242              		.fpu fpv4-sp-d16
 2244              	uxQueueMessagesWaitingFromISR:
 2245              	.LVL213:
 2246              	.LFB19:
1614:./freeRTOS/queue.c **** UBaseType_t uxReturn;
 2247              		.loc 1 1614 1 is_stmt 1 view -0
 2248              		.cfi_startproc
 2249              		@ args = 0, pretend = 0, frame = 0
 2250              		@ frame_needed = 0, uses_anonymous_args = 0
 2251              		@ link register save eliminated.
ARM GAS  /tmp/ccxxKxzb.s 			page 91


1615:./freeRTOS/queue.c **** 
 2252              		.loc 1 1615 1 view .LVU702
1617:./freeRTOS/queue.c **** 
 2253              		.loc 1 1617 24 view .LVU703
1619:./freeRTOS/queue.c **** 
 2254              		.loc 1 1619 2 view .LVU704
1619:./freeRTOS/queue.c **** 
 2255              		.loc 1 1619 11 is_stmt 0 view .LVU705
 2256 0000 806B     		ldr	r0, [r0, #56]
 2257              	.LVL214:
1621:./freeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2258              		.loc 1 1621 2 is_stmt 1 view .LVU706
1622:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2259              		.loc 1 1622 1 is_stmt 0 view .LVU707
 2260 0002 7047     		bx	lr
 2261              		.cfi_endproc
 2262              	.LFE19:
 2264              		.section	.text.vQueueDelete,"ax",%progbits
 2265              		.align	1
 2266              		.global	vQueueDelete
 2267              		.syntax unified
 2268              		.thumb
 2269              		.thumb_func
 2270              		.fpu fpv4-sp-d16
 2272              	vQueueDelete:
 2273              	.LVL215:
 2274              	.LFB20:
1626:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2275              		.loc 1 1626 1 is_stmt 1 view -0
 2276              		.cfi_startproc
 2277              		@ args = 0, pretend = 0, frame = 0
 2278              		@ frame_needed = 0, uses_anonymous_args = 0
1626:./freeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2279              		.loc 1 1626 1 is_stmt 0 view .LVU709
 2280 0000 08B5     		push	{r3, lr}
 2281              	.LCFI30:
 2282              		.cfi_def_cfa_offset 8
 2283              		.cfi_offset 3, -8
 2284              		.cfi_offset 14, -4
1627:./freeRTOS/queue.c **** 
 2285              		.loc 1 1627 1 is_stmt 1 view .LVU710
 2286              	.LVL216:
1629:./freeRTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2287              		.loc 1 1629 25 view .LVU711
1630:./freeRTOS/queue.c **** 
 2288              		.loc 1 1630 30 view .LVU712
1642:./freeRTOS/queue.c **** 	}
 2289              		.loc 1 1642 3 view .LVU713
 2290 0002 FFF7FEFF 		bl	vPortFree
 2291              	.LVL217:
1664:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2292              		.loc 1 1664 1 is_stmt 0 view .LVU714
 2293 0006 08BD     		pop	{r3, pc}
 2294              		.cfi_endproc
 2295              	.LFE20:
 2297              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2298              		.align	1
ARM GAS  /tmp/ccxxKxzb.s 			page 92


 2299              		.global	xQueueIsQueueEmptyFromISR
 2300              		.syntax unified
 2301              		.thumb
 2302              		.thumb_func
 2303              		.fpu fpv4-sp-d16
 2305              	xQueueIsQueueEmptyFromISR:
 2306              	.LVL218:
 2307              	.LFB25:
1936:./freeRTOS/queue.c **** BaseType_t xReturn;
 2308              		.loc 1 1936 1 is_stmt 1 view -0
 2309              		.cfi_startproc
 2310              		@ args = 0, pretend = 0, frame = 0
 2311              		@ frame_needed = 0, uses_anonymous_args = 0
 2312              		@ link register save eliminated.
1937:./freeRTOS/queue.c **** 
 2313              		.loc 1 1937 1 view .LVU716
1939:./freeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2314              		.loc 1 1939 24 view .LVU717
1940:./freeRTOS/queue.c **** 	{
 2315              		.loc 1 1940 2 view .LVU718
1940:./freeRTOS/queue.c **** 	{
 2316              		.loc 1 1940 30 is_stmt 0 view .LVU719
 2317 0000 836B     		ldr	r3, [r0, #56]
1940:./freeRTOS/queue.c **** 	{
 2318              		.loc 1 1940 4 view .LVU720
 2319 0002 0BB9     		cbnz	r3, .L155
1942:./freeRTOS/queue.c **** 	}
 2320              		.loc 1 1942 11 view .LVU721
 2321 0004 0120     		movs	r0, #1
 2322              	.LVL219:
1942:./freeRTOS/queue.c **** 	}
 2323              		.loc 1 1942 11 view .LVU722
 2324 0006 7047     		bx	lr
 2325              	.LVL220:
 2326              	.L155:
1946:./freeRTOS/queue.c **** 	}
 2327              		.loc 1 1946 11 view .LVU723
 2328 0008 0020     		movs	r0, #0
 2329              	.LVL221:
1949:./freeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2330              		.loc 1 1949 2 is_stmt 1 view .LVU724
1950:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2331              		.loc 1 1950 1 is_stmt 0 view .LVU725
 2332 000a 7047     		bx	lr
 2333              		.cfi_endproc
 2334              	.LFE25:
 2336              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2337              		.align	1
 2338              		.global	xQueueIsQueueFullFromISR
 2339              		.syntax unified
 2340              		.thumb
 2341              		.thumb_func
 2342              		.fpu fpv4-sp-d16
 2344              	xQueueIsQueueFullFromISR:
 2345              	.LVL222:
 2346              	.LFB27:
1972:./freeRTOS/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccxxKxzb.s 			page 93


1973:./freeRTOS/queue.c **** 
1974:./freeRTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1975:./freeRTOS/queue.c **** {
 2347              		.loc 1 1975 1 is_stmt 1 view -0
 2348              		.cfi_startproc
 2349              		@ args = 0, pretend = 0, frame = 0
 2350              		@ frame_needed = 0, uses_anonymous_args = 0
 2351              		@ link register save eliminated.
1976:./freeRTOS/queue.c **** BaseType_t xReturn;
 2352              		.loc 1 1976 1 view .LVU727
1977:./freeRTOS/queue.c **** 
1978:./freeRTOS/queue.c **** 	configASSERT( xQueue );
 2353              		.loc 1 1978 24 view .LVU728
1979:./freeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2354              		.loc 1 1979 2 view .LVU729
 2355              		.loc 1 1979 30 is_stmt 0 view .LVU730
 2356 0000 826B     		ldr	r2, [r0, #56]
 2357              		.loc 1 1979 77 view .LVU731
 2358 0002 C36B     		ldr	r3, [r0, #60]
 2359              		.loc 1 1979 4 view .LVU732
 2360 0004 9A42     		cmp	r2, r3
 2361 0006 01D0     		beq	.L159
1980:./freeRTOS/queue.c **** 	{
1981:./freeRTOS/queue.c **** 		xReturn = pdTRUE;
1982:./freeRTOS/queue.c **** 	}
1983:./freeRTOS/queue.c **** 	else
1984:./freeRTOS/queue.c **** 	{
1985:./freeRTOS/queue.c **** 		xReturn = pdFALSE;
 2362              		.loc 1 1985 11 view .LVU733
 2363 0008 0020     		movs	r0, #0
 2364              	.LVL223:
1986:./freeRTOS/queue.c **** 	}
1987:./freeRTOS/queue.c **** 
1988:./freeRTOS/queue.c **** 	return xReturn;
 2365              		.loc 1 1988 2 is_stmt 1 view .LVU734
1989:./freeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2366              		.loc 1 1989 1 is_stmt 0 view .LVU735
 2367 000a 7047     		bx	lr
 2368              	.LVL224:
 2369              	.L159:
1981:./freeRTOS/queue.c **** 	}
 2370              		.loc 1 1981 11 view .LVU736
 2371 000c 0120     		movs	r0, #1
 2372              	.LVL225:
1981:./freeRTOS/queue.c **** 	}
 2373              		.loc 1 1981 11 view .LVU737
 2374 000e 7047     		bx	lr
 2375              		.cfi_endproc
 2376              	.LFE27:
 2378              		.text
 2379              	.Letext0:
 2380              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 2381              		.file 4 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 2382              		.file 5 "freeRTOS/include/list.h"
 2383              		.file 6 "freeRTOS/include/task.h"
 2384              		.file 7 "freeRTOS/include/queue.h"
 2385              		.file 8 "freeRTOS/include/portable.h"
ARM GAS  /tmp/ccxxKxzb.s 			page 94


 2386              		.file 9 "<built-in>"
ARM GAS  /tmp/ccxxKxzb.s 			page 95


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
     /tmp/ccxxKxzb.s:18     .text.prvIsQueueFull:0000000000000000 $t
     /tmp/ccxxKxzb.s:25     .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
     /tmp/ccxxKxzb.s:74     .text.prvIsQueueEmpty:0000000000000000 $t
     /tmp/ccxxKxzb.s:80     .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
     /tmp/ccxxKxzb.s:125    .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/ccxxKxzb.s:131    .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/ccxxKxzb.s:288    .text.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/ccxxKxzb.s:294    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/ccxxKxzb.s:354    .text.prvUnlockQueue:0000000000000000 $t
     /tmp/ccxxKxzb.s:360    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/ccxxKxzb.s:485    .text.xQueueGenericReset:0000000000000000 $t
     /tmp/ccxxKxzb.s:492    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/ccxxKxzb.s:604    .text.prvInitialiseNewQueue:0000000000000000 $t
     /tmp/ccxxKxzb.s:610    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
     /tmp/ccxxKxzb.s:663    .text.xQueueGenericCreate:0000000000000000 $t
     /tmp/ccxxKxzb.s:670    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
     /tmp/ccxxKxzb.s:752    .text.xQueueCreateCountingSemaphore:0000000000000000 $t
     /tmp/ccxxKxzb.s:759    .text.xQueueCreateCountingSemaphore:0000000000000000 xQueueCreateCountingSemaphore
     /tmp/ccxxKxzb.s:801    .text.xQueueGenericSend:0000000000000000 $t
     /tmp/ccxxKxzb.s:808    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/ccxxKxzb.s:1081   .text.prvInitialiseMutex:0000000000000000 $t
     /tmp/ccxxKxzb.s:1087   .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
     /tmp/ccxxKxzb.s:1135   .text.xQueueCreateMutex:0000000000000000 $t
     /tmp/ccxxKxzb.s:1142   .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
     /tmp/ccxxKxzb.s:1181   .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/ccxxKxzb.s:1188   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/ccxxKxzb.s:1343   .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/ccxxKxzb.s:1350   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/ccxxKxzb.s:1516   .text.xQueueGenericReceive:0000000000000000 $t
     /tmp/ccxxKxzb.s:1523   .text.xQueueGenericReceive:0000000000000000 xQueueGenericReceive
     /tmp/ccxxKxzb.s:1874   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/ccxxKxzb.s:1881   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/ccxxKxzb.s:2038   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/ccxxKxzb.s:2045   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/ccxxKxzb.s:2145   .text.uxQueueMessagesWaiting:0000000000000000 $t
     /tmp/ccxxKxzb.s:2152   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
     /tmp/ccxxKxzb.s:2187   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/ccxxKxzb.s:2194   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/ccxxKxzb.s:2237   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/ccxxKxzb.s:2244   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/ccxxKxzb.s:2265   .text.vQueueDelete:0000000000000000 $t
     /tmp/ccxxKxzb.s:2272   .text.vQueueDelete:0000000000000000 vQueueDelete
     /tmp/ccxxKxzb.s:2298   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/ccxxKxzb.s:2305   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/ccxxKxzb.s:2337   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/ccxxKxzb.s:2344   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
ARM GAS  /tmp/ccxxKxzb.s 			page 96


pvPortMalloc
vTaskSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
vPortFree
